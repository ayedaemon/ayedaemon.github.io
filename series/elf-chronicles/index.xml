<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ELF Chronicles on Connected</title>
    <link>https://ayedaemon.github.io/series/elf-chronicles/</link>
    <description>Recent content in ELF Chronicles on Connected</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Apr 2024 21:58:47 +0530</lastBuildDate>
    <atom:link href="https://ayedaemon.github.io/series/elf-chronicles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elf Chronicles: PLT/GOT (7/?)</title>
      <link>https://ayedaemon.github.io/post/2024/04/elf-chronicles-plt-got/</link>
      <pubDate>Wed, 03 Apr 2024 20:17:56 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2024/04/elf-chronicles-plt-got/</guid>
      <description>Exploring general concepts of dynamic linking with PLT and GOT tables</description>
      <content:encoded><![CDATA[<h3 id="intro">Intro</h3>
<p>In earlier articles, we talked about various parts of an ELF file and the many steps needed to create an executable ELF file that can run on your computer.</p>
<p>(Note: The steps are shown visually below; For the source code, check out the symbol table article in this series.)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     ┌────────────────────┐                        ┌─────────────────┐         ┌─────────────────┐
</span></span><span class="line"><span class="cl">     │                    │                        │                 │         │                 │
</span></span><span class="line"><span class="cl">     │   libarithmatic.c  │                        │ libarithmatic.h ├───────► │     main.c      │
</span></span><span class="line"><span class="cl">     │                    │                        │                 │         │                 │
</span></span><span class="line"><span class="cl">     └─────────┬──────────┘                        └─────────────────┘         └────────┬────────┘
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │ /* Compile + assemble */                                               │ /* Compile + assemble */
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               ▼                                                                        ▼
</span></span><span class="line"><span class="cl">    ┌─────────────────────┐                                                   ┌────────────────────┐
</span></span><span class="line"><span class="cl">    │                     │                                                   │                    │
</span></span><span class="line"><span class="cl">    │   libarithmatic.o   │                                                   │       main.o       │
</span></span><span class="line"><span class="cl">    │                     │                                                   │                    │
</span></span><span class="line"><span class="cl">    └─────────┬───────────┘                                                   └──────────┬─────────┘
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                          /* Linking Magic */                             │
</span></span><span class="line"><span class="cl">              └───────────────────────────────────┬──────────────────────────────────────┘
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  ▼
</span></span><span class="line"><span class="cl">                                           ┌────────────────┐
</span></span><span class="line"><span class="cl">                                           │                │
</span></span><span class="line"><span class="cl">                                           │     calc       │
</span></span><span class="line"><span class="cl">                                           │                │
</span></span><span class="line"><span class="cl">                                           └────────────────┘
</span></span></code></pre></div><p>After completing this process, we have an ELF executable called <code>calc</code>. However, we didn&rsquo;t directly include any library that contains definitions for functions like <code>printf</code> or <code>scanf</code>, which we used in our <code>main.c</code> file to input and output data. So, how does that work?</p>
<p>Answer: <strong>Dynamic linking</strong> (which is a complex topic, so for this article, we&rsquo;ll just cover the basics).</p>
<p>If you use the <code>file</code> command on the <code>calc</code> executable, it will display interesting information such as <code>dynamically linked</code> and <code>interpreter /lib64/ld-linux-x86-64.so.2</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt; file calc
</span></span><span class="line"><span class="cl">calc: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=65b929ceea26ea5e9fb8df1b15f2ab24b5c43ff6, for GNU/Linux 4.4.0, not stripped
</span></span></code></pre></div><p>Before we move forward, let&rsquo;s discuss some basics about libraries and how Linux manages them. Linux supports two types of libraries: <em>static</em> and <em>shared</em>.</p>
<p><em>Static</em> libraries are connected to a program directly during the compile time (linking phase), while dynamic libraries (also known as shared libraries) are loaded when the application is launched, and all symbol resolutions and bindings are done at runtime.</p>
<p><em>Dynamic</em> or <em>shared</em> libraries can be handled in two ways: Either you link your program with the shared library and let Linux load the library when the program runs (dynamic linking) <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, or you can design your application so that it loads the library from a specified path and then calls a particular function within that library (dynamic loading). <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Now, looking at our <code>calc</code> binary, it&rsquo;s evident that we&rsquo;re using <strong>dynamic linking</strong> to handle functions like <code>printf</code> and <code>scanf</code> (Since we are not loading any other library in out code). If you have any background in C programming, you&rsquo;ve likely heard of the standard C library (<code>libc</code>) at least once. <code>libc</code> contains definitions for many standard functions used by many C programs, including <code>printf</code> and <code>scanf</code>, which we need in our <code>calc</code> executable.</p>
<p>So, when we run the <code>calc</code> executable, Linux will figure out which libraries it needs to run and load them into the process memory space. Once that&rsquo;s done, it&rsquo;ll load the <code>calc</code> executable and resolve all the dynamic symbols it contains.</p>
<p>In newer systems, this loading and resolving process is done lazily. This means that libraries will only load and resolve when there&rsquo;s demand for a specific symbol. This approach is called lazy binding, and it helps speed up the loading of <code>calc</code> itself.</p>
<p>Since symbol resolution happens at runtime, the address of the resolved symbol needs to be stored somewhere so that we don&rsquo;t have to resolve it every time it&rsquo;s needed.</p>
<h3 id="got-global-offset-table-and-plt-procedure-linkage-table">GOT (GLobal Offset Table) and PLT (Procedure Linkage Table)</h3>
<p>Let&rsquo;s visualize our situation: We need the address of the <code>printf</code> function to make a call, but we don&rsquo;t know where in the process memory space the <code>libc</code> library will load, so we can&rsquo;t determine the exact address for <code>printf</code>.</p>
<p>How can we call <code>printf</code> then?</p>
<p>One naive method would be to load <code>libc</code> into the process memory space, find the exact address for <code>printf</code> using <code>libc</code>&rsquo;s base address, and then modify the <code>.text</code> section of <code>calc</code> to update the placeholder address of <code>printf</code> with the exact address. This seems straightforward and will work. However, with this approach, we&rsquo;ll have to load the library separately for each instance of <code>calc</code> or any other program that relies on <code>libc</code>. This isn&rsquo;t efficient because it would mean having many copies of the same library in memory, unless the library is completely read-only and never modified.</p>
<p>Another approach is to add a level of redirection to the this method. In this newer approach, we patch the <code>.got</code> and/or <code>.got.plt</code> section (which contains the Global Offset Table) of <code>calc</code>. The idea is that when the library is loaded, the dynamic linker examines the relocation, finds the exact address of <code>printf</code>, and patches the <code>.got</code> and/or <code>.got.plt</code> entry as required. Then, the <code>calc</code> binary refers to these tables to point to the right place. This way, everything works seamlessly!</p>
<p><strong>What does PLT do here ??</strong></p>
<p>The PLT (Procedure Linkage Table) adds another level of redirection that utilizes the <code>.got.plt</code> section to keep track of function jumps. Essentially, the Global Offset Table (GOT) is a list of addresses from the <code>libc</code>, while the PLT is another list of addresses used as placeholders in the <code>.text</code> section of the <code>calc</code> binary.</p>
<p>By utilizing this combination of the PLT and the <code>.got.plt</code> section, there&rsquo;s no need to directly patch the <code>.text</code> section of the <code>calc</code> binary. This approach offers security benefits as it avoids modifying the executable code, which could potentially introduce vulnerabilities or trigger security mechanisms designed to detect such modifications.</p>
<p><em>Security benifits ++</em></p>
<h3 id="analysis">Analysis</h3>
<p>It will become clearer when we examine the disassembly (which is my favorite part).</p>
<p>As usual, we&rsquo;ll <strong>disas</strong>semble <strong>main</strong> function first. We don&rsquo;t have to check everything here, just focus on <code>printf</code> and <code>scanf</code> call instructions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">0x000055555555518f &lt;+38&gt;:    call   0x555555555050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">0x00005555555551b2 &lt;+73&gt;:    call   0x555555555060 &lt;__isoc99_scanf@plt&gt;
</span></span></code></pre></div><p>Interesting thing to note here is that they point to addresses which are just <em>0x555555555060 - 0x555555555050 = <code>16</code></em> bytes away from each other. I&rsquo;m sure none of these functions can be defined in just 16 bytes.</p>
<p>This is the PLT stub, the area which is referred by <code>.text</code> section for all kinds of dynamic linked library calls.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(gdb) x/3i 0x555555555050
</span></span><span class="line"><span class="cl">   0x555555555050 &lt;printf@plt&gt;:         jmp    QWORD PTR [rip+0x2fba]        # 0x555555558010 &lt;printf@got.plt&gt;
</span></span><span class="line"><span class="cl">   0x555555555056 &lt;printf@plt+6&gt;:       push   0x2
</span></span><span class="line"><span class="cl">   0x55555555505b &lt;printf@plt+11&gt;:      jmp    0x555555555020
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(gdb) x/3i 0x555555555060
</span></span><span class="line"><span class="cl">   0x555555555060 &lt;__isoc99_scanf@plt&gt;:         jmp    QWORD PTR [rip+0x2fb2]        # 0x555555558018 &lt;__isoc99_scanf@got.plt&gt;
</span></span><span class="line"><span class="cl">   0x555555555066 &lt;__isoc99_scanf@plt+6&gt;:       push   0x3
</span></span><span class="line"><span class="cl">   0x55555555506b &lt;__isoc99_scanf@plt+11&gt;:      jmp    0x555555555020
</span></span></code></pre></div><p>If you examine the first instructions in both, you&rsquo;ll notice they both point to memory locations <code>0x555555558010</code> and <code>0x555555558018</code>, which are the Global Offset Table (GOT) entries. These entries hold addresses of actual functions from the dynamic libraries. You can inspect these locations to find where the first instruction in the PLT stub is directing the jump to.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(gdb) x/1x 0x555555558010
</span></span><span class="line"><span class="cl">0x555555558010 &lt;printf@got.plt&gt;:        0x55555056
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(gdb) x/1x 0x555555558018
</span></span><span class="line"><span class="cl">0x555555558018 &lt;__isoc99_scanf@got.plt&gt;:        0x55555066
</span></span></code></pre></div><p>Alright, since we&rsquo;re using these functions for the first time, the steps of finding the function&rsquo;s address and storing it in the Global Offset Table haven&rsquo;t been completed yet (which is part of the lazy binding logic). So, the program jumps to the next step instead (<code>0x55555056</code> and <code>0x55555066</code> respectively).</p>
<p>In next instruction from PLT stub, a certain number onto the stack&hellip; and then both of the PLT stubs jump to same address &ndash; <code>0x555555555020</code>. This is the address which should trigger the dynamic symbol resolution process.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(gdb) x/3i 0x555555555020
</span></span><span class="line"><span class="cl">=&gt; 0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0
</span></span><span class="line"><span class="cl">   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8
</span></span><span class="line"><span class="cl">   0x55555555502c:      nop    DWORD PTR [rax+0x0]
</span></span></code></pre></div><p>It pushes something (<code>0x555555557ff0</code>) to stack and then jumps to <code>0x555555557ff8</code> address which is actually <code>_dl_runtime_resolve_xsavec</code> function in our dynamic linker (<code>/lib64/ld-linux-x86-64.so.2</code>). This function will resolve the address for <code>printf</code> and <code>scanf</code> and then patch the GOT table for it.</p>
<p>Once that is done, you can check the patched entries in the GOT tables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(gdb) x/1x 0x555555558010
</span></span><span class="line"><span class="cl">0x555555558010 &lt;printf@got.plt&gt;:        0xf7e16730
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(gdb) x/1x 0x555555558018
</span></span><span class="line"><span class="cl">0x555555558018 &lt;__isoc99_scanf@got.plt&gt;:        0xf7e16430
</span></span></code></pre></div><p>Now, these are the real addresses for the <code>printf</code> and <code>scanf</code> functions within the <code>calc</code> program&rsquo;s memory space. With this completed, whenever <code>calc</code> needs to use <code>printf</code> or <code>scanf</code>, their addresses will already be stored in the GOT table, which can be accessed by the corresponding PLT stubs.</p>
<h3 id="conclusion">Conclusion</h3>
<p>In conclusion, dynamic linking plays a crucial role in how programs interact with shared libraries in Linux systems. By utilizing mechanisms like the Procedure Linkage Table (PLT) and the Global Offset Table (GOT), programs can efficiently access functions from shared libraries at runtime. This process involves lazy binding, where function addresses are resolved and stored in the GOT only when they are first called, optimizing performance and memory usage. Through this approach, programs like <code>calc</code> can seamlessly utilize functions like <code>printf</code> and <code>scanf</code> without the need for manual intervention or redundant loading of shared libraries. Overall, dynamic linking provides a flexible and efficient way for programs to access external functionality, enhancing the functionality and usability of software on Linux platforms.</p>
<hr>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="https://developer.ibm.com/tutorials/l-dynamic-libraries/">https://developer.ibm.com/tutorials/l-dynamic-libraries/</a></li>
<li><a href="https://opensource.com/article/22/5/dynamic-linking-modular-libraries-linux">https://opensource.com/article/22/5/dynamic-linking-modular-libraries-linux</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.baeldung.com/cs/dynamic-linking-vs-dynamic-loading#2-dynamic-linking">https://www.baeldung.com/cs/dynamic-linking-vs-dynamic-loading#2-dynamic-linking</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.baeldung.com/cs/dynamic-linking-vs-dynamic-loading#loading">https://www.baeldung.com/cs/dynamic-linking-vs-dynamic-loading#loading</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Elf Chronicles: Relocations (6/?)</title>
      <link>https://ayedaemon.github.io/post/2023/12/elf-chronicles-relocations/</link>
      <pubDate>Fri, 08 Dec 2023 14:17:56 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2023/12/elf-chronicles-relocations/</guid>
      <description>Exploring general concept of ELF relocations</description>
      <content:encoded><![CDATA[<p>In previous article about Symbol Tables, we talked about the below diagram &hellip;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     ┌────────────────────┐                        ┌─────────────────┐         ┌─────────────────┐
</span></span><span class="line"><span class="cl">     │                    │                        │                 │         │                 │
</span></span><span class="line"><span class="cl">     │   libarithmatic.c  │                        │ libarithmatic.h ├───────► │     main.c      │
</span></span><span class="line"><span class="cl">     │                    │                        │                 │         │                 │
</span></span><span class="line"><span class="cl">     └─────────┬──────────┘                        └─────────────────┘         └────────┬────────┘
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │ /* Compile + assemble */                                               │ /* Compile + assemble */
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               ▼                                                                        ▼
</span></span><span class="line"><span class="cl">    ┌─────────────────────┐                                                   ┌────────────────────┐
</span></span><span class="line"><span class="cl">    │                     │                                                   │                    │
</span></span><span class="line"><span class="cl">    │   libarithmatic.o   │                                                   │       main.o       │
</span></span><span class="line"><span class="cl">    │                     │                                                   │                    │
</span></span><span class="line"><span class="cl">    └─────────┬───────────┘                                                   └──────────┬─────────┘
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                          /* Linking Magic */                             │
</span></span><span class="line"><span class="cl">              └───────────────────────────────────┬──────────────────────────────────────┘
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  ▼
</span></span><span class="line"><span class="cl">                                           ┌────────────────┐
</span></span><span class="line"><span class="cl">                                           │                │
</span></span><span class="line"><span class="cl">                                           │     calc       │
</span></span><span class="line"><span class="cl">                                           │                │
</span></span><span class="line"><span class="cl">                                           └────────────────┘
</span></span></code></pre></div><p>&hellip;and how the compiler was unaware of the final addresses for many symbols. When things get a bit confusing for the compiler, it takes the easy route by putting zeros in the addresses and creating relocation entries for the linker/loader to sort out.</p>
<p>The linker combines all the <code>.o</code> files, causing changes to the positions of different parts. For example, the <code>main</code> function in <code>main.o</code> and <code>addFunc</code> in <code>libarithmatic.o</code> both start off at position <code>0x0</code>. But when you link these files, this setup causes issues, so some tweaks are needed.</p>
<p>In this situation, the compiler and assembler team up to produce the <code>.o</code> file, but they don&rsquo;t know for sure where each part will end up in the eventual <code>calc</code> binary. So, they play it safe by leaving these spots empty and make notes in the relocations section. This tells the linker that these positions need some adjustments later on.</p>
<h2 id="relocations">Relocations</h2>
<p>According to <a href="https://refspecs.linuxbase.org/elf/elf.pdf">ELF specification (version 1.2)</a></p>
<blockquote>
<blockquote>
<p>Relocation is the process of connecting symbolic references with symbolic definitions.</p>
</blockquote>
</blockquote>
<p>Relocation is a straightforward concept in coding. When you&rsquo;re compiling code, the compiler doesn&rsquo;t always know the exact addresses for everything in the program. ELF relocations become important when the addresses of symbols are uncertain during compilation, often because the final addresses are determined by the linker or loader at a later stage. It&rsquo;s similar to arranging pieces in a puzzle without having all the details upfront.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## Before linking - main.o
</span></span><span class="line"><span class="cl">❯ objdump -M intel -D -j .text main.o | grep call
</span></span><span class="line"><span class="cl"> 26:        e8 00 00 00 00          call   2b &lt;main+0x2b&gt;
</span></span><span class="line"><span class="cl"> 49:        e8 00 00 00 00          call   4e &lt;main+0x4e&gt;
</span></span><span class="line"><span class="cl"> 86:        e8 00 00 00 00          call   8b &lt;main+0x8b&gt;
</span></span><span class="line"><span class="cl"> a3:        e8 00 00 00 00          call   a8 &lt;main+0xa8&gt;
</span></span><span class="line"><span class="cl"> c0:        e8 00 00 00 00          call   c5 &lt;main+0xc5&gt;
</span></span><span class="line"><span class="cl"> dd:        e8 00 00 00 00          call   e2 &lt;main+0xe2&gt;
</span></span><span class="line"><span class="cl"> f5:        e8 00 00 00 00          call   fa &lt;main+0xfa&gt;
</span></span><span class="line"><span class="cl">123:        e8 00 00 00 00          call   128 &lt;main+0x128&gt;
</span></span><span class="line"><span class="cl">13c:        e8 00 00 00 00          call   141 &lt;main+0x141&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">## After linking - calc
</span></span><span class="line"><span class="cl">❯ objdump -M intel -D -j .text calc | grep call
</span></span><span class="line"><span class="cl">1138:       e8 63 ff ff ff          call   10a0 &lt;_start+0x30&gt;
</span></span><span class="line"><span class="cl">118f:       e8 bc fe ff ff          call   1050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">11b2:       e8 a9 fe ff ff          call   1060 &lt;__isoc99_scanf@plt&gt;
</span></span><span class="line"><span class="cl">11ef:       e8 b8 00 00 00          call   12ac &lt;addFunc&gt;
</span></span><span class="line"><span class="cl">120c:       e8 b5 00 00 00          call   12c6 &lt;subFunc&gt;
</span></span><span class="line"><span class="cl">1229:       e8 b2 00 00 00          call   12e0 &lt;mulFunc&gt;
</span></span><span class="line"><span class="cl">1246:       e8 af 00 00 00          call   12fa &lt;divFunc&gt;
</span></span><span class="line"><span class="cl">125e:       e8 cd fd ff ff          call   1030 &lt;puts@plt&gt;
</span></span><span class="line"><span class="cl">128c:       e8 bf fd ff ff          call   1050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">12a5:       e8 96 fd ff ff          call   1040 &lt;__stack_chk_fail@plt&gt;
</span></span></code></pre></div><p>Now, there are three essential elements needed for relocation to take place:</p>
<ol>
<li>The spot where the adjustment needs to be made.</li>
<li>The symbol that&rsquo;s part of the adjustment.</li>
<li>An algorithm specifying how to calculate and apply the necessary fix.</li>
</ol>
<p>The compiler stores all this information in a special section identified by type - either <code>REL</code> (0x9) or <code>RELA</code> (0x4).</p>
<ul>
<li><code>REL</code> is used for basic relocation entries.</li>
<li><code>RELA</code> is essentially the same as <code>REL</code>, but with an extra addend value. <em>This doesn&rsquo;t significantly impact the concept, though.</em></li>
</ul>
<p>You can easily identify these sections using <code>readelf</code>;&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ readelf --section-headers --wide main.o
</span></span><span class="line"><span class="cl">There are 14 section headers, starting at offset 0x5a8:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Section Headers:
</span></span><span class="line"><span class="cl">  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
</span></span><span class="line"><span class="cl">  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
</span></span><span class="line"><span class="cl">  [ 1] .text             PROGBITS        0000000000000000 000040 000143 00  AX  0   0  1
</span></span><span class="line"><span class="cl">  [ 2] .rela.text        RELA            0000000000000000 0003e0 000138 18   I 11   1  8
</span></span><span class="line"><span class="cl">  [ 3] .data             PROGBITS        0000000000000000 000183 000000 00  WA  0   0  1
</span></span><span class="line"><span class="cl">  [ 4] .bss              NOBITS          0000000000000000 000183 000000 00  WA  0   0  1
</span></span><span class="line"><span class="cl">  [ 5] .rodata           PROGBITS        0000000000000000 000183 000041 00   A  0   0  1
</span></span><span class="line"><span class="cl">  [ 6] .comment          PROGBITS        0000000000000000 0001c4 00001c 01  MS  0   0  1
</span></span><span class="line"><span class="cl">  [ 7] .note.GNU-stack   PROGBITS        0000000000000000 0001e0 000000 00      0   0  1
</span></span><span class="line"><span class="cl">  [ 8] .note.gnu.property NOTE            0000000000000000 0001e0 000030 00   A  0   0  8
</span></span><span class="line"><span class="cl">  [ 9] .eh_frame         PROGBITS        0000000000000000 000210 000038 00   A  0   0  8
</span></span><span class="line"><span class="cl">  [10] .rela.eh_frame    RELA            0000000000000000 000518 000018 18   I 11   9  8
</span></span><span class="line"><span class="cl">  [11] .symtab           SYMTAB          0000000000000000 000248 000138 18     12   4  8
</span></span><span class="line"><span class="cl">  [12] .strtab           STRTAB          0000000000000000 000380 000059 00      0   0  1
</span></span><span class="line"><span class="cl">  [13] .shstrtab         STRTAB          0000000000000000 000530 000074 00      0   0  1
</span></span><span class="line"><span class="cl">Key to Flags:
</span></span><span class="line"><span class="cl">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
</span></span><span class="line"><span class="cl">  L (link order), O (extra OS processing required), G (group), T (TLS),
</span></span><span class="line"><span class="cl">  C (compressed), x (unknown), o (OS specific), E (exclude),
</span></span><span class="line"><span class="cl">  D (mbind), l (large), p (processor specific)
</span></span></code></pre></div><p>My parser gives me the same results&hellip; (with different looks)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> [ 00 ] Section Name:                            Type: 0x0       Flags: 0x0      Addr: 0x0       Offset: 0x0             Size: 0         Link: 0         Info: 0x0       Addralign: 0x0          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 01 ] Section Name: .text                      Type: 0x1       Flags: 0x6      Addr: 0x0       Offset: 0x40            Size: 323       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 02 ] Section Name: .rela.text                 Type: 0x4       Flags: 0x40     Addr: 0x0       Offset: 0x3e0           Size: 312       Link: 11        Info: 0x1       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 03 ] Section Name: .data                      Type: 0x1       Flags: 0x3      Addr: 0x0       Offset: 0x183           Size: 0         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 04 ] Section Name: .bss                       Type: 0x8       Flags: 0x3      Addr: 0x0       Offset: 0x183           Size: 0         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 05 ] Section Name: .rodata                    Type: 0x1       Flags: 0x2      Addr: 0x0       Offset: 0x183           Size: 65        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 06 ] Section Name: .comment                   Type: 0x1       Flags: 0x30     Addr: 0x0       Offset: 0x1c4           Size: 28        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 1
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 07 ] Section Name: .note.GNU-stack            Type: 0x1       Flags: 0x0      Addr: 0x0       Offset: 0x1e0           Size: 0         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 08 ] Section Name: .note.gnu.property         Type: 0x7       Flags: 0x2      Addr: 0x0       Offset: 0x1e0           Size: 48        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 09 ] Section Name: .eh_frame                  Type: 0x1       Flags: 0x2      Addr: 0x0       Offset: 0x210           Size: 56        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 10 ] Section Name: .rela.eh_frame             Type: 0x4       Flags: 0x40     Addr: 0x0       Offset: 0x518           Size: 24        Link: 11        Info: 0x9       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 11 ] Section Name: .symtab                    Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x248           Size: 312       Link: 12        Info: 0x4       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 12 ] Section Name: .strtab                    Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x380           Size: 89        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 13 ] Section Name: .shstrtab                  Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x530           Size: 116       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span></code></pre></div><p>In any case, identifying the relocation sections is straightforward &ndash; REL (0x9) or RELA (0x4).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># From readelf
</span></span><span class="line"><span class="cl">  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
</span></span><span class="line"><span class="cl">  [ 2] .rela.text        RELA            0000000000000000 0003e0 000138 18   I 11   1  8
</span></span><span class="line"><span class="cl">  [10] .rela.eh_frame    RELA            0000000000000000 000518 000018 18   I 11   9  8
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># From my parser
</span></span><span class="line"><span class="cl"> [ 02 ] Section Name: .rela.text                 Type: 0x4       Flags: 0x40     Addr: 0x0       Offset: 0x3e0           Size: 312       Link: 11        Info: 0x1       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> [ 10 ] Section Name: .rela.eh_frame             Type: 0x4       Flags: 0x40     Addr: 0x0       Offset: 0x518           Size: 24        Link: 11        Info: 0x9       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</span></span></code></pre></div><p>(Note: To keep things clear in this article and to maintain simplicity, we&rsquo;re going to ignore the <code>.rela.eh_frame</code>. We can dive into that particular aspect another time.)</p>
<p>We can use the details shared earlier to pinpoint the real data of the relocation section. This means we&rsquo;ll be finding the section data by using the section header entry &ndash; a process we&rsquo;ve gone through multiple times before.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            [ 02 ] Section Name: .rela.text
</span></span><span class="line"><span class="cl">                      Type: 0x4
</span></span><span class="line"><span class="cl">                      Flags: 0x40
</span></span><span class="line"><span class="cl">                      Addr: 0x0
</span></span><span class="line"><span class="cl">            ┌─────────Offset: 0x3e0
</span></span><span class="line"><span class="cl">            │      ┌──Size: 312
</span></span><span class="line"><span class="cl">            │      │  Link: 11
</span></span><span class="line"><span class="cl">            │      │  Info: 0x1
</span></span><span class="line"><span class="cl">            │      │  Addralign: 0x8
</span></span><span class="line"><span class="cl">            │      │  Entsize: 24
</span></span><span class="line"><span class="cl">            │      │        │
</span></span><span class="line"><span class="cl">            │      │        │
</span></span><span class="line"><span class="cl">            │      │        │
</span></span><span class="line"><span class="cl">            ▼      ▼        ▼
</span></span><span class="line"><span class="cl">❯ xxd -s 0x3e0 -l 0x138 -c 0x18 main.o | nl -v0 -
</span></span><span class="line"><span class="cl">     0  000003e0: 1a00 0000 0000 0000 0200 0000 0300 0000 fcff ffff ffff ffff  ........................
</span></span><span class="line"><span class="cl">     1  000003f8: 2700 0000 0000 0000 0400 0000 0500 0000 fcff ffff ffff ffff  &#39;.......................
</span></span><span class="line"><span class="cl">     2  00000410: 3d00 0000 0000 0000 0200 0000 0300 0000 1500 0000 0000 0000  =.......................
</span></span><span class="line"><span class="cl">     3  00000428: 4a00 0000 0000 0000 0400 0000 0600 0000 fcff ffff ffff ffff  J.......................
</span></span><span class="line"><span class="cl">     4  00000440: 8700 0000 0000 0000 0400 0000 0700 0000 fcff ffff ffff ffff  ........................
</span></span><span class="line"><span class="cl">     5  00000458: a400 0000 0000 0000 0400 0000 0800 0000 fcff ffff ffff ffff  ........................
</span></span><span class="line"><span class="cl">     6  00000470: c100 0000 0000 0000 0400 0000 0900 0000 fcff ffff ffff ffff  ........................
</span></span><span class="line"><span class="cl">     7  00000488: de00 0000 0000 0000 0400 0000 0a00 0000 fcff ffff ffff ffff  ........................
</span></span><span class="line"><span class="cl">     8  000004a0: ee00 0000 0000 0000 0200 0000 0300 0000 1e00 0000 0000 0000  ........................
</span></span><span class="line"><span class="cl">     9  000004b8: f600 0000 0000 0000 0400 0000 0b00 0000 fcff ffff ffff ffff  ........................
</span></span><span class="line"><span class="cl">    10  000004d0: 1701 0000 0000 0000 0200 0000 0300 0000 2f00 0000 0000 0000  ................/.......
</span></span><span class="line"><span class="cl">    11  000004e8: 2401 0000 0000 0000 0400 0000 0500 0000 fcff ffff ffff ffff  $.......................
</span></span><span class="line"><span class="cl">    12  00000500: 3d01 0000 0000 0000 0400 0000 0c00 0000 fcff ffff ffff ffff  =.......................
</span></span></code></pre></div><p>Linux kernel has some specific structures to define <code>REL</code> and <code>RELA</code> entries&hellip;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/elf.h#L171 */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">elf64_rel</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span> <span class="n">r_offset</span><span class="p">;</span>	<span class="cm">/* Location at which to apply the action */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span> <span class="n">r_info</span><span class="p">;</span>	<span class="cm">/* index and type of relocation */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Rel</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/elf.h#L182 */</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">elf64_rela</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span> <span class="n">r_offset</span><span class="p">;</span>	<span class="cm">/* Location at which to apply the action */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span> <span class="n">r_info</span><span class="p">;</span>	<span class="cm">/* index and type of relocation */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Sxword</span> <span class="n">r_addend</span><span class="p">;</span>	<span class="cm">/* Constant addend used to compute value */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Rela</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/elf.h#L163 */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define ELF64_R_SYM(i)			((i) &gt;&gt; 32)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define ELF64_R_TYPE(i)			((i) &amp; 0xffffffff)
</span></span></span></code></pre></div><p>After parsing this section&rsquo;s data, I got following results.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 02 ] Section Name: .rela.text        Type: 0x4       Flags: 0x40     Addr: 0x0       Offset: 0x3e0           Size: 312       Link: 11        Info: 0x1       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">     [  0 ] Offset: 0x1a         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: -4
</span></span><span class="line"><span class="cl">     [  1 ] Offset: 0x27         Info: 0x000500000004 (Sym: 0x5 | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [  2 ] Offset: 0x3d         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: 21
</span></span><span class="line"><span class="cl">     [  3 ] Offset: 0x4a         Info: 0x000600000004 (Sym: 0x6 | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [  4 ] Offset: 0x87         Info: 0x000700000004 (Sym: 0x7 | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [  5 ] Offset: 0xa4         Info: 0x000800000004 (Sym: 0x8 | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [  6 ] Offset: 0xc1         Info: 0x000900000004 (Sym: 0x9 | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [  7 ] Offset: 0xde         Info: 0x000a00000004 (Sym: 0xa | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [  8 ] Offset: 0xee         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: 30
</span></span><span class="line"><span class="cl">     [  9 ] Offset: 0xf6         Info: 0x000b00000004 (Sym: 0xb | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [ 10 ] Offset: 0x117        Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: 47
</span></span><span class="line"><span class="cl">     [ 11 ] Offset: 0x124        Info: 0x000500000004 (Sym: 0x5 | Type: 0x4)     Addend: -4
</span></span><span class="line"><span class="cl">     [ 12 ] Offset: 0x13d        Info: 0x000c00000004 (Sym: 0xc | Type: 0x4)     Addend: -4
</span></span></code></pre></div><p>Let&rsquo;s pause for a moment to grasp the significance of each member in this structure and how it aids the linker in the relocation process.</p>
<p>(👇 <em>Shamelessly stolen from <a href="https://www.man7.org/linux/man-pages/man5/elf.5.html"><code>man 5 elf</code></a></em> 👇)</p>
<h3 id="r_offset">r_offset</h3>
<p>This member gives the location at which to apply the relocation.</p>
<ul>
<li>For a relocatable file, the value is the byte offset from the beginning of the section where relocation is to be applied.</li>
<li>For an executable file or shared object, the value is the virtual address of the storage unit affected by the relocation.</li>
</ul>
<h3 id="r_info">r_info</h3>
<p>This member gives both the symbol table index with respect to which the relocation must be made and the type of relocation to apply. (Linux kernel provides a macro to filter these values out from it - <code>ELF64_R_SYM</code> and <code>ELF64_R_TYPE</code>)</p>
<h3 id="r_addend">r_addend</h3>
<p>This member specifies a constant addend used to compute the value to be stored into the relocatable field.</p>
<h2 id="analysis">Analysis</h2>
<p>Now armed with the theoretical knowledge, let&rsquo;s delve into how the linker utilizes this information to perform a relocation. We&rsquo;ll begin by examining the details of the first relocation entry.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[  0 ] Offset: 0x1a         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: -4
</span></span></code></pre></div><p>Now there are 2 things I want you to think about before we even start with the relocation process&hellip;</p>
<ol>
<li>We know <code>r_offset</code> holds the offset from beginning of the section where relocation is to be applied. <strong>Which section is that here??</strong></li>
<li>And <code>ELF64_R_SYM</code> from <code>r_info</code> stores the index in symbol table. But we can obviously have more than 1 symbol table, so <strong>Which symbol table we are talking about here??</strong></li>
</ol>
<p>Answer &raquo; To identify that, you just have to check <code>sh_info</code> and <code>sh_link</code> members from the section header entry.</p>
<p>In our case, the associated symbol table and the section where relocations will apply can be viewed like this:-</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">             ┌────────────────────────────────────┐
</span></span><span class="line"><span class="cl">             │  [ 11 ] Section Name: .symtab      │◄───────┐
</span></span><span class="line"><span class="cl">             │          Type: 0x2                 │        │
</span></span><span class="line"><span class="cl">             │          Flags: 0x0                │        │
</span></span><span class="line"><span class="cl">             │          Addr: 0x0                 │        │
</span></span><span class="line"><span class="cl">             │          Offset: 0x248             │        │
</span></span><span class="line"><span class="cl">             │          Size: 312                 │        │
</span></span><span class="line"><span class="cl">             │          Link: 12                  │        │
</span></span><span class="line"><span class="cl">             │          Info: 0x4                 │        │
</span></span><span class="line"><span class="cl">             │          Addralign: 0x8            │        │
</span></span><span class="line"><span class="cl">             │          Entsize: 24               │        │
</span></span><span class="line"><span class="cl">             │                                    │        │
</span></span><span class="line"><span class="cl">             └────────────────────────────────────┘        │
</span></span><span class="line"><span class="cl">                                                           │
</span></span><span class="line"><span class="cl">                         /* all the symbols associated     │
</span></span><span class="line"><span class="cl">                            are in section 11 */           │
</span></span><span class="line"><span class="cl">                                                           │
</span></span><span class="line"><span class="cl">                                                           │
</span></span><span class="line"><span class="cl">             ┌────────────────────────────────────┐        │
</span></span><span class="line"><span class="cl">             │  [ 02 ] Section Name: .rela.text   │        │
</span></span><span class="line"><span class="cl">             │          Type: 0x4                 │        │
</span></span><span class="line"><span class="cl">             │          Flags: 0x40               │        │
</span></span><span class="line"><span class="cl">             │          Addr: 0x0                 │        │
</span></span><span class="line"><span class="cl">             │          Offset: 0x3e0             │        │
</span></span><span class="line"><span class="cl">             │          Size: 312                 │        │
</span></span><span class="line"><span class="cl">             │          Link: 11 ─────────────────┼────────┘
</span></span><span class="line"><span class="cl">     ┌───────┼───────── Info: 0x1                 │
</span></span><span class="line"><span class="cl">     │       │          Addralign: 0x8            │
</span></span><span class="line"><span class="cl">     │       │          Entsize: 24               │
</span></span><span class="line"><span class="cl">     │       │                                    │
</span></span><span class="line"><span class="cl">     │       └────────────────────────────────────┘
</span></span><span class="line"><span class="cl">     │
</span></span><span class="line"><span class="cl">     │
</span></span><span class="line"><span class="cl">     │ /* relocations apply to section with index 1 */
</span></span><span class="line"><span class="cl">     │
</span></span><span class="line"><span class="cl">     │       ┌───────────────────────────────────┐
</span></span><span class="line"><span class="cl">     └──────►│   [ 01 ] Section Name: .text      │
</span></span><span class="line"><span class="cl">             │           Type: 0x1               │
</span></span><span class="line"><span class="cl">             │           Flags: 0x6              │
</span></span><span class="line"><span class="cl">             │           Addr: 0x0               │
</span></span><span class="line"><span class="cl">             │           Offset: 0x40            │
</span></span><span class="line"><span class="cl">             │           Size: 323               │
</span></span><span class="line"><span class="cl">             │           Link: 0                 │
</span></span><span class="line"><span class="cl">             │           Info: 0x0               │
</span></span><span class="line"><span class="cl">             │           Addralign: 0x1          │
</span></span><span class="line"><span class="cl">             │           Entsize: 0              │
</span></span><span class="line"><span class="cl">             │                                   │
</span></span><span class="line"><span class="cl">             └───────────────────────────────────┘
</span></span></code></pre></div><p>Traditionally, the chosen naming scheme for the relocation section indicates the section where relocations are intended to be applied. For example, if relocations are to be applied on <code>.text</code> section, then the relocation entries will be under <code>.rela.text</code> or <code>.rel.text</code>. However, it&rsquo;s crucial to note that this is merely a tradition and not a strict requirement.</p>
<p><em>In the wisdom of ancient gods, it is advised not to depend solely on names.</em></p>
<p><img loading="lazy" src="https://media.giphy.com/media/Y3ptrXcCeZZdj0yPZH/giphy.gif#center" alt=""  />
</p>
<p>Now that you know where to apply relocation and where to look for symbols&hellip; let&rsquo;s look at the relocation entry we started with</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[  0 ] Offset: 0x1a         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: -4
</span></span></code></pre></div><p>We can now understand that:</p>
<ul>
<li>The relocation is to be applied at offset <code>0x1a</code> in <code>.text</code> section.</li>
<li>The symbol associated with this relocation is 3rd symbol in <code>.symtab</code> section.</li>
</ul>
<p>So, if you want to see the big picture,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">              ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">              │ [ 11 ] Section Name: .symtab                    Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x248           Size: 312       Link: 12        Info: 0x4       Addralign: 0x8 │
</span></span><span class="line"><span class="cl">              │      [  0 ] Name:                                        Info: 0x00 (Bind: 0x0 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">              │      [  1 ] Name: main.c                                 Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">              │      [  2 ] Name:                                        Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        ┌─────┼────► [  3 ] Name:                                        Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x5      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [  4 ] Name: main                                   Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x143                   │
</span></span><span class="line"><span class="cl">        │     │      [  5 ] Name: printf                                 Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [  6 ] Name: __isoc99_scanf                         Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [  7 ] Name: addFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [  8 ] Name: subFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [  9 ] Name: mulFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [ 10 ] Name: divFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [ 11 ] Name: puts                                   Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │      [ 12 ] Name: __stack_chk_fail                       Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0                     │
</span></span><span class="line"><span class="cl">        │     │                                                                                                                                                                                        │
</span></span><span class="line"><span class="cl">        │     └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
</span></span><span class="line"><span class="cl">        │
</span></span><span class="line"><span class="cl">        └──────────────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">                                                                   │
</span></span><span class="line"><span class="cl">                                                                   │
</span></span><span class="line"><span class="cl">                                                                   │
</span></span><span class="line"><span class="cl">                                                                   │
</span></span><span class="line"><span class="cl">                                                                   │
</span></span><span class="line"><span class="cl">          [  0 ] Offset: 0x1a         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: -4
</span></span><span class="line"><span class="cl">                           │
</span></span><span class="line"><span class="cl">                           │
</span></span><span class="line"><span class="cl">                           │
</span></span><span class="line"><span class="cl">                           │
</span></span><span class="line"><span class="cl">                           └─────────────────────────┐
</span></span><span class="line"><span class="cl">                                                     │
</span></span><span class="line"><span class="cl">                                                     │
</span></span><span class="line"><span class="cl">                    ┌────────────────────────────────┼───────────────────────────────────────────────────┐
</span></span><span class="line"><span class="cl">                    │                                │                                                   │
</span></span><span class="line"><span class="cl">                    │   Disassembly of section .text:│                                                   │
</span></span><span class="line"><span class="cl">                    │                                │                                                   │
</span></span><span class="line"><span class="cl">                    │   0000000000000000 &lt;main&gt;:     │                                                   │
</span></span><span class="line"><span class="cl">                    │      0:   55                   │  push   rbp                                       │
</span></span><span class="line"><span class="cl">                    │      1:   48 89 e5             │  mov    rbp,rsp                                   │
</span></span><span class="line"><span class="cl">                    │      4:   48 83 ec 20          │  sub    rsp,0x20                                  │
</span></span><span class="line"><span class="cl">                    │      8:   64 48 8b 04 25 28 00 │  mov    rax,QWORD PTR fs:0x28                     │
</span></span><span class="line"><span class="cl">                    │      f:   00 00             ┌──┘                                                   │
</span></span><span class="line"><span class="cl">                    │     11:   48 89 45 f8       ▼     mov    QWORD PTR [rbp-0x8],rax                   │
</span></span><span class="line"><span class="cl">                    │     15:   31 c0   ┌───────────┐   xor    eax,eax                                   │
</span></span><span class="line"><span class="cl">                    │     17:   48 8d 05│00 00 00 00│   lea    rax,[rip+0x0]        # 1e &lt;main+0x1e&gt;     │
</span></span><span class="line"><span class="cl">                    │     1e:   48 89 c7└───────────┘   mov    rdi,rax                                   │
</span></span><span class="line"><span class="cl">                    │     21:   b8 00 00 00 00          mov    eax,0x0                                   │
</span></span><span class="line"><span class="cl">                    │     26:   e8 00 00 00 00          call   2b &lt;main+0x2b&gt;                            │
</span></span><span class="line"><span class="cl">                    │     2b:   48 8d 4d f0             lea    rcx,[rbp-0x10]                            │
</span></span><span class="line"><span class="cl">                    │                                                                                    │
</span></span><span class="line"><span class="cl">                    └────────────────────────────────────────────────────────────────────────────────────┘
</span></span></code></pre></div><p>I get that things might look like a mess, a real puzzle at first. But trust me, with a bit of experience, you&rsquo;ll start to figure it out.</p>
<p>Now that we&rsquo;ve uncovered the secret behind the symbol and pinpointed where the relocation is going to happen, it&rsquo;s time to figure out the algorithm we&rsquo;re going to use for relocation. Just peek into the <code>Type</code> part of <code>r_info</code>. In our case, it&rsquo;s holding the number <code>0x2</code>.</p>
<p>With a quick look at the gcc source code, I can tell you that this algorithm is <code>R_X86_64_PC32</code>&hellip; And another brief look at the source code of <a href="https://github.com/rui314/mold/"><code>mold</code> (a modern linker)</a> helps me fully comprehend the algorithm&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;hb=2bd00179885928fd95fcabfafc50e7b5c6e660d2#l3579 */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define R_X86_64_PC32           2       </span><span class="cm">/* PC relative 32 bit signed */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* https://github.com/rui314/mold/blob/main/elf/arch-x86-64.cc#L433C1-L436C13 */</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nl">R_X86_64_PC32</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nl">R_X86_64_PLT32</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="nf">write32s</span><span class="p">(</span><span class="n">S</span> <span class="o">+</span> <span class="n">A</span> <span class="o">-</span> <span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">break</span><span class="p">;</span>
</span></span></code></pre></div><p>Alright, so the magical spell for this relocation is <code>S + A - P</code>&hellip;. Now, let&rsquo;s break it down</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">S = value of symbol
</span></span><span class="line"><span class="cl">A = Addend (r_addend)
</span></span><span class="line"><span class="cl">P = place of relocation (r_offset is used to calculate this)
</span></span></code></pre></div><p>The addend (<code>A</code>) is simply <code>-4</code>. Why <code>-4</code>?? I don&rsquo;t know 🤷 <code>¯\_(ツ)_/¯</code> (If you happen to know it, please share your wisdom with this stuppid child&hellip; pretty please! 🥺👉👈)</p>
<p>And the place of relocation (<code>P</code>) should be <code>0x1a</code>&hellip; right? <strong>WRONG!!</strong>&hellip; the place of relocation will be location of <code>.text</code> section + <code>0x1a</code>. Linker will know where <code>.text</code> will be after the merge process, so it&rsquo;ll be easy for the linker to get the exact location.</p>
<p>Finally, value of symbol (<code>S</code>), this one is a bit tricky here&hellip; You need to take a look at the symbol table for this</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 11 ] Section Name: .symtab                    Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x248           Size: 312       Link: 12        Info: 0x4       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">    [  0 ] Name:                                        Info: 0x00 (Bind: 0x0 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  1 ] Name: main.c                                 Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  2 ] Name:                                        Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  3 ] Name:                                        Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x5      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  4 ] Name: main                                   Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x143
</span></span><span class="line"><span class="cl">    [  5 ] Name: printf                                 Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  6 ] Name: __isoc99_scanf                         Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  7 ] Name: addFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  8 ] Name: subFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [  9 ] Name: mulFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [ 10 ] Name: divFunc                                Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [ 11 ] Name: puts                                   Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">    [ 12 ] Name: __stack_chk_fail                       Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span></code></pre></div><p>Just focus on the symbol for our case&hellip; index 3.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">[</span>  <span class="mi">3</span> <span class="p">]</span> <span class="nl">Name</span><span class="p">:</span>                                 <span class="cm">/* No name for symbol */</span>
</span></span><span class="line"><span class="cl">        <span class="nl">Info</span><span class="p">:</span> <span class="mh">0x03</span> <span class="p">(</span><span class="nl">Bind</span><span class="p">:</span> <span class="mh">0x0</span> <span class="o">|</span> <span class="nl">Type</span><span class="p">:</span> <span class="mh">0x3</span><span class="p">)</span>   <span class="cm">/* Bind: STB_LOCAL | Type: STT_SECTION */</span>
</span></span><span class="line"><span class="cl">        <span class="nl">Other</span><span class="p">:</span> <span class="mh">0x0</span>                           <span class="cm">/* default visibility */</span>
</span></span><span class="line"><span class="cl">        <span class="nl">Shndx</span><span class="p">:</span> <span class="mh">0x5</span>                           <span class="cm">/* section 5; .rodata in our case */</span>
</span></span><span class="line"><span class="cl">        <span class="nl">Value</span><span class="p">:</span> <span class="mh">0x000000000000</span>                <span class="cm">/* no value; I wonder what could be the value for &#34;STT_SECTION&#34; type symbol */</span>
</span></span><span class="line"><span class="cl">        <span class="nl">Size</span><span class="p">:</span> <span class="mh">0x0</span>                            <span class="cm">/* Unknown size */</span>
</span></span></code></pre></div><p>Putting all the pieces together, it&rsquo;s crystal clear now that this symbol is casually pointing towards <code>.rodata</code> section. Picture this section as a treasure trove of read-only data. An example? Think of it like a collection of strings that <code>printf</code> and its buddies use to sprinkle some magic onto your screen. It&rsquo;s like the VIP lounge for data that&rsquo;s there to be seen but not messed with.</p>
<p>looking back at our relocation entry, we can now understand it better</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[  0 ] Offset: 0x1a         Info: 0x000300000002 (Sym: 0x3 | Type: 0x2)     Addend: -4
</span></span></code></pre></div><ul>
<li>Apply relocation at offset <code>0x1a</code> in <code>.text</code> section.</li>
<li>Use symbol <code>3</code> for relocation&hellip; that points to <code>.rodata</code> section.</li>
<li>Relocation algorithm will be <code>R_X86_64_PC32</code> (<code>S + A - P</code>)</li>
</ul>
<p>There are many tools like <code>readelf</code> and <code>objdump</code>, that can show you relocation entries with all these things simplified.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ readelf --relocs  --wide calc/main.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Relocation section &#39;.rela.text&#39; at offset 0x3e0 contains 13 entries:
</span></span><span class="line"><span class="cl">    Offset             Info             Type               Symbol&#39;s Value  Symbol&#39;s Name + Addend
</span></span><span class="line"><span class="cl">000000000000001a  0000000300000002 R_X86_64_PC32          0000000000000000 .rodata - 4
</span></span><span class="line"><span class="cl">0000000000000027  0000000500000004 R_X86_64_PLT32         0000000000000000 printf - 4
</span></span><span class="line"><span class="cl">000000000000003d  0000000300000002 R_X86_64_PC32          0000000000000000 .rodata + 15
</span></span><span class="line"><span class="cl">000000000000004a  0000000600000004 R_X86_64_PLT32         0000000000000000 __isoc99_scanf - 4
</span></span><span class="line"><span class="cl">0000000000000087  0000000700000004 R_X86_64_PLT32         0000000000000000 addFunc - 4
</span></span><span class="line"><span class="cl">00000000000000a4  0000000800000004 R_X86_64_PLT32         0000000000000000 subFunc - 4
</span></span><span class="line"><span class="cl">00000000000000c1  0000000900000004 R_X86_64_PLT32         0000000000000000 mulFunc - 4
</span></span><span class="line"><span class="cl">00000000000000de  0000000a00000004 R_X86_64_PLT32         0000000000000000 divFunc - 4
</span></span><span class="line"><span class="cl">00000000000000ee  0000000300000002 R_X86_64_PC32          0000000000000000 .rodata + 1e
</span></span><span class="line"><span class="cl">00000000000000f6  0000000b00000004 R_X86_64_PLT32         0000000000000000 puts - 4
</span></span><span class="line"><span class="cl">0000000000000117  0000000300000002 R_X86_64_PC32          0000000000000000 .rodata + 2f
</span></span><span class="line"><span class="cl">0000000000000124  0000000500000004 R_X86_64_PLT32         0000000000000000 printf - 4
</span></span><span class="line"><span class="cl">000000000000013d  0000000c00000004 R_X86_64_PLT32         0000000000000000 __stack_chk_fail - 4
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ objdump -M intel -dr calc/main.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">calc/main.o:     file format elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0000000000000000 &lt;main&gt;:
</span></span><span class="line"><span class="cl">   0:   55                      push   rbp
</span></span><span class="line"><span class="cl">   1:   48 89 e5                mov    rbp,rsp
</span></span><span class="line"><span class="cl">   4:   48 83 ec 20             sub    rsp,0x20
</span></span><span class="line"><span class="cl">   8:   64 48 8b 04 25 28 00    mov    rax,QWORD PTR fs:0x28
</span></span><span class="line"><span class="cl">   f:   00 00
</span></span><span class="line"><span class="cl">  11:   48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax
</span></span><span class="line"><span class="cl">  15:   31 c0                   xor    eax,eax
</span></span><span class="line"><span class="cl">  17:   48 8d 05 00 00 00 00    lea    rax,[rip+0x0]        # 1e &lt;main+0x1e&gt;
</span></span><span class="line"><span class="cl">                        1a: R_X86_64_PC32       .rodata-0x4
</span></span><span class="line"><span class="cl">  1e:   48 89 c7                mov    rdi,rax
</span></span><span class="line"><span class="cl">  21:   b8 00 00 00 00          mov    eax,0x0
</span></span><span class="line"><span class="cl">  26:   e8 00 00 00 00          call   2b &lt;main+0x2b&gt;
</span></span><span class="line"><span class="cl">                        27: R_X86_64_PLT32      printf-0x4
</span></span><span class="line"><span class="cl">  2b:   48 8d 4d f0             lea    rcx,[rbp-0x10]
</span></span><span class="line"><span class="cl">  2f:   48 8d 55 eb             lea    rdx,[rbp-0x15]
</span></span><span class="line"><span class="cl">  33:   48 8d 45 ec             lea    rax,[rbp-0x14]
</span></span><span class="line"><span class="cl">  37:   48 89 c6                mov    rsi,rax
</span></span><span class="line"><span class="cl">  3a:   48 8d 05 00 00 00 00    lea    rax,[rip+0x0]        # 41 &lt;main+0x41&gt;
</span></span><span class="line"><span class="cl">                        3d: R_X86_64_PC32       .rodata+0x15
</span></span><span class="line"><span class="cl">  41:   48 89 c7                mov    rdi,rax
</span></span><span class="line"><span class="cl">  44:   b8 00 00 00 00          mov    eax,0x0
</span></span><span class="line"><span class="cl">  49:   e8 00 00 00 00          call   4e &lt;main+0x4e&gt;
</span></span><span class="line"><span class="cl">                        4a: R_X86_64_PLT32      __isoc99_scanf-0x4
</span></span><span class="line"><span class="cl">  4e:   0f b6 45 eb             movzx  eax,BYTE PTR [rbp-0x15]
</span></span><span class="line"><span class="cl">  52:   0f be c0                movsx  eax,al
</span></span><span class="line"><span class="cl">  55:   83 f8 2f                cmp    eax,0x2f
</span></span><span class="line"><span class="cl">  58:   74 74                   je     ce &lt;main+0xce&gt;
</span></span><span class="line"><span class="cl">  5a:   83 f8 2f                cmp    eax,0x2f
</span></span><span class="line"><span class="cl">  5d:   0f 8f 88 00 00 00       jg     eb &lt;main+0xeb&gt;
</span></span><span class="line"><span class="cl">  63:   83 f8 2d                cmp    eax,0x2d
</span></span><span class="line"><span class="cl">  66:   74 2c                   je     94 &lt;main+0x94&gt;
</span></span><span class="line"><span class="cl">  68:   83 f8 2d                cmp    eax,0x2d
</span></span><span class="line"><span class="cl">  6b:   7f 7e                   jg     eb &lt;main+0xeb&gt;
</span></span><span class="line"><span class="cl">  6d:   83 f8 2a                cmp    eax,0x2a
</span></span><span class="line"><span class="cl">  70:   74 3f                   je     b1 &lt;main+0xb1&gt;
</span></span><span class="line"><span class="cl">  72:   83 f8 2b                cmp    eax,0x2b
</span></span><span class="line"><span class="cl">  75:   75 74                   jne    eb &lt;main+0xeb&gt;
</span></span><span class="line"><span class="cl">  77:   f3 0f 10 45 f0          movss  xmm0,DWORD PTR [rbp-0x10]
</span></span><span class="line"><span class="cl">  7c:   8b 45 ec                mov    eax,DWORD PTR [rbp-0x14]
</span></span><span class="line"><span class="cl">  7f:   0f 28 c8                movaps xmm1,xmm0
</span></span><span class="line"><span class="cl">  82:   66 0f 6e c0             movd   xmm0,eax
</span></span><span class="line"><span class="cl">  86:   e8 00 00 00 00          call   8b &lt;main+0x8b&gt;
</span></span><span class="line"><span class="cl">                        87: R_X86_64_PLT32      addFunc-0x4
</span></span><span class="line"><span class="cl">  8b:   66 0f 7e c0             movd   eax,xmm0
</span></span><span class="line"><span class="cl">  8f:   89 45 f4                mov    DWORD PTR [rbp-0xc],eax
</span></span><span class="line"><span class="cl">  92:   eb 6d                   jmp    101 &lt;main+0x101&gt;
</span></span><span class="line"><span class="cl">  94:   f3 0f 10 45 f0          movss  xmm0,DWORD PTR [rbp-0x10]
</span></span><span class="line"><span class="cl">  99:   8b 45 ec                mov    eax,DWORD PTR [rbp-0x14]
</span></span><span class="line"><span class="cl">  9c:   0f 28 c8                movaps xmm1,xmm0
</span></span><span class="line"><span class="cl">  9f:   66 0f 6e c0             movd   xmm0,eax
</span></span><span class="line"><span class="cl">  a3:   e8 00 00 00 00          call   a8 &lt;main+0xa8&gt;
</span></span><span class="line"><span class="cl">                        a4: R_X86_64_PLT32      subFunc-0x4
</span></span><span class="line"><span class="cl">  a8:   66 0f 7e c0             movd   eax,xmm0
</span></span><span class="line"><span class="cl">  ac:   89 45 f4                mov    DWORD PTR [rbp-0xc],eax
</span></span><span class="line"><span class="cl">  af:   eb 50                   jmp    101 &lt;main+0x101&gt;
</span></span><span class="line"><span class="cl">  b1:   f3 0f 10 45 f0          movss  xmm0,DWORD PTR [rbp-0x10]
</span></span><span class="line"><span class="cl">  b6:   8b 45 ec                mov    eax,DWORD PTR [rbp-0x14]
</span></span><span class="line"><span class="cl">  b9:   0f 28 c8                movaps xmm1,xmm0
</span></span><span class="line"><span class="cl">  bc:   66 0f 6e c0             movd   xmm0,eax
</span></span><span class="line"><span class="cl">  c0:   e8 00 00 00 00          call   c5 &lt;main+0xc5&gt;
</span></span><span class="line"><span class="cl">                        c1: R_X86_64_PLT32      mulFunc-0x4
</span></span><span class="line"><span class="cl">  c5:   66 0f 7e c0             movd   eax,xmm0
</span></span><span class="line"><span class="cl">  c9:   89 45 f4                mov    DWORD PTR [rbp-0xc],eax
</span></span><span class="line"><span class="cl">  cc:   eb 33                   jmp    101 &lt;main+0x101&gt;
</span></span><span class="line"><span class="cl">  ce:   f3 0f 10 45 f0          movss  xmm0,DWORD PTR [rbp-0x10]
</span></span><span class="line"><span class="cl">  d3:   8b 45 ec                mov    eax,DWORD PTR [rbp-0x14]
</span></span><span class="line"><span class="cl">  d6:   0f 28 c8                movaps xmm1,xmm0
</span></span><span class="line"><span class="cl">  d9:   66 0f 6e c0             movd   xmm0,eax
</span></span><span class="line"><span class="cl">  dd:   e8 00 00 00 00          call   e2 &lt;main+0xe2&gt;
</span></span><span class="line"><span class="cl">                        de: R_X86_64_PLT32      divFunc-0x4
</span></span><span class="line"><span class="cl">  e2:   66 0f 7e c0             movd   eax,xmm0
</span></span><span class="line"><span class="cl">  e6:   89 45 f4                mov    DWORD PTR [rbp-0xc],eax
</span></span><span class="line"><span class="cl">  e9:   eb 16                   jmp    101 &lt;main+0x101&gt;
</span></span><span class="line"><span class="cl">  eb:   48 8d 05 00 00 00 00    lea    rax,[rip+0x0]        # f2 &lt;main+0xf2&gt;
</span></span><span class="line"><span class="cl">                        ee: R_X86_64_PC32       .rodata+0x1e
</span></span><span class="line"><span class="cl">  f2:   48 89 c7                mov    rdi,rax
</span></span><span class="line"><span class="cl">  f5:   e8 00 00 00 00          call   fa &lt;main+0xfa&gt;
</span></span><span class="line"><span class="cl">                        f6: R_X86_64_PLT32      puts-0x4
</span></span><span class="line"><span class="cl">  fa:   b8 01 00 00 00          mov    eax,0x1
</span></span><span class="line"><span class="cl">  ff:   eb 2c                   jmp    12d &lt;main+0x12d&gt;
</span></span><span class="line"><span class="cl"> 101:   66 0f ef d2             pxor   xmm2,xmm2
</span></span><span class="line"><span class="cl"> 105:   f3 0f 5a 55 f4          cvtss2sd xmm2,DWORD PTR [rbp-0xc]
</span></span><span class="line"><span class="cl"> 10a:   66 48 0f 7e d0          movq   rax,xmm2
</span></span><span class="line"><span class="cl"> 10f:   66 48 0f 6e c0          movq   xmm0,rax
</span></span><span class="line"><span class="cl"> 114:   48 8d 05 00 00 00 00    lea    rax,[rip+0x0]        # 11b &lt;main+0x11b&gt;
</span></span><span class="line"><span class="cl">                        117: R_X86_64_PC32      .rodata+0x2f
</span></span><span class="line"><span class="cl"> 11b:   48 89 c7                mov    rdi,rax
</span></span><span class="line"><span class="cl"> 11e:   b8 01 00 00 00          mov    eax,0x1
</span></span><span class="line"><span class="cl"> 123:   e8 00 00 00 00          call   128 &lt;main+0x128&gt;
</span></span><span class="line"><span class="cl">                        124: R_X86_64_PLT32     printf-0x4
</span></span><span class="line"><span class="cl"> 128:   b8 00 00 00 00          mov    eax,0x0
</span></span><span class="line"><span class="cl"> 12d:   48 8b 55 f8             mov    rdx,QWORD PTR [rbp-0x8]
</span></span><span class="line"><span class="cl"> 131:   64 48 2b 14 25 28 00    sub    rdx,QWORD PTR fs:0x28
</span></span><span class="line"><span class="cl"> 138:   00 00
</span></span><span class="line"><span class="cl"> 13a:   74 05                   je     141 &lt;main+0x141&gt;
</span></span><span class="line"><span class="cl"> 13c:   e8 00 00 00 00          call   141 &lt;main+0x141&gt;
</span></span><span class="line"><span class="cl">                        13d: R_X86_64_PLT32     __stack_chk_fail-0x4
</span></span><span class="line"><span class="cl"> 141:   c9                      leave
</span></span><span class="line"><span class="cl"> 142:   c3                      ret
</span></span></code></pre></div><h2 id="conclustion">Conclustion</h2>
<p>Throughout this article, we explored the significance of relocations in ELF binaries, examining how compilers, assemblers, and linkers collaborate to produce executable files. We delved into the role of relocation sections, uncovering their purpose in accommodating changes to addresses and offsets during both compile-time and link-time.</p>
<p>Since symbols and relocations combined are a huge topic in itself, I&rsquo;m adding few links that I think are interesting and will help to better grasp the whole concept in practicality</p>
<ul>
<li>
<p>@xianeizhang&rsquo;s notes (<a href="https://people.cs.pitt.edu/~xianeizhang/notes/Linking.html">https://people.cs.pitt.edu/~xianeizhang/notes/Linking.html</a>)</p>
</li>
<li>
<p>Understanding the ELF specimen (<a href="https://hub.packtpub.com/understanding-elf-specimen/">https://hub.packtpub.com/understanding-elf-specimen/</a>)</p>
</li>
<li>
<p>Cloudflare blogs on &ldquo;How to execute an object file&rdquo; - <a href="https://blog.cloudflare.com/how-to-execute-an-object-file-part-1/">part 1</a> and <a href="https://blog.cloudflare.com/how-to-execute-an-object-file-part-2/">part 2</a></p>
</li>
<li>
<p>An amazing talk by <a href="https://no.linkedin.com/in/anders-schau-knatten-34170619">@Anders Schau Knatten</a> on &ldquo;<a href="https://www.youtube.com/watch?v=iBQo962Sx0g">How symbols work and why we need them</a>&rdquo; (youtube)</p>
</li>
</ul>
<p>See you next time.</p>
<p><img loading="lazy" src="https://media.giphy.com/media/xT1R9F8M2RGQtovtni/giphy.gif#center" alt=""  />
</p>
]]></content:encoded>
    </item>
    <item>
      <title>Elf Chronicles: Symbol Tables (5/?)</title>
      <link>https://ayedaemon.github.io/post/2023/10/elf-chronicles-symbol-tables/</link>
      <pubDate>Sun, 29 Oct 2023 22:15:08 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2023/10/elf-chronicles-symbol-tables/</guid>
      <description>Exploring ELF symbol tables</description>
      <content:encoded><![CDATA[<h2 id="-prologue">&hellip; prologue</h2>
<p>At this point I hope you have a general idea of how a C program goes through multiple stages/passes and finally an ELF file is generated. Below is a diagram to jog your memory on this</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  ┌──────────────────┐
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  │    hello.c       │  // C source
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  └────────┬─────────┘
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │ /* Compile */
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           ▼
</span></span><span class="line"><span class="cl">  ┌──────────────────┐
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  │    hello.s       │  // assembler source
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  └────────┬─────────┘
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │ /* assemble */
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           ▼
</span></span><span class="line"><span class="cl">  ┌──────────────────┐
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  │     hello.o      │  // Assembled program (ELF - relocatable)
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  └────────┬─────────┘
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │ /* link */
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           │
</span></span><span class="line"><span class="cl">           ▼
</span></span><span class="line"><span class="cl">  ┌──────────────────┐
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  │      hello       │  // Executable binary (ELF - executable)
</span></span><span class="line"><span class="cl">  │                  │
</span></span><span class="line"><span class="cl">  └──────────────────┘
</span></span></code></pre></div><p>Creating a simple <em>hello</em> program is very straight-forward, let me show you how this flow works when we are building something that has more than 1 source file. This is generally what most of the &ldquo;real-world&rdquo; projects do, they create multiple files with different functionalities and then merge them together to complete the program with the desired features only.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     ┌────────────────────┐                        ┌─────────────────┐         ┌─────────────────┐
</span></span><span class="line"><span class="cl">     │                    │                        │                 │         │                 │
</span></span><span class="line"><span class="cl">     │   libarithmatic.c  │                        │ libarithmatic.h ├───────► │     main.c      │
</span></span><span class="line"><span class="cl">     │                    │                        │                 │         │                 │
</span></span><span class="line"><span class="cl">     └─────────┬──────────┘                        └─────────────────┘         └────────┬────────┘
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │ /* Compile + assemble */                                               │ /* Compile + assemble */
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               │                                                                        │
</span></span><span class="line"><span class="cl">               ▼                                                                        ▼
</span></span><span class="line"><span class="cl">    ┌─────────────────────┐                                                   ┌────────────────────┐
</span></span><span class="line"><span class="cl">    │                     │                                                   │                    │
</span></span><span class="line"><span class="cl">    │   libarithmatic.o   │                                                   │       main.o       │
</span></span><span class="line"><span class="cl">    │                     │                                                   │                    │
</span></span><span class="line"><span class="cl">    └─────────┬───────────┘                                                   └──────────┬─────────┘
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                                                                          │
</span></span><span class="line"><span class="cl">              │                          /* Linking Magic */                             │
</span></span><span class="line"><span class="cl">              └───────────────────────────────────┬──────────────────────────────────────┘
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  │
</span></span><span class="line"><span class="cl">                                                  ▼
</span></span><span class="line"><span class="cl">                                           ┌────────────────┐
</span></span><span class="line"><span class="cl">                                           │                │
</span></span><span class="line"><span class="cl">                                           │     calc       │
</span></span><span class="line"><span class="cl">                                           │                │
</span></span><span class="line"><span class="cl">                                           └────────────────┘
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">File: libarithmatic.c
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">addFunc</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">subFunc</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">mulFunc</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">divFunc</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mf">0.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">File: libarithmatic.h
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifndef ARITHMATIC_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define ARITHMATIC_H
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">addFunc</span> <span class="p">(</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">subFunc</span> <span class="p">(</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">mulFunc</span> <span class="p">(</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">divFunc</span> <span class="p">(</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="nf">magicFunc</span> <span class="p">(</span><span class="kt">float</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">File: main.c
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;libarithmatic.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">,</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">operator</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Enter equation (9 * 6): &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">scanf</span><span class="p">(</span><span class="s">&#34;%f %c %f&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">operator</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">operator</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="nf">addFunc</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="nf">subFunc</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;*&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="nf">mulFunc</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;/&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="nf">divFunc</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Invalid operator</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Result: %.2f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Luckily gcc provides some features, that helps us to make this process easier.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ gcc --help
</span></span><span class="line"><span class="cl">Usage: gcc [options] file...
</span></span><span class="line"><span class="cl">Options:
</span></span><span class="line"><span class="cl">&lt;... OMITTED ...&gt;
</span></span><span class="line"><span class="cl">  -E                       Preprocess only; do not compile, assemble or link.
</span></span><span class="line"><span class="cl">  -S                       Compile only; do not assemble or link.
</span></span><span class="line"><span class="cl">  -c                       Compile and assemble, but do not link.
</span></span></code></pre></div><p>So if you follow these commands, you’ll be fine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Compile + assemble -&gt; generates main.o
</span></span><span class="line"><span class="cl">gcc -c main.c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Compile + assemble -&gt; generates libarithmatic.o
</span></span><span class="line"><span class="cl">gcc -c libarithmatic.c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Linking -&gt; generates calc
</span></span><span class="line"><span class="cl">gcc main.o libarithmatic.o -o calc
</span></span></code></pre></div><p><img loading="lazy" src="https://media.giphy.com/media/9wG8hpQRkHMoDbCqzu/giphy.gif#center" alt=""  />
</p>
<p>This is our first time so far writing multiple files for a program. So let&rsquo;s take a moment to understand how this works.</p>
<p>First, we create a <code>libarithmatic.c</code> file with all of the required arithmatic functions - <code>addFunc</code>, <code>subFunc</code>, <code>mulFunc</code>, and <code>divFunc</code>. Since this file contains these functions (function definitions), the intermediate object file for this file will have related information as well.</p>
<p>Then comes the <code>main.c</code> file, where we have declared the <code>main</code> function. Inside the main function, we have used arithmatic functions which are not defined in this file. This will give an error at compilation time when those functions will not be found, so as a promise we give a declaration that these functions are present somewhere and they will be found in later steps by linker. Here those definitions are present in <code>libarithmatic.h</code> file &ndash; header file for <code>libarithmatic.c</code>.</p>
<p>So when we are compiling <code>libarithmatic.c</code>, it&rsquo;ll create a <code>libarithmatic.o</code> file which will have 4 arithmatic functions as defined. On the other hand, <code>main.c</code> will generate a <code>main.o</code> file that will have a <code>main</code> function which will be trying to call the arithmatic functions - <code>addFunc</code>, <code>subFunc</code>, <code>mulFunc</code>, and <code>divFunc</code>.</p>
<p><strong>Question</strong> - How did <code>main.o</code> call these functions when the address of these functions is not known to the compiler??</p>
<p><strong>Answer</strong> - Compiler takes <code>main.c</code> and <code>libarithmatic.h</code> (a promise that these will be present when linking), and then generates the <code>main.o</code> with all of the <code>call</code> instructions&hellip; but because of the fact that it does not know the address of the functions to be called these addresses are left blank. These blanks will be filled by linker during <code>relocation</code> process.</p>
<p>Here is a proof that all of them are empty before linking and have all of the addresses fixed up after linking</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## Before linking - main.o
</span></span><span class="line"><span class="cl">❯ objdump -M intel -D -j .text main.o | grep call
</span></span><span class="line"><span class="cl"> 26:        e8 00 00 00 00          call   2b &lt;main+0x2b&gt;
</span></span><span class="line"><span class="cl"> 49:        e8 00 00 00 00          call   4e &lt;main+0x4e&gt;
</span></span><span class="line"><span class="cl"> 86:        e8 00 00 00 00          call   8b &lt;main+0x8b&gt;
</span></span><span class="line"><span class="cl"> a3:        e8 00 00 00 00          call   a8 &lt;main+0xa8&gt;
</span></span><span class="line"><span class="cl"> c0:        e8 00 00 00 00          call   c5 &lt;main+0xc5&gt;
</span></span><span class="line"><span class="cl"> dd:        e8 00 00 00 00          call   e2 &lt;main+0xe2&gt;
</span></span><span class="line"><span class="cl"> f5:        e8 00 00 00 00          call   fa &lt;main+0xfa&gt;
</span></span><span class="line"><span class="cl">123:        e8 00 00 00 00          call   128 &lt;main+0x128&gt;
</span></span><span class="line"><span class="cl">13c:        e8 00 00 00 00          call   141 &lt;main+0x141&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">## After linking - calc
</span></span><span class="line"><span class="cl">❯ objdump -M intel -D -j .text calc | grep call
</span></span><span class="line"><span class="cl">1138:       e8 63 ff ff ff          call   10a0 &lt;_start+0x30&gt;
</span></span><span class="line"><span class="cl">118f:       e8 bc fe ff ff          call   1050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">11b2:       e8 a9 fe ff ff          call   1060 &lt;__isoc99_scanf@plt&gt;
</span></span><span class="line"><span class="cl">11ef:       e8 b8 00 00 00          call   12ac &lt;addFunc&gt;
</span></span><span class="line"><span class="cl">120c:       e8 b5 00 00 00          call   12c6 &lt;subFunc&gt;
</span></span><span class="line"><span class="cl">1229:       e8 b2 00 00 00          call   12e0 &lt;mulFunc&gt;
</span></span><span class="line"><span class="cl">1246:       e8 af 00 00 00          call   12fa &lt;divFunc&gt;
</span></span><span class="line"><span class="cl">125e:       e8 cd fd ff ff          call   1030 &lt;puts@plt&gt;
</span></span><span class="line"><span class="cl">128c:       e8 bf fd ff ff          call   1050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">12a5:       e8 96 fd ff ff          call   1040 &lt;__stack_chk_fail@plt&gt;
</span></span></code></pre></div><h2 id="symbols-and-symbol-tables">Symbols and symbol tables</h2>
<p><strong>Now the question is that how does linker know which blanks to fill and how to fill them??</strong> &hellip;here comes the role of <em>symbols</em> and <em>symbol tables</em>.</p>
<p>When writing a program, we often use &ldquo;names&rdquo; to reference &ldquo;objects&rdquo; in our code, like function &ldquo;names&rdquo; and variable &ldquo;names&rdquo;. These &ldquo;names&rdquo; are commonly referred to as <code>symbols</code>. (<em>yeah, deal with it now!</em>)</p>
<p>Keep in mind that not all &ldquo;names&rdquo; are symbols. For example, a local variables to a function won&rsquo;t be treated as symbols. If you think it through, you don&rsquo;t need linker to handle that data so what&rsquo;s the point of adding that info as a symbol, right?</p>
<p>Another worth noting thing is that unlike string tables, symbol tables have a well-defined structure, and both Glibc and the Linux kernel define a struct for this (<code>Elf64_Sym</code> for 64-bit files).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Glibc
</span></span></span><span class="line"><span class="cl"><span class="cm">https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;hb=2bd00179885928fd95fcabfafc50e7b5c6e660d2#l530
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>    <span class="n">st_name</span><span class="p">;</span>                <span class="cm">/* Symbol name (string tbl index) */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">st_info</span><span class="p">;</span>                <span class="cm">/* Symbol type and binding */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">st_other</span><span class="p">;</span>               <span class="cm">/* Symbol visibility */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Section</span> <span class="n">st_shndx</span><span class="p">;</span>               <span class="cm">/* Section index */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>    <span class="n">st_value</span><span class="p">;</span>               <span class="cm">/* Symbol value */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>   <span class="n">st_size</span><span class="p">;</span>                <span class="cm">/* Symbol size */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Sym</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Linux kernel v6.5.8
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.8/source/include/uapi/linux/elf.h#L197
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">elf64_sym</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>    <span class="n">st_name</span><span class="p">;</span>		<span class="cm">/* Symbol name, index in string tbl */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span>	<span class="n">st_info</span><span class="p">;</span>	    <span class="cm">/* Type and binding attributes */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span>	<span class="n">st_other</span><span class="p">;</span>	    <span class="cm">/* No defined meaning, 0 */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">st_shndx</span><span class="p">;</span>		<span class="cm">/* Associated section index */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>    <span class="n">st_value</span><span class="p">;</span>		<span class="cm">/* Value of the symbol */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Xword</span>   <span class="n">st_size</span><span class="p">;</span>		<span class="cm">/* Associated symbol size */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Sym</span><span class="p">;</span>
</span></span></code></pre></div><p>Let&rsquo;s see what each member of this struct resembles</p>
<h3 id="st_name">st_name</h3>
<p>Similar to other name fields in the ELF specification, this member stores the <strong>index</strong> or <strong>offset</strong> in the associated string table.</p>
<h3 id="st_info">st_info</h3>
<p>This member represents a combined value derived from two different but related attributes: <code>bind</code> and <code>type</code>.</p>
<p>Both, <a href="https://elixir.bootlin.com/linux/v6.5.8/source/include/uapi/linux/elf.h#L136">Linux Kernel</a> and <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;hb=2bd00179885928fd95fcabfafc50e7b5c6e660d2#l572">glibc</a> provide definitions and macros to work with this member.</p>
<h4 id="1-bind">1. Bind</h4>
<p>The &ldquo;bind&rdquo; bits provide information about where this symbol can be seen and used&hellip; There are 3 kinds of binding defined by linux kernel</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.8/source/include/uapi/linux/elf.h#L123
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define STB_LOCAL  0    </span><span class="cm">/* not visible outside the object file */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_GLOBAL 1    </span><span class="cm">/* visible to all object files */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_WEAK   2    </span><span class="cm">/* like globals, but with lower precedence */</span><span class="cp">
</span></span></span></code></pre></div><p>But glibc adds few more to this list</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;hb=2bd00179885928fd95fcabfafc50e7b5c6e660d2#l582
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define STB_LOCAL       0               </span><span class="cm">/* Local symbol */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_GLOBAL      1               </span><span class="cm">/* Global symbol */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_WEAK        2               </span><span class="cm">/* Weak symbol */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_NUM         3               </span><span class="cm">/* Number of defined types.  */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_LOOS        10              </span><span class="cm">/* Start of OS-specific */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_GNU_UNIQUE  10              </span><span class="cm">/* Unique symbol.  */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_HIOS        12              </span><span class="cm">/* End of OS-specific */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_LOPROC      13              </span><span class="cm">/* Start of processor-specific */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STB_HIPROC      15              </span><span class="cm">/* End of processor-specific */</span><span class="cp">
</span></span></span></code></pre></div><p>Kernel and glibc both provide a macro to extract the <code>bind</code> value from the provided <code>st_info</code> member - <code>#define ELF_ST_BIND(x)	((x) &gt;&gt; 4)</code></p>
<h4 id="2-type">2. Type</h4>
<p><code>type</code> bits tells about the type of symbol - function, file, variable, etc. One could say &ndash; A general classification for the symbol.</p>
<p>Linux kernel defines total 7 types</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.8/source/include/uapi/linux/elf.h#L128
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define STT_NOTYPE  0   </span><span class="cm">/* Unspecified */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_OBJECT  1   </span><span class="cm">/* data objects like variables, arrays, etc*/</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_FUNC    2   </span><span class="cm">/* functions or other executable codes*/</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_SECTION 3   </span><span class="cm">/* associated with a section;
</span></span></span><span class="line"><span class="cl"><span class="cm">                           mainly used for relocations
</span></span></span><span class="line"><span class="cl"><span class="cm">                           (we&#39;ll see relocations in later articles)*/</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_FILE    4   </span><span class="cm">/* name of the source file*/</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_COMMON  5   </span><span class="cm">/* just like STT_OBJECT, but for tentative values */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_TLS     6   </span><span class="cm">/* stores thread local data which is unique to each thread */</span><span class="cp">
</span></span></span></code></pre></div><p>And again our beloved glibc expanded these definitions</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h;hb=2bd00179885928fd95fcabfafc50e7b5c6e660d2#l595
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define STT_NOTYPE      0               </span><span class="cm">/* Symbol type is unspecified */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_OBJECT      1               </span><span class="cm">/* Symbol is a data object */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_FUNC        2               </span><span class="cm">/* Symbol is a code object */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_SECTION     3               </span><span class="cm">/* Symbol associated with a section */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_FILE        4               </span><span class="cm">/* Symbol&#39;s name is file name */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_COMMON      5               </span><span class="cm">/* Symbol is a common data object */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_TLS         6               </span><span class="cm">/* Symbol is thread-local data object*/</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_NUM         7               </span><span class="cm">/* Number of defined types.  */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_LOOS        10              </span><span class="cm">/* Start of OS-specific */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_GNU_IFUNC   10              </span><span class="cm">/* Symbol is indirect code object */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_HIOS        12              </span><span class="cm">/* End of OS-specific */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_LOPROC      13              </span><span class="cm">/* Start of processor-specific */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define STT_HIPROC      15              </span><span class="cm">/* End of processor-specific */</span><span class="cp">
</span></span></span></code></pre></div><p>Kernel and glibc both provide a macro to extract the <code>type</code> value from the provided <code>st_info</code> member - <code>#define ELF_ST_TYPE(x)    ((x) &amp; 0xf)</code></p>
<h3 id="st_other">st_other</h3>
<p>If you examine the <code>Elf64_Sym</code> struct in both the kernel and Glibc <em>source code</em>, you&rsquo;ll notice that the kernel doesn&rsquo;t currently have any use case for this field and marks it as such. However, Glibc uses this field to track the visibility of the symbol.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">/*</span>
</span></span><span class="line"><span class="cl"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">sourceware</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">git</span><span class="o">/</span><span class="err">?</span><span class="n">p</span><span class="o">=</span><span class="n">glibc</span><span class="o">.</span><span class="n">git</span><span class="p">;</span><span class="n">a</span><span class="o">=</span><span class="n">blob</span><span class="p">;</span><span class="n">f</span><span class="o">=</span><span class="n">elf</span><span class="o">/</span><span class="n">elf</span><span class="o">.</span><span class="n">h</span><span class="p">;</span><span class="n">hb</span><span class="o">=</span><span class="mi">2</span><span class="n">bd00179885928fd95fcabfafc50e7b5c6e660d2</span><span class="c1">#l626</span>
</span></span><span class="line"><span class="cl"><span class="o">*/</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define STV_DEFAULT     0               /* Default symbol visibility rules - as specified by symbol binding*/</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define STV_INTERNAL    1               /* Processor specific hidden class */</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define STV_HIDDEN      2               /* Sym unavailable in other modules */</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define STV_PROTECTED   3               /* Not preemptible, not exported */</span>
</span></span></code></pre></div><p>From what I understand, <strong>symbol visibility</strong> (<em>yup, this is what glibc calls <code>st_other</code></em>) extends the concept of <strong>symbol binding</strong> and provides more control over symbol access.</p>
<p>You can read more about this member from <a href="https://developer.ibm.com/articles/au-aix-symbol-visibility/">here</a> <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and <a href="https://unix.stackexchange.com/questions/472660/what-are-difference-between-the-elf-symbol-visibility-levels">here</a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h3 id="st_shndx">st_shndx</h3>
<p>This attribute indicates the section associated with this symbol. It holds the section index corresponding to the sections in the section header.</p>
<h3 id="st_value">st_value</h3>
<p>Indeed, each symbol should have both a name and an associated value. This member holds the value associated with the respective symbol.</p>
<h3 id="st_size">st_size</h3>
<p>Many symbols come with associated sizes, for function type symbols this will be the size of that function. If a symbol doesn&rsquo;t have a size or its size is unknown, this member holds a value of zero.</p>
<h2 id="analysis">Analysis</h2>
<p>Now that we have a foundational understanding, we can apply this knowledge to analyze our previous files.</p>
<h3 id="1-libarithmatico">1. <code>libarithmatic.o</code></h3>
<p>To keep things straightforward, I&rsquo;ll begin by listing all the sections in the <code>libarithmatic.o</code> file. (<em>This is the output from my parser, you can use hexdumps or any other parser of your choice&hellip;</em>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 00 ] Section Name:                            Type: 0x0       Flags: 0x0      Addr: 0x0       Offset: 0x0             Size: 0         Link: 0         Info: 0x0       Addralign: 0x0          Entsize: 0
</span></span><span class="line"><span class="cl">[ 01 ] Section Name: .text                      Type: 0x1       Flags: 0x6      Addr: 0x0       Offset: 0x40            Size: 130       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 02 ] Section Name: .data                      Type: 0x1       Flags: 0x3      Addr: 0x0       Offset: 0xc2            Size: 0         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 03 ] Section Name: .bss                       Type: 0x8       Flags: 0x3      Addr: 0x0       Offset: 0xc2            Size: 0         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 04 ] Section Name: .comment                   Type: 0x1       Flags: 0x30     Addr: 0x0       Offset: 0xc2            Size: 28        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 1
</span></span><span class="line"><span class="cl">[ 05 ] Section Name: .note.GNU-stack            Type: 0x1       Flags: 0x0      Addr: 0x0       Offset: 0xde            Size: 0         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 06 ] Section Name: .note.gnu.property         Type: 0x7       Flags: 0x2      Addr: 0x0       Offset: 0xe0            Size: 48        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl">[ 07 ] Section Name: .eh_frame                  Type: 0x1       Flags: 0x2      Addr: 0x0       Offset: 0x110           Size: 152       Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl">[ 08 ] Section Name: .rela.eh_frame             Type: 0x4       Flags: 0x40     Addr: 0x0       Offset: 0x288           Size: 96        Link: 9         Info: 0x7       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">[ 09 ] Section Name: .symtab                    Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x1a8           Size: 168       Link: 10        Info: 0x3       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">[ 10 ] Section Name: .strtab                    Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x250           Size: 49        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 11 ] Section Name: .shstrtab                  Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x2e8           Size: 103       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span></code></pre></div><p>Now we can easily filter out the symbol table from this (<code>Type: 0x2</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 09 ] Section Name: .symtab     Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x1a8           Size: 168       Link: 10        Info: 0x3       Addralign: 0x8          Entsize: 24
</span></span></code></pre></div><p>If you go back and revisit the article about section headers and check the explaination about members, you&rsquo;ll be able to conclude this &ndash; <code>.symtab</code> section is linked to <code>.strtab</code> section. So the offset values from <code>st_name</code> of symbol table can be resolved to proper strings using this string table.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           ┌─────────────────────────────────┐
</span></span><span class="line"><span class="cl">           │                                 │
</span></span><span class="line"><span class="cl">           │ [ 09 ] Section Name: .symtab    │
</span></span><span class="line"><span class="cl">           │           Type: 0x2             │
</span></span><span class="line"><span class="cl">           │           Flags: 0x0            │
</span></span><span class="line"><span class="cl">           │           Addr: 0x0             │
</span></span><span class="line"><span class="cl">           │           Offset: 0x1a8         │
</span></span><span class="line"><span class="cl">           │           Size: 168             │
</span></span><span class="line"><span class="cl">      ┌────┼────────── Link: 10              │
</span></span><span class="line"><span class="cl">      │    │           Info: 0x3             │
</span></span><span class="line"><span class="cl">      │    │           Addralign: 0x8        │
</span></span><span class="line"><span class="cl">      │    │           Entsize: 24           │
</span></span><span class="line"><span class="cl">      │    │                                 │
</span></span><span class="line"><span class="cl">      │    │                                 │
</span></span><span class="line"><span class="cl">      │    └─────────────────────────────────┘
</span></span><span class="line"><span class="cl">      │
</span></span><span class="line"><span class="cl">      │
</span></span><span class="line"><span class="cl">      │
</span></span><span class="line"><span class="cl">      │
</span></span><span class="line"><span class="cl">      │    ┌─────────────────────────────────┐
</span></span><span class="line"><span class="cl">      │    │                                 │
</span></span><span class="line"><span class="cl">      └────┤► [ 10 ] Section Name: .strtab   │
</span></span><span class="line"><span class="cl">           │            Type: 0x3            │
</span></span><span class="line"><span class="cl">           │            Flags: 0x0           │
</span></span><span class="line"><span class="cl">           │            Addr: 0x0            │
</span></span><span class="line"><span class="cl">           │            Offset: 0x250        │
</span></span><span class="line"><span class="cl">           │            Size: 49             │
</span></span><span class="line"><span class="cl">           │            Link: 0              │
</span></span><span class="line"><span class="cl">           │            Info: 0x0            │
</span></span><span class="line"><span class="cl">           │            Addralign: 0x1       │
</span></span><span class="line"><span class="cl">           │            Entsize: 0           │
</span></span><span class="line"><span class="cl">           │                                 │
</span></span><span class="line"><span class="cl">           │                                 │
</span></span><span class="line"><span class="cl">           └─────────────────────────────────┘
</span></span></code></pre></div><p>Now we can begin with the interesting stuff and the first step will be to pull out the <code>.symtab</code> section and parse it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">############ Explaination #################
</span></span><span class="line"><span class="cl">#
</span></span><span class="line"><span class="cl"># xxd
</span></span><span class="line"><span class="cl">#   -s 0x1a8            # start point (Offset: 0x1a8)
</span></span><span class="line"><span class="cl">#   -l 168              # total length (Size: 168)
</span></span><span class="line"><span class="cl">#   -c 24               # bytes per line (Entsize: 24) - I wanted to get each entry in a single line for uniformity
</span></span><span class="line"><span class="cl">#   libarithmatic.o     # filename
</span></span><span class="line"><span class="cl">#   | nl -v0            # line numbers starting from 0
</span></span><span class="line"><span class="cl">#
</span></span><span class="line"><span class="cl">#############################################
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ xxd -s 0x1a8 -l 168 -c 24 libarithmatic.o | nl -v0
</span></span><span class="line"><span class="cl">    0  000001a8: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000  ........................
</span></span><span class="line"><span class="cl">    1  000001c0: 0100 0000 0400 f1ff 0000 0000 0000 0000 0000 0000 0000 0000  ........................
</span></span><span class="line"><span class="cl">    2  000001d8: 0000 0000 0300 0100 0000 0000 0000 0000 0000 0000 0000 0000  ........................
</span></span><span class="line"><span class="cl">    3  000001f0: 1100 0000 1200 0100 0000 0000 0000 0000 1a00 0000 0000 0000  ........................
</span></span><span class="line"><span class="cl">    4  00000208: 1900 0000 1200 0100 1a00 0000 0000 0000 1a00 0000 0000 0000  ........................
</span></span><span class="line"><span class="cl">    5  00000220: 2100 0000 1200 0100 3400 0000 0000 0000 1a00 0000 0000 0000  !.......4...............
</span></span><span class="line"><span class="cl">    6  00000238: 2900 0000 1200 0100 4e00 0000 0000 0000 3400 0000 0000 0000  ).......N.......4.......
</span></span></code></pre></div><p>If we parse this data using the struct <code>Elf64_Sym</code>, we&rsquo;ll get something like this</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                             typedef struct {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  +------------------------------Elf64_Word    st_name;
</span></span><span class="line"><span class="cl">  |
</span></span><span class="line"><span class="cl">  |        +---------------------unsigned char st_info;
</span></span><span class="line"><span class="cl">  |        |
</span></span><span class="line"><span class="cl">  |        |     +---------------unsigned char st_other;
</span></span><span class="line"><span class="cl">  |        |     |
</span></span><span class="line"><span class="cl">  |        |     |    +----------Elf64_Section st_shndx;
</span></span><span class="line"><span class="cl">  |        |     |    |
</span></span><span class="line"><span class="cl">  |        |     |    |          Elf64_Addr    st_value;----+
</span></span><span class="line"><span class="cl">  |        |     |    |                                     |
</span></span><span class="line"><span class="cl">  |        |     |    |          Elf64_Xword   st_size;-----+-----------------+
</span></span><span class="line"><span class="cl">  |        |     |    |                                     |                 |
</span></span><span class="line"><span class="cl">  |        |     |    |      } Elf64_Sym;                   |                 |
</span></span><span class="line"><span class="cl">  |        |     |    |                                     |                 |
</span></span><span class="line"><span class="cl">  |        |     |    |                                     |                 |
</span></span><span class="line"><span class="cl">  |        |     |    +-------------------+                 |                 |
</span></span><span class="line"><span class="cl">  |        |     |                        |                 |                 |
</span></span><span class="line"><span class="cl">  |        |     +------------------+     |                 |                 |
</span></span><span class="line"><span class="cl">  |        |                        |     |                 |                 |
</span></span><span class="line"><span class="cl">  |        +-------------------+    |     |                 |                 |
</span></span><span class="line"><span class="cl">  |                            |    |     |                 |                 |
</span></span><span class="line"><span class="cl">  +-------------------+        |    |     |                 |                 |
</span></span><span class="line"><span class="cl">                      |        |    |     |                 |                 |
</span></span><span class="line"><span class="cl">                      v        v    v     v                 v                 v
</span></span><span class="line"><span class="cl">Index |  Offset  |
</span></span><span class="line"><span class="cl">    0 | 000001a8:| 0000 0000 | 00 | 00 | 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000 |
</span></span><span class="line"><span class="cl">    1 | 000001c0:| 0100 0000 | 04 | 00 | f1ff | 0000 0000 0000 0000 | 0000 0000 0000 0000 |
</span></span><span class="line"><span class="cl">    2 | 000001d8:| 0000 0000 | 03 | 00 | 0100 | 0000 0000 0000 0000 | 0000 0000 0000 0000 |
</span></span><span class="line"><span class="cl">    3 | 000001f0:| 1100 0000 | 12 | 00 | 0100 | 0000 0000 0000 0000 | 1a00 0000 0000 0000 |
</span></span><span class="line"><span class="cl">    4 | 00000208:| 1900 0000 | 12 | 00 | 0100 | 1a00 0000 0000 0000 | 1a00 0000 0000 0000 |
</span></span><span class="line"><span class="cl">    5 | 00000220:| 2100 0000 | 12 | 00 | 0100 | 3400 0000 0000 0000 | 1a00 0000 0000 0000 |
</span></span><span class="line"><span class="cl">    6 | 00000238:| 2900 0000 | 12 | 00 | 0100 | 4e00 0000 0000 0000 | 3400 0000 0000 0000 |
</span></span></code></pre></div><p>From my parser, I got this result</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[  0 ] Name:                   Info: 0x00 (Bind: 0x0 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">[  1 ] Name: libarithmatic.c   Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">[  2 ] Name:                   Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">[  3 ] Name: addFunc           Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x1a
</span></span><span class="line"><span class="cl">[  4 ] Name: subFunc           Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x00000000001a   Size: 0x1a
</span></span><span class="line"><span class="cl">[  5 ] Name: mulFunc           Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x000000000034   Size: 0x1a
</span></span><span class="line"><span class="cl">[  6 ] Name: divFunc           Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x00000000004e   Size: 0x34
</span></span></code></pre></div><p><img loading="lazy" src="https://media.giphy.com/media/S5tVD09nBR2nJWJMen/giphy.gif#center" alt=""  />
</p>
<p>For the sake of simplicity and the scope of this article, I&rsquo;ll focus on discussing the four functions in this table and leave the rest for you to explore and learn.</p>
<p>We can observe that the <code>st_info</code> value for all of these symbols is the same, which implies that their &ldquo;<strong>bind</strong>&rdquo; and &ldquo;<strong>type</strong>&rdquo; values are identical (<em>duhh</em>). According to the information we&rsquo;ve gathered, these symbols are <code>GLOBAL</code> (bind=0x1) and of <code>FUNC</code> (type=0x2) type. This indicates that these symbols are basically global functions and can be called from other files as well.</p>
<p>It&rsquo;s worth noting that there&rsquo;s a very cool tool called <a href="https://github.com/elfmaster/ftrace/">&quot;<strong>ftrace</strong>&quot; by elfmaster</a>, which utilizes <a href="https://github.com/elfmaster/ftrace/blob/master/ftrace.c#L441">this information</a> to trace function calls, specifically focusing on function calls and not other symbols.</p>
<p>Furthermore, the <code>st_other</code> field is empty for these members, indicating <code>default</code> symbol visibility. There&rsquo;s nothing noteworthy to discuss here.</p>
<p>So we move on to the <code>sh_shndx</code> (section index) member. This member tells us that all of these symbols are associated with section <code>0x1</code> (which is <code>.text</code>, and that does make sense &ndash; Code of these functions should be in <code>.text</code> section only).</p>
<p>The <code>st_value</code> field indicates the offset within the <code>.text</code> section at which these functions begin. So, if you start executing instructions from offset <code>0x34</code> in the <code>.text</code> section, you&rsquo;ll be running the <code>mulFunc</code> function. <em>Makes sense??</em></p>
<p>The linker will perform <code>relocation</code> on the object files and generate a final executable binary that will have all the values in correct places. At that point we won&rsquo;t need the <code>mulFunc</code> string in our ELF file.</p>
<p>Last but not least, the <code>st_size</code> field provides the size of the function. This helps the magical entity reading the code determine when to stop and understand the boundaries of the function.</p>
<h3 id="2-maino">2. <code>main.o</code></h3>
<p>Performing the same initial process for the <code>main.o</code> file, you will be able yield its symbol table, as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> [ 11 ] Section Name: .symtab       Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x248           Size: 312       Link: 12        Info: 0x4       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">     [  0 ] Name:                    Info: 0x00 (Bind: 0x0 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  1 ] Name: main.c             Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  2 ] Name:                    Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  3 ] Name:                    Info: 0x03 (Bind: 0x0 | Type: 0x3)      Other: 0x0      Shndx: 0x5      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  4 ] Name: main               Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x1      Value: 0x000000000000   Size: 0x143
</span></span><span class="line"><span class="cl">     [  5 ] Name: printf             Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  6 ] Name: __isoc99_scanf     Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  7 ] Name: addFunc            Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  8 ] Name: subFunc            Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  9 ] Name: mulFunc            Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 10 ] Name: divFunc            Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 11 ] Name: puts               Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 12 ] Name: __stack_chk_fail   Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span></code></pre></div><p>In this case, things get a bit more interesting. Let&rsquo;s begin with the same set of symbols: <code>addFunc</code>, <code>subFunc</code>, <code>mulFunc</code>, and <code>divFunc</code>.</p>
<p>You&rsquo;ll notice that these symbols are global, but they don&rsquo;t have any associated types. This is expected since the symbols are not defined in this file; they are just being called. At this stage, we&rsquo;re not certain if there&rsquo;s anything like these symbols elsewhere, which is why all the other members are zeroed out (undefined). This essentially instructs the <em>magical</em> linker to locate the values of these symbols (linkers are pretty good at this; they will give errors if the symbols aren&rsquo;t found).</p>
<p>Now, you&rsquo;ll also notice the presence of <code>printf</code> and <code>puts</code> symbols. This may raise a question: &ldquo;<strong>I didn&rsquo;t use puts in my code, so why is it there?</strong>&rdquo;</p>
<p>Answer: It&rsquo;s compiler magic! The compiler observed that the line <code>printf(&quot;Enter equation (9 * 6): &quot;);</code> could be expressed as <code>puts(&quot;Enter equation (9 * 6): &quot;);</code>, so it made this conversion during compilation. To confirm this, you can generate the compiled code using <code>gcc -S</code> and check the <code>call</code> to <code>puts</code> function.</p>
<p>Now, let&rsquo;s examine our mighty <code>main</code> symbol. The <code>st_info</code> indicates that it&rsquo;s a <code>GLOBAL</code> <code>function</code> (with <code>bind=0x1</code> and <code>type=0x2</code>). This function is located in the 1st section (<code>sh_shndx: 0x1</code>) of <code>main.o</code>, which in our case is the <code>.text</code> section. The function begins at offset <code>0x0</code>, and its size is <code>0x143</code>. <em>Pretty simple, right?</em></p>
<p>(Note: I&rsquo;m leaving <code>__isoc99_scanf</code> and <code>__stack_chk_fail</code> for you. Google them!)</p>
<h3 id="3-calc">3. <code>calc</code></h3>
<p>This represents the ultimate outcome of the entire compilation, assembly, and linking process &ndash; the final ELF executable binary. However, the process to obtain its <strong>symbol table</strong> remains same.</p>
<p>Here is the <code>symtab</code> for this ELF binary</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 27 ] Section Name: .symtab       Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x3050          Size: 768       Link: 28        Info: 0x7       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl">     [  0 ] Name:                                 Info: 0x00 (Bind: 0x0 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  1 ] Name: main.c                          Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  2 ] Name: libarithmatic.c                 Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  3 ] Name:                                 Info: 0x04 (Bind: 0x0 | Type: 0x4)      Other: 0x0      Shndx: 0xfff1   Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  4 ] Name: _DYNAMIC                        Info: 0x01 (Bind: 0x0 | Type: 0x1)      Other: 0x0      Shndx: 0x15     Value: 0x000000003de0   Size: 0x0
</span></span><span class="line"><span class="cl">     [  5 ] Name: __GNU_EH_FRAME_HDR              Info: 0x00 (Bind: 0x0 | Type: 0x0)      Other: 0x0      Shndx: 0x11     Value: 0x000000002048   Size: 0x0
</span></span><span class="line"><span class="cl">     [  6 ] Name: _GLOBAL_OFFSET_TABLE_           Info: 0x01 (Bind: 0x0 | Type: 0x1)      Other: 0x0      Shndx: 0x17     Value: 0x000000003fe8   Size: 0x0
</span></span><span class="line"><span class="cl">     [  7 ] Name: __libc_start_main@GLIBC_2.34    Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  8 ] Name: _ITM_deregisterTMCloneTable     Info: 0x32 (Bind: 0x2 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [  9 ] Name: data_start                      Info: 0x32 (Bind: 0x2 | Type: 0x0)      Other: 0x0      Shndx: 0x18     Value: 0x000000004020   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 10 ] Name: subFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012c6   Size: 0x1a
</span></span><span class="line"><span class="cl">     [ 11 ] Name: puts@GLIBC_2.2.5                Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 12 ] Name: _edata                          Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x18     Value: 0x000000004030   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 13 ] Name: _fini                           Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x2      Shndx: 0xf      Value: 0x000000001330   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 14 ] Name: __stack_chk_fail@GLIBC_2.4      Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 15 ] Name: printf@GLIBC_2.2.5              Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 16 ] Name: addFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012ac   Size: 0x1a
</span></span><span class="line"><span class="cl">     [ 17 ] Name: __data_start                    Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x18     Value: 0x000000004020   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 18 ] Name: __gmon_start__                  Info: 0x32 (Bind: 0x2 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 19 ] Name: __dso_handle                    Info: 0x17 (Bind: 0x1 | Type: 0x1)      Other: 0x2      Shndx: 0x18     Value: 0x000000004028   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 20 ] Name: _IO_stdin_used                  Info: 0x17 (Bind: 0x1 | Type: 0x1)      Other: 0x0      Shndx: 0x10     Value: 0x000000002000   Size: 0x4
</span></span><span class="line"><span class="cl">     [ 21 ] Name: divFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012fa   Size: 0x34
</span></span><span class="line"><span class="cl">     [ 22 ] Name: _end                            Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x19     Value: 0x000000004038   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 23 ] Name: _start                          Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x000000001070   Size: 0x26
</span></span><span class="line"><span class="cl">     [ 24 ] Name: __bss_start                     Info: 0x16 (Bind: 0x1 | Type: 0x0)      Other: 0x0      Shndx: 0x19     Value: 0x000000004030   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 25 ] Name: mulFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012e0   Size: 0x1a
</span></span><span class="line"><span class="cl">     [ 26 ] Name: main                            Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x000000001169   Size: 0x143
</span></span><span class="line"><span class="cl">     [ 27 ] Name: __isoc99_scanf@GLIBC_2.7        Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 28 ] Name: __TMC_END__                     Info: 0x17 (Bind: 0x1 | Type: 0x1)      Other: 0x2      Shndx: 0x18     Value: 0x000000004030   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 29 ] Name: _ITM_registerTMCloneTable       Info: 0x32 (Bind: 0x2 | Type: 0x0)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 30 ] Name: __cxa_finalize@GLIBC_2.2.5      Info: 0x34 (Bind: 0x2 | Type: 0x2)      Other: 0x0      Shndx: 0x0      Value: 0x000000000000   Size: 0x0
</span></span><span class="line"><span class="cl">     [ 31 ] Name: _init                           Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x2      Shndx: 0xc      Value: 0x000000001000   Size: 0x0
</span></span></code></pre></div><p>The linking process did introduce numerous symbols that exceed the combined count of symbols in both individual object files. To keep things simple (* <em>once again</em> *), we won&rsquo;t dive into the specifics of what these additional symbols do, and we can think of them as a result of linker magic.</p>
<p>Our primary focus for now remains on the symbols and their properties, even if we don&rsquo;t have detailed knowledge of their functions.</p>
<p><img loading="lazy" src="https://media.giphy.com/media/94OJTU1036zxU3OBhD/giphy.gif#center" alt=""  />
</p>
<p>These are the symbols we defined ourselves&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 10 ] Name: subFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012c6   Size: 0x1a
</span></span><span class="line"><span class="cl">[ 16 ] Name: addFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012ac   Size: 0x1a
</span></span><span class="line"><span class="cl">[ 21 ] Name: divFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012fa   Size: 0x34
</span></span><span class="line"><span class="cl">[ 25 ] Name: mulFunc                         Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x0000000012e0   Size: 0x1a
</span></span><span class="line"><span class="cl">[ 26 ] Name: main                            Info: 0x18 (Bind: 0x1 | Type: 0x2)      Other: 0x0      Shndx: 0xe      Value: 0x000000001169   Size: 0x143
</span></span></code></pre></div><p>We can observe the similarities in various members between <code>libarithmatic.o</code> and <code>main.o</code>. The notable difference I can identify is the <code>sh_shndx</code> value, which has changed but still points to the <code>.text</code> section of <code>calc</code> file. The important point is that it should reference the <code>.text</code> section, regardless of the section index value.</p>
<p>Another difference is in the <code>st_value</code>. With the addition of numerous new symbols in this file, the positions of these symbols have shifted. Initially, we had the <code>main</code> function in <code>main.o</code> and <code>addFunc</code> in <code>libarithmatic.o</code>, both at offset <code>0x0</code>. However, when combining them into a single file, one of them had to adjust its offset to make room for the other. This is precisely what occurred here, and there are also other symbols (of function type) that occupied the initial offsets, causing our defined functions to compromise on their offsets.</p>
<p>One more intriguing detail is the <code>_start</code> symbol, which has an offset of <code>0x000000001070</code>. This offset serves as the <strong>entry point</strong> of our ELF executable binary. You can verify this using <code>readelf</code> or any method you prefer. If you happen to overwrite the <code>entrypoint</code> value in <code>ELF file headers</code>, you&rsquo;ll be calling some other function instead of <code>_start</code> function of <code>glibc</code>. Since <code>_start</code> function performs some startup actions for C runtime environment, so the modified binary may or may not work as intended.</p>
<p>I&rsquo;m sure that&rsquo;s enough for today, ta-ta!</p>
<p><img loading="lazy" src="https://media.giphy.com/media/mP8GermRyOFWV8PQeq/giphy.gif#center" alt=""  />
</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://developer.ibm.com/articles/au-aix-symbol-visibility/">https://developer.ibm.com/articles/au-aix-symbol-visibility/</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://unix.stackexchange.com/questions/472660/what-are-difference-between-the-elf-symbol-visibility-levels">https://unix.stackexchange.com/questions/472660/what-are-difference-between-the-elf-symbol-visibility-levels</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Elf Chronicles: String Tables (4/?)</title>
      <link>https://ayedaemon.github.io/post/2023/10/elf-chronicles-string-tables/</link>
      <pubDate>Sun, 29 Oct 2023 15:12:36 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2023/10/elf-chronicles-string-tables/</guid>
      <description>Exploring ELF string tables</description>
      <content:encoded><![CDATA[<p>In the article about <a href="https://ayedaemon.github.io/post/2023/10/elf-chronicles-section-headers">section headers</a>, you got <a href="https://ayedaemon.github.io/post/2023/10/elf-chronicles-section-headers/#1-sh_name">an introduction to string tables</a>. In this article, we will delve deeper into the topic.</p>
<h2 id="prologue">&hellip;prologue</h2>
<p>We&rsquo;ll start with the same program we used in the previous article about section headers.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* file: hello_world.c */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A macro
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define HELLO_MSG1 &#34;Hello World1&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A global variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span> <span class="n">HELLO_MSG2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World2&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// main function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// local variable for main
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">HELLO_MSG3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World3&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Print messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Compile this and then analyze the ELF executable file using <code>readelf</code> (Not everytime we&rsquo;ll go with <code>xxd</code>).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ readelf --file-header --wide hello_world
</span></span><span class="line"><span class="cl">ELF Header:
</span></span><span class="line"><span class="cl">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">  Class:                             ELF64
</span></span><span class="line"><span class="cl">  Data:                              2&#39;s complement, little endian
</span></span><span class="line"><span class="cl">  Version:                           1 (current)
</span></span><span class="line"><span class="cl">  OS/ABI:                            UNIX - System V
</span></span><span class="line"><span class="cl">  ABI Version:                       0
</span></span><span class="line"><span class="cl">  Type:                              DYN (Position-Independent Executable file)
</span></span><span class="line"><span class="cl">  Machine:                           Advanced Micro Devices X86-64
</span></span><span class="line"><span class="cl">  Version:                           0x1
</span></span><span class="line"><span class="cl">  Entry point address:               0x1050
</span></span><span class="line"><span class="cl">  Start of program headers:          64 (bytes into file)
</span></span><span class="line"><span class="cl">  Start of section headers:          13608 (bytes into file)
</span></span><span class="line"><span class="cl">  Flags:                             0x0
</span></span><span class="line"><span class="cl">  Size of this header:               64 (bytes)
</span></span><span class="line"><span class="cl">  Size of program headers:           56 (bytes)
</span></span><span class="line"><span class="cl">  Number of program headers:         13
</span></span><span class="line"><span class="cl">  Size of section headers:           64 (bytes)
</span></span><span class="line"><span class="cl">  Number of section headers:         30
</span></span><span class="line"><span class="cl">  Section header string table index: 29
</span></span></code></pre></div><p>With the help of this, you can get the <code>section header table</code> of the file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#################### Explaination ###########################
</span></span><span class="line"><span class="cl">#
</span></span><span class="line"><span class="cl"># xxd \
</span></span><span class="line"><span class="cl">#   -s &lt;start_of_section_headers&gt; \               # Start of section headers:   13608 (bytes into file)
</span></span><span class="line"><span class="cl">#   -l &lt;total_size_of_all_section_headers&gt; \      # size_of_one_section_header(64) * total_count_of_section_headers(30)
</span></span><span class="line"><span class="cl">#   -c &lt;bytes_to_print_in_a_single_line&gt;   \      # Just to get a section header entry in a single line
</span></span><span class="line"><span class="cl">#   &lt;ELF_file&gt; \                                  #  ... duhh!
</span></span><span class="line"><span class="cl">#   | nl -v0 -                                    # I wanted to get the line numbers starting from 0. WHY 0?? - because that&#39;s where the array indexing starts
</span></span><span class="line"><span class="cl">#############################################################
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ xxd \
</span></span><span class="line"><span class="cl">    -s 13608 \
</span></span><span class="line"><span class="cl">    -l $(( 64*30 )) \
</span></span><span class="line"><span class="cl">    -c 64 \
</span></span><span class="line"><span class="cl">    hello_world \
</span></span><span class="line"><span class="cl">    | nl -v0 -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 0  00003528: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl"> 1  00003568: 1b00 0000 0100 0000 0200 0000 0000 0000 1803 0000 0000 0000 1803 0000 0000 0000 1c00 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl"> 2  000035a8: 2300 0000 0700 0000 0200 0000 0000 0000 3803 0000 0000 0000 3803 0000 0000 0000 4000 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  #...............8.......8.......@...............................
</span></span><span class="line"><span class="cl"> 3  000035e8: 3600 0000 0700 0000 0200 0000 0000 0000 7803 0000 0000 0000 7803 0000 0000 0000 2400 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  6...............x.......x.......$...............................
</span></span><span class="line"><span class="cl"> 4  00003628: 4900 0000 0700 0000 0200 0000 0000 0000 9c03 0000 0000 0000 9c03 0000 0000 0000 2000 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  I............................... ...............................
</span></span><span class="line"><span class="cl"> 5  00003668: 5700 0000 f6ff ff6f 0200 0000 0000 0000 c003 0000 0000 0000 c003 0000 0000 0000 1c00 0000 0000 0000 0600 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  W......o........................................................
</span></span><span class="line"><span class="cl"> 6  000036a8: 6100 0000 0b00 0000 0200 0000 0000 0000 e003 0000 0000 0000 e003 0000 0000 0000 c000 0000 0000 0000 0700 0000 0100 0000 0800 0000 0000 0000 1800 0000 0000 0000  a...............................................................
</span></span><span class="line"><span class="cl"> 7  000036e8: 6900 0000 0300 0000 0200 0000 0000 0000 a004 0000 0000 0000 a004 0000 0000 0000 a800 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  i...............................................................
</span></span><span class="line"><span class="cl"> 8  00003728: 7100 0000 ffff ff6f 0200 0000 0000 0000 4805 0000 0000 0000 4805 0000 0000 0000 1000 0000 0000 0000 0600 0000 0000 0000 0200 0000 0000 0000 0200 0000 0000 0000  q......o........H.......H.......................................
</span></span><span class="line"><span class="cl"> 9  00003768: 7e00 0000 feff ff6f 0200 0000 0000 0000 5805 0000 0000 0000 5805 0000 0000 0000 4000 0000 0000 0000 0700 0000 0100 0000 0800 0000 0000 0000 0000 0000 0000 0000  ~......o........X.......X.......@...............................
</span></span><span class="line"><span class="cl">10  000037a8: 8d00 0000 0400 0000 0200 0000 0000 0000 9805 0000 0000 0000 9805 0000 0000 0000 c000 0000 0000 0000 0600 0000 0000 0000 0800 0000 0000 0000 1800 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">11  000037e8: 9700 0000 0400 0000 4200 0000 0000 0000 5806 0000 0000 0000 5806 0000 0000 0000 3000 0000 0000 0000 0600 0000 1700 0000 0800 0000 0000 0000 1800 0000 0000 0000  ........B.......X.......X.......0...............................
</span></span><span class="line"><span class="cl">12  00003828: a100 0000 0100 0000 0600 0000 0000 0000 0010 0000 0000 0000 0010 0000 0000 0000 1b00 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">13  00003868: 9c00 0000 0100 0000 0600 0000 0000 0000 2010 0000 0000 0000 2010 0000 0000 0000 3000 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 1000 0000 0000 0000  ................ ....... .......0...............................
</span></span><span class="line"><span class="cl">14  000038a8: a700 0000 0100 0000 0600 0000 0000 0000 5010 0000 0000 0000 5010 0000 0000 0000 7101 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 0000 0000 0000 0000  ................P.......P.......q...............................
</span></span><span class="line"><span class="cl">15  000038e8: ad00 0000 0100 0000 0600 0000 0000 0000 c411 0000 0000 0000 c411 0000 0000 0000 0d00 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">16  00003928: b300 0000 0100 0000 0200 0000 0000 0000 0020 0000 0000 0000 0020 0000 0000 0000 1100 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................. ....... ......................................
</span></span><span class="line"><span class="cl">17  00003968: bb00 0000 0100 0000 0200 0000 0000 0000 1420 0000 0000 0000 1420 0000 0000 0000 2400 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................. ....... ......$...............................
</span></span><span class="line"><span class="cl">18  000039a8: c900 0000 0100 0000 0200 0000 0000 0000 3820 0000 0000 0000 3820 0000 0000 0000 7c00 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  ................8 ......8 ......|...............................
</span></span><span class="line"><span class="cl">19  000039e8: d300 0000 0e00 0000 0300 0000 0000 0000 d03d 0000 0000 0000 d02d 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................=.......-......................................
</span></span><span class="line"><span class="cl">20  00003a28: df00 0000 0f00 0000 0300 0000 0000 0000 d83d 0000 0000 0000 d82d 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................=.......-......................................
</span></span><span class="line"><span class="cl">21  00003a68: eb00 0000 0600 0000 0300 0000 0000 0000 e03d 0000 0000 0000 e02d 0000 0000 0000 e001 0000 0000 0000 0700 0000 0000 0000 0800 0000 0000 0000 1000 0000 0000 0000  .................=.......-......................................
</span></span><span class="line"><span class="cl">22  00003aa8: f400 0000 0100 0000 0300 0000 0000 0000 c03f 0000 0000 0000 c02f 0000 0000 0000 2800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................?......./......(...............................
</span></span><span class="line"><span class="cl">23  00003ae8: f900 0000 0100 0000 0300 0000 0000 0000 e83f 0000 0000 0000 e82f 0000 0000 0000 2800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................?......./......(...............................
</span></span><span class="line"><span class="cl">24  00003b28: 0201 0000 0100 0000 0300 0000 0000 0000 1040 0000 0000 0000 1030 0000 0000 0000 1d00 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  .................@.......0......................................
</span></span><span class="line"><span class="cl">25  00003b68: 0801 0000 0800 0000 0300 0000 0000 0000 2d40 0000 0000 0000 2d30 0000 0000 0000 0300 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  ................-@......-0......................................
</span></span><span class="line"><span class="cl">26  00003ba8: 0d01 0000 0100 0000 3000 0000 0000 0000 0000 0000 0000 0000 2d30 0000 0000 0000 1b00 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0100 0000 0000 0000  ........0...............-0......................................
</span></span><span class="line"><span class="cl">27  00003be8: 0100 0000 0200 0000 0000 0000 0000 0000 0000 0000 0000 0000 4830 0000 0000 0000 7002 0000 0000 0000 1c00 0000 0600 0000 0800 0000 0000 0000 1800 0000 0000 0000  ........................H0......p...............................
</span></span><span class="line"><span class="cl">28  00003c28: 0900 0000 0300 0000 0000 0000 0000 0000 0000 0000 0000 0000 b832 0000 0000 0000 5301 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  .........................2......S...............................
</span></span><span class="line"><span class="cl">29  00003c68: 1100 0000 0300 0000 0000 0000 0000 0000 0000 0000 0000 0000 0b34 0000 0000 0000 1601 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  .........................4......................................
</span></span></code></pre></div><p>Now look back at the <code>readelf</code> output for this line</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Section header string table index: 29
</span></span></code></pre></div><p>This gives the index for the string table which contains the names of all of the sections&hellip; Remember, <code>sh_name</code> member of section headers did not contained the actual name for the section but a index to section table. This is that section table.</p>
<p>On further analyzing this section table entry, we can identify everything about this section.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">index |  offset   |  sh_name  |  sh_type  |        sh_flags     |        sh_addr      |       sh_offset     |       sh_size       |  sh_link  |  sh_info  |     sh_addralign    |       sh_entsize    |
</span></span><span class="line"><span class="cl">29    | 00003c68: | 1100 0000 | 0300 0000 | 0000 0000 0000 0000 | 0000 0000 0000 0000 | 0b34 0000 0000 0000 | 1601 0000 0000 0000 | 0000 0000 | 0000 0000 | 0100 0000 0000 0000 | 0000 0000 0000 0000 |
</span></span></code></pre></div><p>Right now, interesting thing for us is the data that resides in this section. To get that, we need <code>sh_offset</code> and <code>sh_size</code>. <em>(Keep in mind that these values are in little endian form)</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ xxd \
</span></span><span class="line"><span class="cl">    -s 0x340b \     # short for 0x000000000000340b (sh_offset)
</span></span><span class="line"><span class="cl">    -l 0x116 \      # short for 0x0000000000000116 (sh_size)
</span></span><span class="line"><span class="cl">    hello_world
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0000340b: 002e 7379 6d74 6162 002e 7374 7274 6162  ..symtab..strtab
</span></span><span class="line"><span class="cl">0000341b: 002e 7368 7374 7274 6162 002e 696e 7465  ..shstrtab..inte
</span></span><span class="line"><span class="cl">0000342b: 7270 002e 6e6f 7465 2e67 6e75 2e70 726f  rp..note.gnu.pro
</span></span><span class="line"><span class="cl">0000343b: 7065 7274 7900 2e6e 6f74 652e 676e 752e  perty..note.gnu.
</span></span><span class="line"><span class="cl">0000344b: 6275 696c 642d 6964 002e 6e6f 7465 2e41  build-id..note.A
</span></span><span class="line"><span class="cl">0000345b: 4249 2d74 6167 002e 676e 752e 6861 7368  BI-tag..gnu.hash
</span></span><span class="line"><span class="cl">0000346b: 002e 6479 6e73 796d 002e 6479 6e73 7472  ..dynsym..dynstr
</span></span><span class="line"><span class="cl">0000347b: 002e 676e 752e 7665 7273 696f 6e00 2e67  ..gnu.version..g
</span></span><span class="line"><span class="cl">0000348b: 6e75 2e76 6572 7369 6f6e 5f72 002e 7265  nu.version_r..re
</span></span><span class="line"><span class="cl">0000349b: 6c61 2e64 796e 002e 7265 6c61 2e70 6c74  la.dyn..rela.plt
</span></span><span class="line"><span class="cl">000034ab: 002e 696e 6974 002e 7465 7874 002e 6669  ..init..text..fi
</span></span><span class="line"><span class="cl">000034bb: 6e69 002e 726f 6461 7461 002e 6568 5f66  ni..rodata..eh_f
</span></span><span class="line"><span class="cl">000034cb: 7261 6d65 5f68 6472 002e 6568 5f66 7261  rame_hdr..eh_fra
</span></span><span class="line"><span class="cl">000034db: 6d65 002e 696e 6974 5f61 7272 6179 002e  me..init_array..
</span></span><span class="line"><span class="cl">000034eb: 6669 6e69 5f61 7272 6179 002e 6479 6e61  fini_array..dyna
</span></span><span class="line"><span class="cl">000034fb: 6d69 6300 2e67 6f74 002e 676f 742e 706c  mic..got..got.pl
</span></span><span class="line"><span class="cl">0000350b: 7400 2e64 6174 6100 2e62 7373 002e 636f  t..data..bss..co
</span></span><span class="line"><span class="cl">0000351b: 6d6d 656e 7400                           mment.
</span></span></code></pre></div><p>ASCII representation of this section&rsquo;s data chunk confirms that this must be <strong>the</strong> string table. (the one which contains the names of the sections). Now atleast we know how to walk through the headers and locate a string table section. This gives us a green signal to go deeper and learn more about string tables.</p>
<h2 id="string-table">String table</h2>
<p>So, here&rsquo;s the deal: when you&rsquo;ve got a bunch of characters, and you end them with a null character, that whole thing is what we call a &ldquo;string.&rdquo; (<em>At least, that&rsquo;s what I&rsquo;ve learned, and I&rsquo;m sticking with it for now.</em>)</p>
<p>Now, when it comes to a string table, it&rsquo;s pretty simple. It&rsquo;s just a bunch of these strings all lined up, one after the other. The only twist is that the first string is always null (just a null char - <code>\0</code> - a null string). Now you can put all that data in a section and create a section header for it with <strong>type</strong> - <code>SHT_STRTAB</code>(which is just <code>0x3</code> in fancy lingo). And voila, you&rsquo;ve got yourself a proper string table, with a section header entry for it.</p>
<p>If you want to picture it, think of it like this - a string table is like a list of strings, where the first one is always an empty string.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## Every 00 is a null char (in hex)
</span></span><span class="line"><span class="cl"># For  Section=.shstrtab (Offset: 0x348b, Size: 278 = 0x116 in hex)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ xxd -s 0x340b -l 278 hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0000348b: 002e 7379 6d74 6162 002e 7374 7274 6162  ..symtab..strtab
</span></span><span class="line"><span class="cl">0000349b: 002e 7368 7374 7274 6162 002e 696e 7465  ..shstrtab..inte
</span></span><span class="line"><span class="cl">000034ab: 7270 002e 6e6f 7465 2e67 6e75 2e70 726f  rp..note.gnu.pro
</span></span><span class="line"><span class="cl">000034bb: 7065 7274 7900 2e6e 6f74 652e 676e 752e  perty..note.gnu.
</span></span><span class="line"><span class="cl">000034cb: 6275 696c 642d 6964 002e 6e6f 7465 2e41  build-id..note.A
</span></span><span class="line"><span class="cl">000034db: 4249 2d74 6167 002e 676e 752e 6861 7368  BI-tag..gnu.hash
</span></span><span class="line"><span class="cl">000034eb: 002e 6479 6e73 796d 002e 6479 6e73 7472  ..dynsym..dynstr
</span></span><span class="line"><span class="cl">000034fb: 002e 676e 752e 7665 7273 696f 6e00 2e67  ..gnu.version..g
</span></span><span class="line"><span class="cl">0000350b: 6e75 2e76 6572 7369 6f6e 5f72 002e 7265  nu.version_r..re
</span></span><span class="line"><span class="cl">0000351b: 6c61 2e64 796e 002e 7265 6c61 2e70 6c74  la.dyn..rela.plt
</span></span><span class="line"><span class="cl">0000352b: 002e 696e 6974 002e 7465 7874 002e 6669  ..init..text..fi
</span></span><span class="line"><span class="cl">0000353b: 6e69 002e 726f 6461 7461 002e 6568 5f66  ni..rodata..eh_f
</span></span><span class="line"><span class="cl">0000354b: 7261 6d65 5f68 6472 002e 6568 5f66 7261  rame_hdr..eh_fra
</span></span><span class="line"><span class="cl">0000355b: 6d65 002e 696e 6974 5f61 7272 6179 002e  me..init_array..
</span></span><span class="line"><span class="cl">0000356b: 6669 6e69 5f61 7272 6179 002e 6479 6e61  fini_array..dyna
</span></span><span class="line"><span class="cl">0000357b: 6d69 6300 2e67 6f74 002e 676f 742e 706c  mic..got..got.pl
</span></span><span class="line"><span class="cl">0000358b: 7400 2e64 6174 6100 2e62 7373 002e 636f  t..data..bss..co
</span></span><span class="line"><span class="cl">0000359b: 6d6d 656e 7400                           mment.
</span></span></code></pre></div><p>It should be pretty easy to write a parser for this, if not, ask your friend to do it for you. (hint: not me)</p>
<p>Now, to proceed, let&rsquo;s take a look at the C program that I&rsquo;ll be using for further examples</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">file: hello.c
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">global1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="n">global2</span> <span class="o">=</span> <span class="sc">&#39;x&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="n">global3</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">void</span> <span class="nf">print_globals</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;global1 = %d (%p) | global2 = %c (%p) | global3 = %d (%p)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">global1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">global1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">global2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">global2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">global3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">global3</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">local1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">local2</span> <span class="o">=</span> <span class="sc">&#39;y&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">local3</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Main: %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">main</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">print_globals</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;local1 = %d (%p) | local2 = %c (%p) | local3 = %d (%p)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">local1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">local1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">local2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">local2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">local3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">local3</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>I assume you can compile it and create the ELF binary. After the ELF binary is ready, analyze it to extract the list of all sections with a type of <code>0x3</code> (feeling fancy - <code>SHT_STRTAB</code>). Feel free to use <code>readelf</code>, <code>hexdump</code>, <code>xxd</code>, or any tool you prefer – the output should be same, regardless of your choice.</p>
<p>Using my pretty parser, I found three entries.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 07 ] Section Name: .dynstr        Type: 0x3       Flags: 0x2      Addr: 0x4a0     Offset: 0x4a0           Size: 170       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 28 ] Section Name: .strtab        Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x3318          Size: 371       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">[ 29 ] Section Name: .shstrtab      Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x348b          Size: 278       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span></code></pre></div><p>Let&rsquo;s examine them closely, one by one.</p>
<p><strong>NOTE</strong>: <em>String tables consist exclusively of strings. This data doesn&rsquo;t serve much purpose unless those strings are needed by other sections.</em></p>
<h3 id="1-shstrtab">1. <code>.shstrtab</code></h3>
<p>This is <em>the</em> string table (the one which stores the names of all of the sections) - <em>well we already talked about it so no point of repeating it, right?</em></p>
<p>So, Why are the section names stored in a separate dedicated section, rather than directly within each section&rsquo;s <code>sh_name</code> member??</p>
<p><strong>Answer</strong>: While I can&rsquo;t say for certain, it&rsquo;s possible that this design choice was made to accommodate variable-length section names. Storing the names in a separate section allows flexibility in the length of section names and avoids any size constraints related to the <code>sh_name</code> member.</p>
<p>When I parse this with my parser, the data of this section appears like this &ndash; an offset in the section and the string stored at that offset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 29 ] Section Name: .shstrtab      Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x348b          Size: 278       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">     [    0 ]
</span></span><span class="line"><span class="cl">     [    1 ] .symtab
</span></span><span class="line"><span class="cl">     [    9 ] .strtab
</span></span><span class="line"><span class="cl">     [   17 ] .shstrtab
</span></span><span class="line"><span class="cl">     [   27 ] .interp
</span></span><span class="line"><span class="cl">     [   35 ] .note.gnu.property
</span></span><span class="line"><span class="cl">     [   54 ] .note.gnu.build-id
</span></span><span class="line"><span class="cl">     [   73 ] .note.ABI-tag
</span></span><span class="line"><span class="cl">     [   87 ] .gnu.hash
</span></span><span class="line"><span class="cl">     [   97 ] .dynsym
</span></span><span class="line"><span class="cl">     [  105 ] .dynstr
</span></span><span class="line"><span class="cl">     [  113 ] .gnu.version
</span></span><span class="line"><span class="cl">     [  126 ] .gnu.version_r
</span></span><span class="line"><span class="cl">     [  141 ] .rela.dyn
</span></span><span class="line"><span class="cl">     [  151 ] .rela.plt
</span></span><span class="line"><span class="cl">     [  161 ] .init
</span></span><span class="line"><span class="cl">     [  167 ] .text
</span></span><span class="line"><span class="cl">     [  173 ] .fini
</span></span><span class="line"><span class="cl">     [  179 ] .rodata
</span></span><span class="line"><span class="cl">     [  187 ] .eh_frame_hdr
</span></span><span class="line"><span class="cl">     [  201 ] .eh_frame
</span></span><span class="line"><span class="cl">     [  211 ] .init_array
</span></span><span class="line"><span class="cl">     [  223 ] .fini_array
</span></span><span class="line"><span class="cl">     [  235 ] .dynamic
</span></span><span class="line"><span class="cl">     [  244 ] .got
</span></span><span class="line"><span class="cl">     [  249 ] .got.plt
</span></span><span class="line"><span class="cl">     [  258 ] .data
</span></span><span class="line"><span class="cl">     [  264 ] .bss
</span></span><span class="line"><span class="cl">     [  269 ] .comment
</span></span></code></pre></div><h3 id="2-strtab">2. <code>.strtab</code></h3>
<p>This section contains strings (:P), mostly the ones representing names linked to symbol table entries (we&rsquo;ll talk about symbol tables later). But at a quick glance, you can spot some of the names for <code>variables</code> and <code>functions</code> we used in our C program, such as <code>global3</code>, <code>print_globals</code>, <code>main</code> and so on.</p>
<p>Keep in mind that this section does not hold strings which are used by programs like the ones used with <code>printf</code> function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ 28 ] Section Name: .strtab        Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x3318          Size: 371       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">     [    0 ]
</span></span><span class="line"><span class="cl">     [    1 ] hello.c
</span></span><span class="line"><span class="cl">     [    9 ] global3
</span></span><span class="line"><span class="cl">     [   17 ] print_globals
</span></span><span class="line"><span class="cl">     [   31 ] local3.0
</span></span><span class="line"><span class="cl">     [   40 ] _DYNAMIC
</span></span><span class="line"><span class="cl">     [   49 ] __GNU_EH_FRAME_HDR
</span></span><span class="line"><span class="cl">     [   68 ] _GLOBAL_OFFSET_TABLE_
</span></span><span class="line"><span class="cl">     [   90 ] __libc_start_main@GLIBC_2.34
</span></span><span class="line"><span class="cl">     [  119 ] _ITM_deregisterTMCloneTable
</span></span><span class="line"><span class="cl">     [  147 ] _edata
</span></span><span class="line"><span class="cl">     [  154 ] _fini
</span></span><span class="line"><span class="cl">     [  160 ] __stack_chk_fail@GLIBC_2.4
</span></span><span class="line"><span class="cl">     [  187 ] printf@GLIBC_2.2.5
</span></span><span class="line"><span class="cl">     [  206 ] global1
</span></span><span class="line"><span class="cl">     [  214 ] __data_start
</span></span><span class="line"><span class="cl">     [  227 ] __gmon_start__
</span></span><span class="line"><span class="cl">     [  242 ] __dso_handle
</span></span><span class="line"><span class="cl">     [  255 ] _IO_stdin_used
</span></span><span class="line"><span class="cl">     [  270 ] _end
</span></span><span class="line"><span class="cl">     [  275 ] __bss_start
</span></span><span class="line"><span class="cl">     [  287 ] main
</span></span><span class="line"><span class="cl">     [  292 ] __TMC_END__
</span></span><span class="line"><span class="cl">     [  304 ] _ITM_registerTMCloneTable
</span></span><span class="line"><span class="cl">     [  330 ] __cxa_finalize@GLIBC_2.2.5
</span></span><span class="line"><span class="cl">     [  357 ] _init
</span></span><span class="line"><span class="cl">     [  363 ] global2
</span></span></code></pre></div><h3 id="3-dynstr">3. <code>.dynstr</code></h3>
<p>Similar to <code>strtab</code>, this section contains strings for symbol table entries, but these symbols come into play during runtime, often as part of dynamic linking. Because this section is used for dynamic linking, this needs to be loaded into memory for runtime use. You can confirm that with the <code>sh_flags</code> value for this section (should be <code>0x2</code> (or fancy, <code>SHF_ALLOC</code>))</p>
<p>For your satisfaction, here is the the output of <code>readelf --segments hello</code>, which indicates that this section is a part of the first <code>LOAD</code> segment</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ readelf --segments --wide hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Elf file type is DYN (Position-Independent Executable file)
</span></span><span class="line"><span class="cl">Entry point 0x1050
</span></span><span class="line"><span class="cl">There are 13 program headers, starting at offset 64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
</span></span><span class="line"><span class="cl">  0 PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x0002d8 0x0002d8 R   0x8
</span></span><span class="line"><span class="cl">  1 INTERP         0x000318 0x0000000000000318 0x0000000000000318 0x00001c 0x00001c R   0x1
</span></span><span class="line"><span class="cl">      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
</span></span><span class="line"><span class="cl">  2 LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x000690 0x000690 R   0x1000
</span></span><span class="line"><span class="cl">  3 LOAD           0x001000 0x0000000000001000 0x0000000000001000 0x00024d 0x00024d R E 0x1000
</span></span><span class="line"><span class="cl">  4 LOAD           0x002000 0x0000000000002000 0x0000000000002000 0x000154 0x000154 R   0x1000
</span></span><span class="line"><span class="cl">  5 LOAD           0x002dd0 0x0000000000003dd0 0x0000000000003dd0 0x00025c 0x000268 RW  0x1000
</span></span><span class="line"><span class="cl">  6 DYNAMIC        0x002de0 0x0000000000003de0 0x0000000000003de0 0x0001e0 0x0001e0 RW  0x8
</span></span><span class="line"><span class="cl">  7 NOTE           0x000338 0x0000000000000338 0x0000000000000338 0x000040 0x000040 R   0x8
</span></span><span class="line"><span class="cl">  8 NOTE           0x000378 0x0000000000000378 0x0000000000000378 0x000044 0x000044 R   0x4
</span></span><span class="line"><span class="cl">  9 GNU_PROPERTY   0x000338 0x0000000000000338 0x0000000000000338 0x000040 0x000040 R   0x8
</span></span><span class="line"><span class="cl"> 10 GNU_EH_FRAME   0x002088 0x0000000000002088 0x0000000000002088 0x00002c 0x00002c R   0x4
</span></span><span class="line"><span class="cl"> 11 GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
</span></span><span class="line"><span class="cl"> 12 GNU_RELRO      0x002dd0 0x0000000000003dd0 0x0000000000003dd0 0x000230 0x000230 R   0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   00
</span></span><span class="line"><span class="cl">   01     .interp
</span></span><span class="line"><span class="cl">   02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
</span></span><span class="line"><span class="cl">   03     .init .plt .text .fini
</span></span><span class="line"><span class="cl">   04     .rodata .eh_frame_hdr .eh_frame
</span></span><span class="line"><span class="cl">   05     .init_array .fini_array .dynamic .got .got.plt .data .bss
</span></span><span class="line"><span class="cl">   06     .dynamic
</span></span><span class="line"><span class="cl">   07     .note.gnu.property
</span></span><span class="line"><span class="cl">   08     .note.gnu.build-id .note.ABI-tag
</span></span><span class="line"><span class="cl">   09     .note.gnu.property
</span></span><span class="line"><span class="cl">   10     .eh_frame_hdr
</span></span><span class="line"><span class="cl">   11
</span></span><span class="line"><span class="cl">   12     .init_array .fini_array .dynamic .got
</span></span></code></pre></div><p>But the section structure is still same as any other string table, so my cool parser parsed it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> [ 07 ] Section Name: .dynstr       Type: 0x3       Flags: 0x2      Addr: 0x4a0     Offset: 0x4a0           Size: 170       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl">     [    0 ]
</span></span><span class="line"><span class="cl">     [    1 ] __cxa_finalize
</span></span><span class="line"><span class="cl">     [   16 ] __libc_start_main
</span></span><span class="line"><span class="cl">     [   34 ] __stack_chk_fail
</span></span><span class="line"><span class="cl">     [   51 ] printf
</span></span><span class="line"><span class="cl">     [   58 ] libc.so.6
</span></span><span class="line"><span class="cl">     [   68 ] GLIBC_2.2.5
</span></span><span class="line"><span class="cl">     [   80 ] GLIBC_2.4
</span></span><span class="line"><span class="cl">     [   90 ] GLIBC_2.34
</span></span><span class="line"><span class="cl">     [  101 ] _ITM_deregisterTMCloneTable
</span></span><span class="line"><span class="cl">     [  129 ] __gmon_start__
</span></span><span class="line"><span class="cl">     [  144 ] _ITM_registerTMCloneTable
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>string tables in ELF files serve as repositories for various strings for section names, symbol names, and other dynamic linking data. The separation of string data into dedicated sections like &ldquo;strtab&rdquo; and &ldquo;dynstr&rdquo; allows for flexibility in string length and ensures that these essential strings are readily available during program execution.</p>
<p>Before closing this, I want you to run <code>strip</code> command against the ELF binary used in this article&hellip; Whatever happens will raise some good new questions for you to dig deeper (Some of those questions will be answered as we go forward with this series)</p>
]]></content:encoded>
    </item>
    <item>
      <title>ELF Chronicles: Program Headers (3/?)</title>
      <link>https://ayedaemon.github.io/post/2023/10/elf-chronicles-program-headers/</link>
      <pubDate>Fri, 20 Oct 2023 15:21:49 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2023/10/elf-chronicles-program-headers/</guid>
      <description>Exploring ELF program Headers</description>
      <content:encoded><![CDATA[<p>In preceding articles, we&rsquo;ve delved into the details of ELF file headers and section headers. Section headers provide insight into how data and instructions are organized based on their characteristics and grouped into distinct sections. These sections remain distinct due to variations in their types and permissions (<em>&hellip; and few other things</em>).</p>
<p>Up to this point, our focus has been on the aspects of the ELF file as it resides on-disk. However, we now turn our attention to what occurs when the file is loaded into memory. How is its arrangement handled? Are all the sections loaded into memory?</p>
<p>This is where the concept of program headers comes into play. Program headers are similar to section headers, but instead of section information, they store segment information. A segment encompasses one or more sections from the ELF file. While program headers hold little significance while the file is on disk, they become imperative when the file needs to be loaded and executed in memory, specifically in the case of executables and shared objects.</p>
<p>Some criteria for grouping sections to form segments can be:</p>
<ul>
<li>Type and purpose of the sections (like <code>.data</code> and <code>.bss</code>),</li>
<li>Memory Access Permissions and mapping,</li>
<li>Alignment and Layout,</li>
<li>Segment size constraints,</li>
<li>OS and platform requirements, etc</li>
</ul>
<p>For this article, I&rsquo;ll be using the same C code to generate an ELF file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">File: hello_world.c
</span></span></span><span class="line"><span class="cl"><span class="cm">Compile: gcc hello_world.c -o hello_world
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A macro
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define HELLO_MSG1 &#34;Hello World1&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A global variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span> <span class="n">HELLO_MSG2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World2&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// main function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// local variable for main
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">HELLO_MSG3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World3&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Print messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Once you have the ELF file, you can get the program header related information from ELF file headers - <code>e_phoff</code>, <code>e_phentsize</code> and <code>e_phnum</code></p>
<p>I&rsquo;ll use readelf to get this information from the ELF headers. Feel free to use any method of your choice.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ELF Header:
</span></span><span class="line"><span class="cl">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">  Class:                             ELF64
</span></span><span class="line"><span class="cl">  Data:                              2&#39;s complement, little endian
</span></span><span class="line"><span class="cl">  Version:                           1 (current)
</span></span><span class="line"><span class="cl">  OS/ABI:                            UNIX - System V
</span></span><span class="line"><span class="cl">  ABI Version:                       0
</span></span><span class="line"><span class="cl">  Type:                              DYN (Position-Independent Executable file)
</span></span><span class="line"><span class="cl">  Machine:                           Advanced Micro Devices X86-64
</span></span><span class="line"><span class="cl">  Version:                           0x1
</span></span><span class="line"><span class="cl">  Entry point address:               0x1040
</span></span><span class="line"><span class="cl">  Start of program headers:          64 (bytes into file)
</span></span><span class="line"><span class="cl">  Start of section headers:          13496 (bytes into file)
</span></span><span class="line"><span class="cl">  Flags:                             0x0
</span></span><span class="line"><span class="cl">  Size of this header:               64 (bytes)
</span></span><span class="line"><span class="cl">  Size of program headers:           56 (bytes)
</span></span><span class="line"><span class="cl">  Number of program headers:         13
</span></span><span class="line"><span class="cl">  Size of section headers:           64 (bytes)
</span></span><span class="line"><span class="cl">  Number of section headers:         30
</span></span><span class="line"><span class="cl">  Section header string table index: 29
</span></span></code></pre></div><p>From the the output above, we can deduce that</p>
<ul>
<li>the program headers are located at offset of <code>64</code> bytes,</li>
<li>each of these header entries is <code>56</code> bytes in size,</li>
<li>and in total, we&rsquo;ve got <code>13</code> entries</li>
</ul>
<p>Now we can use xxd to get the data out</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ xxd -s 64 -l $(( 54*13 )) -c 54 build/hello
</span></span><span class="line"><span class="cl">00000040: 0600 0000 0400 0000 4000 0000 0000 0000 4000 0000 0000 0000 4000 0000 0000 0000 d802 0000 0000 0000 d802 0000 0000 0000 0800 0000 0000  ........@.......@.......@.............................
</span></span><span class="line"><span class="cl">00000076: 0000 0300 0000 0400 0000 1803 0000 0000 0000 1803 0000 0000 0000 1803 0000 0000 0000 1c00 0000 0000 0000 1c00 0000 0000 0000 0100 0000  ......................................................
</span></span><span class="line"><span class="cl">000000ac: 0000 0000 0100 0000 0400 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 3006 0000 0000 0000 3006 0000 0000 0000 0010  ....................................0.......0.........
</span></span><span class="line"><span class="cl">000000e2: 0000 0000 0000 0100 0000 0500 0000 0010 0000 0000 0000 0010 0000 0000 0000 0010 0000 0000 0000 8901 0000 0000 0000 8901 0000 0000 0000  ......................................................
</span></span><span class="line"><span class="cl">00000118: 0010 0000 0000 0000 0100 0000 0400 0000 0020 0000 0000 0000 0020 0000 0000 0000 0020 0000 0000 0000 b400 0000 0000 0000 b400 0000 0000  ................. ....... ....... ....................
</span></span><span class="line"><span class="cl">0000014e: 0000 0010 0000 0000 0000 0100 0000 0600 0000 d02d 0000 0000 0000 d03d 0000 0000 0000 d03d 0000 0000 0000 4802 0000 0000 0000 5002 0000  ...................-.......=.......=......H.......P...
</span></span><span class="line"><span class="cl">00000184: 0000 0000 0010 0000 0000 0000 0200 0000 0600 0000 e02d 0000 0000 0000 e03d 0000 0000 0000 e03d 0000 0000 0000 e001 0000 0000 0000 e001  .....................-.......=.......=................
</span></span><span class="line"><span class="cl">000001ba: 0000 0000 0000 0800 0000 0000 0000 0400 0000 0400 0000 3803 0000 0000 0000 3803 0000 0000 0000 3803 0000 0000 0000 4000 0000 0000 0000  ......................8.......8.......8.......@.......
</span></span><span class="line"><span class="cl">000001f0: 4000 0000 0000 0000 0800 0000 0000 0000 0400 0000 0400 0000 7803 0000 0000 0000 7803 0000 0000 0000 7803 0000 0000 0000 4400 0000 0000  @.......................x.......x.......x.......D.....
</span></span><span class="line"><span class="cl">00000226: 0000 4400 0000 0000 0000 0400 0000 0000 0000 53e5 7464 0400 0000 3803 0000 0000 0000 3803 0000 0000 0000 3803 0000 0000 0000 4000 0000  ..D...............S.td....8.......8.......8.......@...
</span></span><span class="line"><span class="cl">0000025c: 0000 0000 4000 0000 0000 0000 0800 0000 0000 0000 50e5 7464 0400 0000 1420 0000 0000 0000 1420 0000 0000 0000 1420 0000 0000 0000 2400  ....@...............P.td..... ....... ....... ......$.
</span></span><span class="line"><span class="cl">00000292: 0000 0000 0000 2400 0000 0000 0000 0400 0000 0000 0000 51e5 7464 0600 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000  ......$...............Q.td............................
</span></span><span class="line"><span class="cl">000002c8: 0000 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 52e5 7464 0400 0000 d02d 0000 0000 0000 d03d 0000 0000 0000 d03d 0000 0000  ........................R.td.....-.......=.......=....
</span></span></code></pre></div><p>Now we just have to map each of these lines to <code>Elf64_Phdr</code> (since we have a 64Bit file)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/*
</span></span><span class="line"><span class="cl">https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/elf.h#L260
</span></span><span class="line"><span class="cl">*/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">typedef struct elf64_phdr {
</span></span><span class="line"><span class="cl">  Elf64_Word p_type;      /* Segment type */
</span></span><span class="line"><span class="cl">  Elf64_Word p_flags;     /* Segment flags */
</span></span><span class="line"><span class="cl">  Elf64_Off p_offset;     /* Segment file offset */
</span></span><span class="line"><span class="cl">  Elf64_Addr p_vaddr;     /* Segment virtual address */
</span></span><span class="line"><span class="cl">  Elf64_Addr p_paddr;     /* Segment physical address */
</span></span><span class="line"><span class="cl">  Elf64_Xword p_filesz;   /* Segment size in file */
</span></span><span class="line"><span class="cl">  Elf64_Xword p_memsz;    /* Segment size in memory */
</span></span><span class="line"><span class="cl">  Elf64_Xword p_align;    /* Segment alignment, file &amp; memory */
</span></span><span class="line"><span class="cl">} Elf64_Phdr;
</span></span></code></pre></div><p>Using my nifty little parser, I got this digestible and user-friendly output for the above dump (Feel free to compare it)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ + ] Program headers begins at: 0x40
</span></span><span class="line"><span class="cl"> [ 00 ] Type: 0x6        Flags: 0x4      Offset: 0x0040          vaddr: 0x40     paddr: 0x40     filesz: 0x728           memsz: 0x728            align: 0x8
</span></span><span class="line"><span class="cl"> [ 01 ] Type: 0x3        Flags: 0x4      Offset: 0x0318          vaddr: 0x318    paddr: 0x318    filesz: 0x28            memsz: 0x28             align: 0x1
</span></span><span class="line"><span class="cl"> [ 02 ] Type: 0x1        Flags: 0x4      Offset: 0x0000          vaddr: 0x0      paddr: 0x0      filesz: 0x1584          memsz: 0x1584           align: 0x1000
</span></span><span class="line"><span class="cl"> [ 03 ] Type: 0x1        Flags: 0x5      Offset: 0x1000          vaddr: 0x1000   paddr: 0x1000   filesz: 0x393           memsz: 0x393            align: 0x1000
</span></span><span class="line"><span class="cl"> [ 04 ] Type: 0x1        Flags: 0x4      Offset: 0x2000          vaddr: 0x2000   paddr: 0x2000   filesz: 0x180           memsz: 0x180            align: 0x1000
</span></span><span class="line"><span class="cl"> [ 05 ] Type: 0x1        Flags: 0x6      Offset: 0x2dd0          vaddr: 0x3dd0   paddr: 0x3dd0   filesz: 0x584           memsz: 0x592            align: 0x1000
</span></span><span class="line"><span class="cl"> [ 06 ] Type: 0x2        Flags: 0x6      Offset: 0x2de0          vaddr: 0x3de0   paddr: 0x3de0   filesz: 0x480           memsz: 0x480            align: 0x8
</span></span><span class="line"><span class="cl"> [ 07 ] Type: 0x4        Flags: 0x4      Offset: 0x0338          vaddr: 0x338    paddr: 0x338    filesz: 0x64            memsz: 0x64             align: 0x8
</span></span><span class="line"><span class="cl"> [ 08 ] Type: 0x4        Flags: 0x4      Offset: 0x0378          vaddr: 0x378    paddr: 0x378    filesz: 0x68            memsz: 0x68             align: 0x4
</span></span><span class="line"><span class="cl"> [ 09 ] Type: 0xe553     Flags: 0x4      Offset: 0x0338          vaddr: 0x338    paddr: 0x338    filesz: 0x64            memsz: 0x64             align: 0x8
</span></span><span class="line"><span class="cl"> [ 10 ] Type: 0xe550     Flags: 0x4      Offset: 0x2014          vaddr: 0x2014   paddr: 0x2014   filesz: 0x36            memsz: 0x36             align: 0x4
</span></span><span class="line"><span class="cl"> [ 11 ] Type: 0xe551     Flags: 0x6      Offset: 0x0000          vaddr: 0x0      paddr: 0x0      filesz: 0x0             memsz: 0x0              align: 0x10
</span></span><span class="line"><span class="cl"> [ 12 ] Type: 0xe552     Flags: 0x4      Offset: 0x2dd0          vaddr: 0x3dd0   paddr: 0x3dd0   filesz: 0x560           memsz: 0x560            align: 0x1
</span></span></code></pre></div><p>Now, it&rsquo;s time to take a deep dive into the inner workings of the <code>Elf64_Phdr</code> struct</p>
<h3 id="1-p_type">1. p_type</h3>
<p>Just like <code>sh_type</code>, this member tells the type of the segment. Whether the segment will be loaded in the memory or is it just used to store notes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">/*</span>
</span></span><span class="line"><span class="cl"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">elixir</span><span class="o">.</span><span class="n">bootlin</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">source</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">uapi</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">elf</span><span class="o">.</span><span class="n">h</span><span class="c1">#L25</span>
</span></span><span class="line"><span class="cl"><span class="o">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">/*</span> <span class="n">These</span> <span class="n">constants</span> <span class="n">are</span> <span class="k">for</span> <span class="n">the</span> <span class="n">segment</span> <span class="n">types</span> <span class="n">stored</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">image</span> <span class="n">headers</span> <span class="o">*/</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_NULL    0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_LOAD    1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_DYNAMIC 2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_INTERP  3</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_NOTE    4</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_SHLIB   5</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_PHDR    6</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_TLS     7               /* Thread local storage segment */</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_LOOS    0x60000000      /* OS-specific */</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_HIOS    0x6fffffff      /* OS-specific */</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_LOPROC  0x70000000</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_HIPROC  0x7fffffff</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_GNU_EH_FRAME	(PT_LOOS + 0x474e550)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_GNU_STACK	(PT_LOOS + 0x474e551)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_GNU_RELRO	(PT_LOOS + 0x474e552)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PT_GNU_PROPERTY	(PT_LOOS + 0x474e553)</span>
</span></span></code></pre></div><h3 id="2-p_flags">2. p_flags</h3>
<p>This is quite similar to the the <code>(r)ead</code>, <code>(w)rite</code> and <code>e(x)ecute</code> permissions we are familiar with. This member specifies the permissions for the given segment.</p>
<p>Usually the segment containing the <code>.text</code> section will have <code>(r)ead</code> and <code>e(x)ecute</code> permissions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">/*</span>
</span></span><span class="line"><span class="cl"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">elixir</span><span class="o">.</span><span class="n">bootlin</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">source</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">uapi</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">elf</span><span class="o">.</span><span class="n">h</span><span class="c1">#L243</span>
</span></span><span class="line"><span class="cl"><span class="o">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">/*</span> <span class="n">These</span> <span class="n">constants</span> <span class="n">define</span> <span class="n">the</span> <span class="n">permissions</span> <span class="n">on</span> <span class="n">sections</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">program</span>
</span></span><span class="line"><span class="cl">   <span class="n">header</span><span class="p">,</span> <span class="n">p_flags</span><span class="o">.</span> <span class="o">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#define PF_R    0x4</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PF_W    0x2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#define PF_X    0x1</span>
</span></span></code></pre></div><h3 id="3-p_offset">3. p_offset</h3>
<p>This holds the offset from the beginning of the file, where the first byte of the first section in this segment is located.</p>
<h3 id="4-p_vaddr">4. p_vaddr</h3>
<p>This member holds the memory/virtual address for the segment.</p>
<h3 id="5-p_paddr">5. p_paddr</h3>
<p>This is same as <code>p_vaddr</code>, but holds the physical/on-disk address for the segment.</p>
<h3 id="6-p_filesz">6. p_filesz</h3>
<p>This holds the on-disk size (in bytes) of the segment.</p>
<h3 id="7-p_memsz">7. p_memsz</h3>
<p>This member holds the memory/virtual size (in bytes) of the segment.</p>
<h3 id="8-p_align">8. p_align</h3>
<p>This member holds the value to which the segments are aligned in memory and in the file.</p>
<p>Similar to <code>sh_addralign</code>, value of <code>0</code> and <code>1</code> are treated as &ldquo;no alignment&rdquo;, while the positive powers of <code>2</code> are taken as the actual alignment values.</p>
<h2 id="practicals">Practicals</h2>
<p>Let&rsquo;s start with checking if <code>strip</code> command makes any change to the program headers.</p>
<ul>
<li>Try to write a program to parse the program headers and display the information in better way.</li>
<li>Try to write a program that gives the information about what sections are grouped together in a segment. <code>readelf</code> gives this information in below format</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
</span></span><span class="line"><span class="cl">  PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x0002d8 0x0002d8 R   0x8
</span></span><span class="line"><span class="cl">  INTERP         0x000318 0x0000000000000318 0x0000000000000318 0x00001c 0x00001c R   0x1
</span></span><span class="line"><span class="cl">      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2 ]
</span></span><span class="line"><span class="cl">  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x000630 0x000630 R   0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x001000 0x0000000000001000 0x0000000000001000 0x000189 0x000189 R E 0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x002000 0x0000000000002000 0x0000000000002000 0x0000b4 0x0000b4 R   0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x002dd0 0x0000000000003dd0 0x0000000000003dd0 0x000248 0x000250 RW  0x1000
</span></span><span class="line"><span class="cl">  DYNAMIC        0x002de0 0x0000000000003de0 0x0000000000003de0 0x0001e0 0x0001e0 RW  0x8
</span></span><span class="line"><span class="cl">  NOTE           0x000338 0x0000000000000338 0x0000000000000338 0x000040 0x000040 R   0x8
</span></span><span class="line"><span class="cl">  NOTE           0x000378 0x0000000000000378 0x0000000000000378 0x000044 0x000044 R   0x4
</span></span><span class="line"><span class="cl">  GNU_PROPERTY   0x000338 0x0000000000000338 0x0000000000000338 0x000040 0x000040 R   0x8
</span></span><span class="line"><span class="cl">  GNU_EH_FRAME   0x002014 0x0000000000002014 0x0000000000002014 0x000024 0x000024 R   0x4
</span></span><span class="line"><span class="cl">  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
</span></span><span class="line"><span class="cl">  GNU_RELRO      0x002dd0 0x0000000000003dd0 0x0000000000003dd0 0x000230 0x000230 R   0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   00
</span></span><span class="line"><span class="cl">   01     .interp
</span></span><span class="line"><span class="cl">   02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
</span></span><span class="line"><span class="cl">   03     .init .plt .text .fini
</span></span><span class="line"><span class="cl">   04     .rodata .eh_frame_hdr .eh_frame
</span></span><span class="line"><span class="cl">   05     .init_array .fini_array .dynamic .got .got.plt .data .bss
</span></span><span class="line"><span class="cl">   06     .dynamic
</span></span><span class="line"><span class="cl">   07     .note.gnu.property
</span></span><span class="line"><span class="cl">   08     .note.gnu.build-id .note.ABI-tag
</span></span><span class="line"><span class="cl">   09     .note.gnu.property
</span></span><span class="line"><span class="cl">   10     .eh_frame_hdr
</span></span><span class="line"><span class="cl">   11
</span></span><span class="line"><span class="cl">   12     .init_array .fini_array .dynamic .got
</span></span></code></pre></div><p>If you want to go extra mile and dig deep,</p>
<ul>
<li>Try overwriting the program interpreter with your custom loader program. Things will probably go wrong and then you can dig deep what&rsquo;s the root cause.</li>
<li>Add a new section (<code>.text</code> type), create it&rsquo;s section header entry, then create it&rsquo;s program header entry such that it is loadable in memory. Then change the ELF entrypoint to the newly created section.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Alright, buckle up, because we have just seen what segments are, how sections are grouped into segments, and how program headers act as a table to store information about segments which is helpful for runtime. Picture this -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  ┌───────────────────────────┐
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │      File Header          │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │     Program Header        │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤  ◄───┐
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │      Section 1            │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤      │ Segment 1
</span></span><span class="line"><span class="cl">  │      Section 2            │      │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │      Section 3            │      │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤  ◄───┤
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │ Segment 2
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │      Section 4            │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │  ◄───┤
</span></span><span class="line"><span class="cl">  │                           │      │ Segment 3
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤  ◄───┤
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │      Section 5            │      │
</span></span><span class="line"><span class="cl">  │                           │      │ Segment 4
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤  ◄───┤
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │     Section 6             │      │ Segment 5
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  │                           │      │
</span></span><span class="line"><span class="cl">  ├───────────────────────────┤  ◄───┘
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │     Section Header        │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  │                           │
</span></span><span class="line"><span class="cl">  └───────────────────────────┘
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>ELF Chronicles: Section Headers (2/?)</title>
      <link>https://ayedaemon.github.io/post/2023/10/elf-chronicles-section-headers/</link>
      <pubDate>Thu, 19 Oct 2023 00:24:06 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2023/10/elf-chronicles-section-headers/</guid>
      <description>Exploring ELF Section Headers</description>
      <content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>Assuming you&rsquo;ve got ELF headers like <code>Elf64_Ehdr</code> or <code>Elf32_Ehdr</code> at your fingertips, and you&rsquo;re armed with the know-how and tools to decipher their contents effortlessly.</p>
<p>For this article I&rsquo;ll be using the below C code to generate the ELF file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* file: hello_world.c */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A macro
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define HELLO_MSG1 &#34;Hello World1&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A global variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span> <span class="n">HELLO_MSG2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World2&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// main function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// local variable for main
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">HELLO_MSG3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World3&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Print messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>You can get the ELF binary by compiling this code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc hello_world.c -o hello_world
</span></span></code></pre></div><p>Now the task at hand is to read/parse the file and get information regarding the sections (<code>e_shoff</code>, <code>e_shentsize</code>, <code>e_shnum</code>, and <code>e_shstrndx</code>). Mostly I, another <em>mere</em> human, rely on a &ldquo;industry grade&rdquo; tool called <code>readelf</code> to read an ELF file and figure out stuff.</p>
<p>Now, the challenge on our hands is to crack open the file and unearth some juicy details about the sections. You already know, things like <code>e_shoff</code>, <code>e_shentsize</code>, <code>e_shnum</code>, and <code>e_shstrndx</code>. I confess, like any other <em>mere</em> human, I often lean on a trusty &ldquo;industry-grade&rdquo; tool called <code>readelf</code> to do the heavy lifting when it comes to ELF file forensics. (But it&rsquo;s always good to know the manual methods for those 1% kind of situations)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ readelf --file-header --wide hello_world
</span></span><span class="line"><span class="cl">ELF Header:
</span></span><span class="line"><span class="cl">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">  Class:                             ELF64
</span></span><span class="line"><span class="cl">  Data:                              2&#39;s complement, little endian
</span></span><span class="line"><span class="cl">  Version:                           1 (current)
</span></span><span class="line"><span class="cl">  OS/ABI:                            UNIX - System V
</span></span><span class="line"><span class="cl">  ABI Version:                       0
</span></span><span class="line"><span class="cl">  Type:                              DYN (Position-Independent Executable file)
</span></span><span class="line"><span class="cl">  Machine:                           Advanced Micro Devices X86-64
</span></span><span class="line"><span class="cl">  Version:                           0x1
</span></span><span class="line"><span class="cl">  Entry point address:               0x1050
</span></span><span class="line"><span class="cl">  Start of program headers:          64 (bytes into file)
</span></span><span class="line"><span class="cl">  Start of section headers:          13608 (bytes into file)
</span></span><span class="line"><span class="cl">  Flags:                             0x0
</span></span><span class="line"><span class="cl">  Size of this header:               64 (bytes)
</span></span><span class="line"><span class="cl">  Size of program headers:           56 (bytes)
</span></span><span class="line"><span class="cl">  Number of program headers:         13
</span></span><span class="line"><span class="cl">  Size of section headers:           64 (bytes)
</span></span><span class="line"><span class="cl">  Number of section headers:         30
</span></span><span class="line"><span class="cl">  Section header string table index: 29
</span></span></code></pre></div><p>Examining the output above, we can deduce a few key details.</p>
<ul>
<li>Firstly, the section headers take their grand entrance at a distance of <code>13608</code> bytes (<code>0x3528</code> in the mystical language of hex).</li>
<li>Each of these header entries is precisely <code>64</code> bytes in size (<code>0x40</code> in hex),</li>
<li>and in total, we&rsquo;ve got a flourishing population of <code>30</code> sections (<code>1e</code> in hex).</li>
</ul>
<p>So, it&rsquo;s like having a treasure map telling us exactly where to dig in the ELF file and how big the treasure chests are!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ xxd -s 13608 -l $(( 64*30 )) -c 64 hello_world
</span></span><span class="line"><span class="cl">00003528: 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">00003568: 1b00 0000 0100 0000 0200 0000 0000 0000 1803 0000 0000 0000 1803 0000 0000 0000 1c00 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">000035a8: 2300 0000 0700 0000 0200 0000 0000 0000 3803 0000 0000 0000 3803 0000 0000 0000 4000 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  #...............8.......8.......@...............................
</span></span><span class="line"><span class="cl">000035e8: 3600 0000 0700 0000 0200 0000 0000 0000 7803 0000 0000 0000 7803 0000 0000 0000 2400 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  6...............x.......x.......$...............................
</span></span><span class="line"><span class="cl">00003628: 4900 0000 0700 0000 0200 0000 0000 0000 9c03 0000 0000 0000 9c03 0000 0000 0000 2000 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  I............................... ...............................
</span></span><span class="line"><span class="cl">00003668: 5700 0000 f6ff ff6f 0200 0000 0000 0000 c003 0000 0000 0000 c003 0000 0000 0000 1c00 0000 0000 0000 0600 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  W......o........................................................
</span></span><span class="line"><span class="cl">000036a8: 6100 0000 0b00 0000 0200 0000 0000 0000 e003 0000 0000 0000 e003 0000 0000 0000 c000 0000 0000 0000 0700 0000 0100 0000 0800 0000 0000 0000 1800 0000 0000 0000  a...............................................................
</span></span><span class="line"><span class="cl">000036e8: 6900 0000 0300 0000 0200 0000 0000 0000 a004 0000 0000 0000 a004 0000 0000 0000 a800 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  i...............................................................
</span></span><span class="line"><span class="cl">00003728: 7100 0000 ffff ff6f 0200 0000 0000 0000 4805 0000 0000 0000 4805 0000 0000 0000 1000 0000 0000 0000 0600 0000 0000 0000 0200 0000 0000 0000 0200 0000 0000 0000  q......o........H.......H.......................................
</span></span><span class="line"><span class="cl">00003768: 7e00 0000 feff ff6f 0200 0000 0000 0000 5805 0000 0000 0000 5805 0000 0000 0000 4000 0000 0000 0000 0700 0000 0100 0000 0800 0000 0000 0000 0000 0000 0000 0000  ~......o........X.......X.......@...............................
</span></span><span class="line"><span class="cl">000037a8: 8d00 0000 0400 0000 0200 0000 0000 0000 9805 0000 0000 0000 9805 0000 0000 0000 c000 0000 0000 0000 0600 0000 0000 0000 0800 0000 0000 0000 1800 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">000037e8: 9700 0000 0400 0000 4200 0000 0000 0000 5806 0000 0000 0000 5806 0000 0000 0000 3000 0000 0000 0000 0600 0000 1700 0000 0800 0000 0000 0000 1800 0000 0000 0000  ........B.......X.......X.......0...............................
</span></span><span class="line"><span class="cl">00003828: a100 0000 0100 0000 0600 0000 0000 0000 0010 0000 0000 0000 0010 0000 0000 0000 1b00 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">00003868: 9c00 0000 0100 0000 0600 0000 0000 0000 2010 0000 0000 0000 2010 0000 0000 0000 3000 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 1000 0000 0000 0000  ................ ....... .......0...............................
</span></span><span class="line"><span class="cl">000038a8: a700 0000 0100 0000 0600 0000 0000 0000 5010 0000 0000 0000 5010 0000 0000 0000 7101 0000 0000 0000 0000 0000 0000 0000 1000 0000 0000 0000 0000 0000 0000 0000  ................P.......P.......q...............................
</span></span><span class="line"><span class="cl">000038e8: ad00 0000 0100 0000 0600 0000 0000 0000 c411 0000 0000 0000 c411 0000 0000 0000 0d00 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................................................................
</span></span><span class="line"><span class="cl">00003928: b300 0000 0100 0000 0200 0000 0000 0000 0020 0000 0000 0000 0020 0000 0000 0000 1100 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................. ....... ......................................
</span></span><span class="line"><span class="cl">00003968: bb00 0000 0100 0000 0200 0000 0000 0000 1420 0000 0000 0000 1420 0000 0000 0000 2400 0000 0000 0000 0000 0000 0000 0000 0400 0000 0000 0000 0000 0000 0000 0000  ................. ....... ......$...............................
</span></span><span class="line"><span class="cl">000039a8: c900 0000 0100 0000 0200 0000 0000 0000 3820 0000 0000 0000 3820 0000 0000 0000 7c00 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  ................8 ......8 ......|...............................
</span></span><span class="line"><span class="cl">000039e8: d300 0000 0e00 0000 0300 0000 0000 0000 d03d 0000 0000 0000 d02d 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................=.......-......................................
</span></span><span class="line"><span class="cl">00003a28: df00 0000 0f00 0000 0300 0000 0000 0000 d83d 0000 0000 0000 d82d 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................=.......-......................................
</span></span><span class="line"><span class="cl">00003a68: eb00 0000 0600 0000 0300 0000 0000 0000 e03d 0000 0000 0000 e02d 0000 0000 0000 e001 0000 0000 0000 0700 0000 0000 0000 0800 0000 0000 0000 1000 0000 0000 0000  .................=.......-......................................
</span></span><span class="line"><span class="cl">00003aa8: f400 0000 0100 0000 0300 0000 0000 0000 c03f 0000 0000 0000 c02f 0000 0000 0000 2800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................?......./......(...............................
</span></span><span class="line"><span class="cl">00003ae8: f900 0000 0100 0000 0300 0000 0000 0000 e83f 0000 0000 0000 e82f 0000 0000 0000 2800 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0800 0000 0000 0000  .................?......./......(...............................
</span></span><span class="line"><span class="cl">00003b28: 0201 0000 0100 0000 0300 0000 0000 0000 1040 0000 0000 0000 1030 0000 0000 0000 1d00 0000 0000 0000 0000 0000 0000 0000 0800 0000 0000 0000 0000 0000 0000 0000  .................@.......0......................................
</span></span><span class="line"><span class="cl">00003b68: 0801 0000 0800 0000 0300 0000 0000 0000 2d40 0000 0000 0000 2d30 0000 0000 0000 0300 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  ................-@......-0......................................
</span></span><span class="line"><span class="cl">00003ba8: 0d01 0000 0100 0000 3000 0000 0000 0000 0000 0000 0000 0000 2d30 0000 0000 0000 1b00 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0100 0000 0000 0000  ........0...............-0......................................
</span></span><span class="line"><span class="cl">00003be8: 0100 0000 0200 0000 0000 0000 0000 0000 0000 0000 0000 0000 4830 0000 0000 0000 7002 0000 0000 0000 1c00 0000 0600 0000 0800 0000 0000 0000 1800 0000 0000 0000  ........................H0......p...............................
</span></span><span class="line"><span class="cl">00003c28: 0900 0000 0300 0000 0000 0000 0000 0000 0000 0000 0000 0000 b832 0000 0000 0000 5301 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  .........................2......S...............................
</span></span><span class="line"><span class="cl">00003c68: 1100 0000 0300 0000 0000 0000 0000 0000 0000 0000 0000 0000 0b34 0000 0000 0000 1601 0000 0000 0000 0000 0000 0000 0000 0100 0000 0000 0000 0000 0000 0000 0000  .........................4......................................
</span></span></code></pre></div><p>With each line presenting itself as a section header entry, it&rsquo;s like experiencing an elegant and straightforward design! Now we just have to map each of these lines to <code>Elf64_Shdr</code> (since we have a 64Bit file)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/*
</span></span><span class="line"><span class="cl">https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/elf.h#L321
</span></span><span class="line"><span class="cl">*/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">typedef struct elf64_shdr {
</span></span><span class="line"><span class="cl">  Elf64_Word sh_name;		/* Section name, index in string tbl    # 4 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Word sh_type;		/* Type of section                      # 4 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Xword sh_flags;		/* Miscellaneous section attributes   # 8 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Addr sh_addr;		/* Section virtual addr at execution    # 8 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Off sh_offset;		/* Section file offset                # 8 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Xword sh_size;		/* Size of section in bytes           # 8 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Word sh_link;		/* Index of another section             # 4 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Word sh_info;		/* Additional section information       # 4 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Xword sh_addralign;	/* Section alignment                # 8 bytes */
</span></span><span class="line"><span class="cl">  Elf64_Xword sh_entsize;	/* Entry size if section holds table  # 8 bytes */
</span></span><span class="line"><span class="cl">} Elf64_Shdr;
</span></span></code></pre></div><p>But first, understand why we are doing any of this&hellip;</p>
<h2 id="section-headers">Section headers</h2>
<p>Imagine a <a href="https://www.lego.com/en-us/product/lego-dc-batman-batmobile-tumbler-76240">LEGO batmobile</a> – it&rsquo;s not just one big block, right? It has different parts, like a roof, doors, wheels, etc. <strong>ELF sections</strong> (not section headers) are like these parts in a computer program. Each section has its own job, some sections hold the variables, some hold the program instructions, while some just hold extra notes. Basically, each section has some data in it and has a specific role for that data.</p>
<p>Section headers is like a index for those sections. It tells you a good amount of details about the section, like</p>
<ul>
<li>Name of the section (indirectly :P),</li>
<li>Type of section,</li>
<li>Offset of the address in file and memory,</li>
<li>Size of the section in bytes, etc</li>
</ul>
<p>Now you know what section headers are and the valuable data they contain, and with the ELF file headers acting as our treasure map, directing us to the precise location of the section headers in the file (<code>e_shoff</code>), detailing their entry size (<code>e_shentsize</code>) and counting their entries (<code>e_shnum</code>).</p>
<p>I&rsquo;ve also whipped up a nifty little parser, just for the occasion. It&rsquo;s designed to gracefully dissect an ELF file and lay out the section headers in a more digestible and user-friendly fashion. No more cryptic <code>hexdumps</code> or <code>xxd</code> outputs for us!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ + ] Section headers begins at: 0x34b8
</span></span><span class="line"><span class="cl"> [ 00 ] Section Name:                            Type: 0x0       Flags: 0x0      Addr: 0x0       Offset: 0x0             Size: 0         Link: 0         Info: 0x0       Addralign: 0x0          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 01 ] Section Name: .interp                    Type: 0x1       Flags: 0x2      Addr: 0x318     Offset: 0x318           Size: 28        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 02 ] Section Name: .note.gnu.property         Type: 0x7       Flags: 0x2      Addr: 0x338     Offset: 0x338           Size: 64        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 03 ] Section Name: .note.gnu.build-id         Type: 0x7       Flags: 0x2      Addr: 0x378     Offset: 0x378           Size: 36        Link: 0         Info: 0x0       Addralign: 0x4          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 04 ] Section Name: .note.ABI-tag              Type: 0x7       Flags: 0x2      Addr: 0x39c     Offset: 0x39c           Size: 32        Link: 0         Info: 0x0       Addralign: 0x4          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 05 ] Section Name: .gnu.hash                  Type: 0xfff6    Flags: 0x2      Addr: 0x3c0     Offset: 0x3c0           Size: 28        Link: 6         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 06 ] Section Name: .dynsym                    Type: 0xb       Flags: 0x2      Addr: 0x3e0     Offset: 0x3e0           Size: 168       Link: 7         Info: 0x1       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl"> [ 07 ] Section Name: .dynstr                    Type: 0x3       Flags: 0x2      Addr: 0x488     Offset: 0x488           Size: 144       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 08 ] Section Name: .gnu.version               Type: 0xffff    Flags: 0x2      Addr: 0x518     Offset: 0x518           Size: 14        Link: 6         Info: 0x0       Addralign: 0x2          Entsize: 2
</span></span><span class="line"><span class="cl"> [ 09 ] Section Name: .gnu.version_r             Type: 0xfffe    Flags: 0x2      Addr: 0x528     Offset: 0x528           Size: 48        Link: 7         Info: 0x1       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 10 ] Section Name: .rela.dyn                  Type: 0x4       Flags: 0x2      Addr: 0x558     Offset: 0x558           Size: 192       Link: 6         Info: 0x0       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl"> [ 11 ] Section Name: .rela.plt                  Type: 0x4       Flags: 0x42     Addr: 0x618     Offset: 0x618           Size: 24        Link: 6         Info: 0x17      Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl"> [ 12 ] Section Name: .init                      Type: 0x1       Flags: 0x6      Addr: 0x1000    Offset: 0x1000          Size: 27        Link: 0         Info: 0x0       Addralign: 0x4          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 13 ] Section Name: .plt                       Type: 0x1       Flags: 0x6      Addr: 0x1020    Offset: 0x1020          Size: 32        Link: 0         Info: 0x0       Addralign: 0x10         Entsize: 16
</span></span><span class="line"><span class="cl"> [ 14 ] Section Name: .text                      Type: 0x1       Flags: 0x6      Addr: 0x1040    Offset: 0x1040          Size: 315       Link: 0         Info: 0x0       Addralign: 0x10         Entsize: 0
</span></span><span class="line"><span class="cl"> [ 15 ] Section Name: .fini                      Type: 0x1       Flags: 0x6      Addr: 0x117c    Offset: 0x117c          Size: 13        Link: 0         Info: 0x0       Addralign: 0x4          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 16 ] Section Name: .rodata                    Type: 0x1       Flags: 0x2      Addr: 0x2000    Offset: 0x2000          Size: 18        Link: 0         Info: 0x0       Addralign: 0x4          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 17 ] Section Name: .eh_frame_hdr              Type: 0x1       Flags: 0x2      Addr: 0x2014    Offset: 0x2014          Size: 36        Link: 0         Info: 0x0       Addralign: 0x4          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 18 ] Section Name: .eh_frame                  Type: 0x1       Flags: 0x2      Addr: 0x2038    Offset: 0x2038          Size: 124       Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 19 ] Section Name: .init_array                Type: 0xe       Flags: 0x3      Addr: 0x3dd0    Offset: 0x2dd0          Size: 8         Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 8
</span></span><span class="line"><span class="cl"> [ 20 ] Section Name: .fini_array                Type: 0xf       Flags: 0x3      Addr: 0x3dd8    Offset: 0x2dd8          Size: 8         Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 8
</span></span><span class="line"><span class="cl"> [ 21 ] Section Name: .dynamic                   Type: 0x6       Flags: 0x3      Addr: 0x3de0    Offset: 0x2de0          Size: 480       Link: 7         Info: 0x0       Addralign: 0x8          Entsize: 16
</span></span><span class="line"><span class="cl"> [ 22 ] Section Name: .got                       Type: 0x1       Flags: 0x3      Addr: 0x3fc0    Offset: 0x2fc0          Size: 40        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 8
</span></span><span class="line"><span class="cl"> [ 23 ] Section Name: .got.plt                   Type: 0x1       Flags: 0x3      Addr: 0x3fe8    Offset: 0x2fe8          Size: 32        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 8
</span></span><span class="line"><span class="cl"> [ 24 ] Section Name: .data                      Type: 0x1       Flags: 0x3      Addr: 0x4008    Offset: 0x3008          Size: 16        Link: 0         Info: 0x0       Addralign: 0x8          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 25 ] Section Name: .bss                       Type: 0x8       Flags: 0x3      Addr: 0x4018    Offset: 0x3018          Size: 8         Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 26 ] Section Name: .comment                   Type: 0x1       Flags: 0x30     Addr: 0x0       Offset: 0x3018          Size: 27        Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 1
</span></span><span class="line"><span class="cl"> [ 27 ] Section Name: .symtab                    Type: 0x2       Flags: 0x0      Addr: 0x0       Offset: 0x3038          Size: 576       Link: 28        Info: 0x6       Addralign: 0x8          Entsize: 24
</span></span><span class="line"><span class="cl"> [ 28 ] Section Name: .strtab                    Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x3278          Size: 298       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span><span class="line"><span class="cl"> [ 29 ] Section Name: .shstrtab                  Type: 0x3       Flags: 0x0      Addr: 0x0       Offset: 0x33a2          Size: 278       Link: 0         Info: 0x0       Addralign: 0x1          Entsize: 0
</span></span></code></pre></div><p>Here&rsquo;s a sneak peek at what my trusty parser churned out, for your reference. (If you fancy, you can even pit it against the <code>xxd</code> results we saw earlier).</p>
<p>Now, it&rsquo;s time to take a deep dive into the inner workings of the <code>Elf64_Shdr</code> struct</p>
<h3 id="1-sh_name">1. sh_name</h3>
<p>As I mentioned earlier, among so many sections of an ELF file, there&rsquo;s one special place known as the string table. In this mystical realm, the names of all sections are held in a null-terminated fashion, creating a seamless string of section names. Now, the <code>sh_name</code> member, well, it&rsquo;s like a treasure map, pinpointing the exact <strong>offset</strong> within that section. So, if, for instance, <code>.interp</code> resides at <code>X1</code> bytes within the section, and this section itself is tucked away at <code>Y1</code> bytes into the file, the location of this string can be calculated as simply <code>X1 + Y1</code> bytes into the file. But, for the sake of simplicity, <code>sh_name</code> keeps things straightforward by storing just the <code>X1</code> value, and nothing more. To track down the section&rsquo;s exact location, we can rely on the trusty <code>e_shstrndx</code> value from the ELF file header.</p>
<p>From programming point of view, accessing the string value for section name will look something like -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)(</span><span class="n">shdr</span><span class="p">[</span><span class="n">ehdr</span><span class="o">-&gt;</span><span class="n">e_shstrndx</span><span class="p">].</span><span class="n">sh_offset</span> <span class="o">+</span> <span class="n">shdr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">sh_name</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="2-sh_type">2. sh_type</h3>
<p>This section serves as a delightful teaser, offering a glimpse of the treasures awaiting inside the section itself. Take, for instance, <code>SHT_STRTAB</code> (0x3), a section that houses a collection of null-terminated strings, just waiting to be discovered.</p>
<p>When we journey into the Linux kernel, we encounter a bunch of defined section header types -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.8/source/include/uapi/linux/elf.h#L271
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* sh_type */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define SHT_NULL      0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_PROGBITS  1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_SYMTAB    2
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_STRTAB    3
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_RELA      4
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_HASH      5
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_DYNAMIC   6
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_NOTE      7
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_NOBITS    8
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_REL       9
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_SHLIB     10
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_DYNSYM    11
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_NUM       12
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_LOPROC    0x70000000
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_HIPROC    0x7fffffff
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_LOUSER    0x80000000
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHT_HIUSER    0xffffffff
</span></span></span></code></pre></div><h3 id="3-sh_flags">3. sh_flags</h3>
<p>This is a one-bit flag, that decides whether a specific feature applies to the given section or not&hellip;
Linux kernel has some flag types defined -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.8/source/include/uapi/linux/elf.h#L290
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* sh_flags */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define SHF_WRIT            0x1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHF_ALLOC           0x2
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHF_EXECINSTR       0x4
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHF_RELA_LIVEPATCH  0x00100000
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHF_RO_AFTER_INIT   0x00200000
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SHF_MASKPROC        0xf0000000
</span></span></span></code></pre></div><p>Playing the guessing game? Well, if you spot a section like <code>.text</code> with a type value of <code>0x6</code>, it&rsquo;s a hint at what&rsquo;s to come. This section will be allocated a space in memory at runtime, with permission to execute instructions, but don&rsquo;t even think about writing anything to it after the section is loaded.</p>
<h3 id="4-sh_addr">4. sh_addr</h3>
<p>Now, if the section is destined for memory, this member plays a pivotal role, holding the keys to the memory kingdom, designating the precise spot where the section lands. But here&rsquo;s a twist – for sections with no memory aspirations, this value becomes a mere placeholder, leaving a little room for some extra, secret bytes. <em>(wink, wink)</em></p>
<h3 id="5-sh_offset">5. sh_offset</h3>
<p>Here&rsquo;s the catch: while <code>sh_addr</code> spills the beans on the section&rsquo;s memory location, this member focuses on the section&rsquo;s spot in the file. It&rsquo;s like knowing where the script lies before the performance. However, some sections, like the enigmatic <code>SHT_NOBITS</code>, are a bit of a puzzle – they claim a spot in the file, but when you try to read data from their supposed location, it&rsquo;s like chasing a ghost; there&rsquo;s nothing substantial to be found. (that is, they don&rsquo;t take any space in file; like a classic &ldquo;all bark, no bite&rdquo; scenario)</p>
<p>(<strong>HINT</strong>: Look at offsets and size of <code>.bss</code> and <code>.comment</code> sections from above listing. <code>.bss</code> is a <code>SHT_NOBITS</code> kind of section.)</p>
<h3 id="6-sh_size">6. sh_size</h3>
<p>For sections that aren&rsquo;t the enigmatic <code>SHT_NOBITS</code> type, this value is a trustworthy measure, mapping out the precise size (in bytes) of the section within the file. For <code>SHT_NOBITS</code>, it&rsquo;s a bit of a riddle. While it claims to reveal a section&rsquo;s size in bytes, be warned that when you glance at the size of a <code>.bss</code> section and it does says <code>8</code> bytes. But again, since there is nothing in the file, it&rsquo;s more of a conceptual size for this type.</p>
<h3 id="7-sh_link">7. sh_link</h3>
<p>This member is used to link a section with another section. One of the use for such kind of linking is to signify some sort of dependency of one section on another. But the actual nature of linking depends on the section type.</p>
<p>(HINT: Checkout <code>.gnu_hash</code>, <code>.dynsym</code>, and <code>dynstr</code> sections)</p>
<h3 id="8-sh_info">8. sh_info</h3>
<p>Think of this member as the mysterious vault, holding extra information that&rsquo;s tailor-made for the section&rsquo;s needs. However, the contents of this vault are shapeshifters, and what you&rsquo;ll find inside depends entirely on the section&rsquo;s unique personality and type.</p>
<h3 id="9-sh_addralign">9. sh_addralign</h3>
<p>This member holds the alignment information. When it takes on the humble value of <code>0</code> or <code>1</code>, it&rsquo;s like saying, &ldquo;No alignment required.&rdquo; But when it strides into the realm of positive powers of <code>2</code>, it becomes the architect of alignment, ensuring that the section is perfectly orchestrated for maximum efficiency.</p>
<p><em>Alignment is the unsung hero in the world of efficient computing. It&rsquo;s the magic behind how smoothly a computer can access and manipulate data or instructions.</em></p>
<h3 id="10-sh_entsize">10. sh_entsize</h3>
<p>Picture it: there are sections that harbor orderly tables with entries of a fixed size. Now, this member is your trusted guide, revealing the size of each entry in bytes. To find the grand total of entries, you simply divide the section&rsquo;s size by the size of each entry, just like a mathematical maestro.</p>
<p>(NOTE: You can read more about ELF sections and each member of section headers from <a href="https://linux.die.net/man/5/elf"><code>man 5 elf</code></a>; RTFM)</p>
<h2 id="practicals">Practicals</h2>
<p>For now, let&rsquo;s just start with what does <code>strip</code> command do to ELF sections. And research on why section headers are actually important.</p>
<p>If you are more inclined towards being tech savvy, try to write a program to parse and display the section headers.</p>
<p>To go an extra mile, add a new section to your ELF file (also add it&rsquo;s entry in section headers)&hellip;</p>
<p>Here are some links that might give you a starting point.</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1088128/adding-section-to-elf-file">https://stackoverflow.com/questions/1088128/adding-section-to-elf-file</a></li>
<li><a href="https://reverseengineering.stackexchange.com/questions/14779/how-to-successfully-add-a-code-section-to-an-executable-file-in-linux">https://reverseengineering.stackexchange.com/questions/14779/how-to-successfully-add-a-code-section-to-an-executable-file-in-linux</a></li>
<li><a href="https://stackoverflow.com/questions/29058016/efficiently-adding-a-new-section-in-an-elf-file">https://stackoverflow.com/questions/29058016/efficiently-adding-a-new-section-in-an-elf-file</a></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Alright, buckle up, because we&rsquo;ve just taken a deep dive into the wild world of ELF section headers! Picture this -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   ┌───────────────────────────┐
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │      File Header          │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │     Program Header        │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │      Section 1            │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │      Section 2            │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │      Section 3            │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │      Section 4            │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │      Section 5            │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │     Section 6             │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   ├───────────────────────────┤
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │     Section Header        │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   │                           │
</span></span><span class="line"><span class="cl">   └───────────────────────────┘
</span></span></code></pre></div><p>Think of sections as pieces of a puzzle, each unique in size and placed at different offsets within the file. But fear not, for the section headers play the role of meticulous architects, documenting these diverse sections&rsquo; whereabouts and characteristics. They&rsquo;re the cool blueprints that grant us insight into the entire file&rsquo;s layout and functionality.</p>
]]></content:encoded>
    </item>
    <item>
      <title>ELF Chronicles: ELF file Header (1/?)</title>
      <link>https://ayedaemon.github.io/post/2023/10/elf-chronicles-elf-header/</link>
      <pubDate>Wed, 18 Oct 2023 13:34:57 +0530</pubDate>
      <guid>https://ayedaemon.github.io/post/2023/10/elf-chronicles-elf-header/</guid>
      <description>Exploring ELF file headers</description>
      <content:encoded><![CDATA[<h2 id="hexdumps">Hexdumps</h2>
<p>In the fascinating world of computers, we&rsquo;re stuck conversing in binary, a rather dull language of just <em>ones</em> and <em>zeros</em>. But because we <em>mere</em> humans love things to be a tad more exciting and concise, we&rsquo;ve come up with our own nifty number system - &ldquo;<code>hexadecimal</code>&rdquo; or &ldquo;<code>hex</code>&rdquo; for short. This system ditches the binary bore and adds a touch of flair with 16 snazzy symbols. It&rsquo;s got your usual digits from <code>0 to 9</code>, plus those fancy <code>A to F</code> letters to make data a bit more, well, <em>hexadecimal-chic</em>!</p>
<p>Now, let&rsquo;s take a gander at this binary enigma, a message that only the most extraordinary folks can decipher with ease:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">011010000110010101101100011011000110111100001010
</span></span></code></pre></div><p>For us ordinary humans, this is a bit like deciphering alien hieroglyphics. So, we follow a procedure to unravel the secrets hidden within.</p>
<p>Step one involves breaking down the binary data into byte-sized chunks, each containing 8 bits:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">01101000 01100101 01101100 01101100 01101111 00001010
</span></span></code></pre></div><p>Now, we embark on the magical journey of converting each chunk into its hexadecimal form. The legendary figures of the past might have used pen and paper, but in our tech-savvy era, we turn to tools like <a href="https://cyberchef.org/#recipe=From_Binary('Space',8)To_Hex('Space',0)&amp;input=MDExMDEwMDAgMDExMDAxMDEgMDExMDExMDAgMDExMDExMDAgMDExMDExMTEgMDAwMDEwMTA">CyberChef</a>.</p>
<p>No matter your chosen method, the results remains the same:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">68 65 6c 6c 6f 0a
</span></span></code></pre></div><p>The binary code&rsquo;s cryptic riddle got a facelift, and voilà! We now have this friendly hexadecimal version. It&rsquo;s just what the doctor ordered for us humans to have a casual chat with the binary data, no sweat!</p>
<h2 id="from-code-to-binary">From Code to Binary</h2>
<p>Lets&rsquo;s go on a journey that turns elegant C code into a mysterious binary blob, a language of ones and zeros that only computers understand. (** <em>coughs compilation</em> **)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* file: hello_world.c */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A macro
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define HELLO_MSG1 &#34;Hello World1&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A global variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span> <span class="n">HELLO_MSG2</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World2&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// main function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// local variable for main
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">HELLO_MSG3</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello World3&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Print messages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">HELLO_MSG3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>After compiling the above C code we get an ELF (Executable and Linkable Format) file. (Compilation command - <code>gcc hello_world.c -o hello_world</code>)</p>
<p>This generated file, at its core, is nothing more than a delightful binary blob. It&rsquo;s the computer&rsquo;s secret handshake, speaking directly in ones and zeros, no pleasantries. And the icing on the cake is that we <em>mere</em> humans, with our clever programming prowess, can craft tools to translate this binary jargon into friendly hexadecimal, or we can simply cozy up to good ol&rsquo; <code>hexdump</code> and <code>xxd</code> for the job. Whichever suits your fancy, we&rsquo;ve got options!</p>
<h2 id="elf-header">ELF Header</h2>
<p>Here&rsquo;s a snapshot of the first 64 bytes in the compiled binary file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># In binary representation
</span></span><span class="line"><span class="cl">❯ xxd -b -l 64 ./hello_world
</span></span><span class="line"><span class="cl">00000000: 01111111 01000101 01001100 01000110 00000010 00000001  .ELF..
</span></span><span class="line"><span class="cl">00000006: 00000001 00000000 00000000 00000000 00000000 00000000  ......
</span></span><span class="line"><span class="cl">0000000c: 00000000 00000000 00000000 00000000 00000011 00000000  ......
</span></span><span class="line"><span class="cl">00000012: 00111110 00000000 00000001 00000000 00000000 00000000  &gt;.....
</span></span><span class="line"><span class="cl">00000018: 01010000 00010000 00000000 00000000 00000000 00000000  P.....
</span></span><span class="line"><span class="cl">0000001e: 00000000 00000000 01000000 00000000 00000000 00000000  ..@...
</span></span><span class="line"><span class="cl">00000024: 00000000 00000000 00000000 00000000 00101000 00110101  ....(5
</span></span><span class="line"><span class="cl">0000002a: 00000000 00000000 00000000 00000000 00000000 00000000  ......
</span></span><span class="line"><span class="cl">00000030: 00000000 00000000 00000000 00000000 01000000 00000000  ....@.
</span></span><span class="line"><span class="cl">00000036: 00111000 00000000 00001101 00000000 01000000 00000000  8...@.
</span></span><span class="line"><span class="cl">0000003c: 00011110 00000000 00011101 00000000                    ....
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># In hex representation
</span></span><span class="line"><span class="cl">❯ xxd -l 64 ./hello_world
</span></span><span class="line"><span class="cl">00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
</span></span><span class="line"><span class="cl">00000010: 0300 3e00 0100 0000 5010 0000 0000 0000  ..&gt;.....P.......
</span></span><span class="line"><span class="cl">00000020: 4000 0000 0000 0000 2835 0000 0000 0000  @.......(5......
</span></span><span class="line"><span class="cl">00000030: 0000 0000 4000 3800 0d00 4000 1e00 1d00  ....@.8...@.....
</span></span></code></pre></div><p>Now, you may wonder, what on earth does this mean? Well, these intriguing bytes are like puzzle pieces, and depending on the machine type, they map to specific structures in the Linux kernel. Our quest, quite simply, is to unravel this digital enigma and shed light on the code&rsquo;s purpose.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.7/source/include/uapi/linux/elf.h#L207
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define EI_NIDENT	16
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">elf32_hdr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span>	<span class="n">e_ident</span><span class="p">[</span><span class="n">EI_NIDENT</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_machine</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Word</span>	<span class="n">e_version</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Addr</span>	<span class="n">e_entry</span><span class="p">;</span>  <span class="cm">/* Entry point */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Off</span>	    <span class="n">e_phoff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Off</span>	    <span class="n">e_shoff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Word</span>	<span class="n">e_flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_ehsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_phentsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_phnum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_shentsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_shnum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf32_Half</span>	<span class="n">e_shstrndx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf32_Ehdr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">elf64_hdr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">char</span>	<span class="n">e_ident</span><span class="p">[</span><span class="n">EI_NIDENT</span><span class="p">];</span>	<span class="cm">/* ELF &#34;magic number&#34; */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_machine</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>    <span class="n">e_version</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Addr</span>    <span class="n">e_entry</span><span class="p">;</span>		<span class="cm">/* Entry point virtual address */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Off</span>     <span class="n">e_phoff</span><span class="p">;</span>		<span class="cm">/* Program header table file offset */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Off</span>     <span class="n">e_shoff</span><span class="p">;</span>		<span class="cm">/* Section header table file offset */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Word</span>    <span class="n">e_flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_ehsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_phentsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_phnum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_shentsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_shnum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">Elf64_Half</span>    <span class="n">e_shstrndx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Elf64_Ehdr</span><span class="p">;</span>
</span></span></code></pre></div><p>Since I&rsquo;m on a 64 bit system, I&rsquo;ll use <code>Elf64_Ehdr</code> to show what each byte in the above data chunk represents.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ xxd -l 64 ./hello_world
</span></span><span class="line"><span class="cl">00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
</span></span><span class="line"><span class="cl">00000010: 0300 3e00 0100 0000 5010 0000 0000 0000  ..&gt;.....P.......
</span></span><span class="line"><span class="cl">00000020: 4000 0000 0000 0000 2835 0000 0000 0000  @.......(5......
</span></span><span class="line"><span class="cl">00000030: 0000 0000 4000 3800 0d00 4000 1e00 1d00  ....@.8...@.....
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// After mapping the linux ELF struct to the above data
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">e_ident[16] = 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">e_type      = 03 00
</span></span><span class="line"><span class="cl">e_machine   = 3e 00
</span></span><span class="line"><span class="cl">e_version   = 01 00 00 00
</span></span><span class="line"><span class="cl">e_entry     = 50 10 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">e_phoff     = 40 00 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">e_shoff     = 28 35 00 00 00 00 00 00
</span></span><span class="line"><span class="cl">e_flags     = 00 00 00 00
</span></span><span class="line"><span class="cl">e_ehsize    = 40 00
</span></span><span class="line"><span class="cl">e_phentsize = 38 00
</span></span><span class="line"><span class="cl">e_phnum     = 0d 00
</span></span><span class="line"><span class="cl">e_shentsize = 40 00
</span></span><span class="line"><span class="cl">e_shnum     = 1e 00
</span></span><span class="line"><span class="cl">e_shstrndx  = 1d 00
</span></span></code></pre></div><p>Shall we dissect each of these mysterious members in the struct?</p>
<p><img loading="lazy" src="https://media.giphy.com/media/QaNQJZhjd2QrDUBNcg/giphy.gif#center" alt=""  />
</p>
<h3 id="1-e_identei_nident">1. <strong>e_ident[EI_NIDENT]</strong></h3>
<p>The first 16 bytes of the ELF header are collectively referred to as the &ldquo;ident&rdquo; or &ldquo;identification&rdquo; field. It includes a magic number and various identification information. Here is a table that tells more about what all identification information is present in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">e_ident[16] = 7f45 4c46 0201 0100 0000 0000 0000 0000
</span></span><span class="line"><span class="cl">    EI_MAG0 = 7f
</span></span><span class="line"><span class="cl">    EI_MAG1 = 45 (E)
</span></span><span class="line"><span class="cl">    EI_MAG2 = 4c (L)
</span></span><span class="line"><span class="cl">    EI_MAG3 = 46 (F)
</span></span><span class="line"><span class="cl">    EI_CLASS = 02
</span></span><span class="line"><span class="cl">    EI_DATA = 01
</span></span><span class="line"><span class="cl">    EI_VERSION = 01
</span></span><span class="line"><span class="cl">    EI_OSABI = 00
</span></span><span class="line"><span class="cl">    EI_ABIVERSION = 00
</span></span><span class="line"><span class="cl">    EI_PAD = 00 0000 0000 0000
</span></span></code></pre></div><p>Ah, you might wonder, &ldquo;How on earth do I know this?&rdquo; Well, my friend, it&rsquo;s a detective game we play, and our magnifying glass is the kernel source code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/*
</span></span><span class="line"><span class="cl">https://elixir.bootlin.com/linux/v6.5.7/source/include/uapi/linux/elf.h#L334
</span></span><span class="line"><span class="cl">*/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#define	EI_MAG0		0		/* e_ident[] indexes */
</span></span><span class="line"><span class="cl">#define	EI_MAG1		1
</span></span><span class="line"><span class="cl">#define	EI_MAG2		2
</span></span><span class="line"><span class="cl">#define	EI_MAG3		3
</span></span><span class="line"><span class="cl">#define	EI_CLASS	4       /* 1=32Bit; 2=64Bit */
</span></span><span class="line"><span class="cl">#define	EI_DATA		5       /* Endianness ==&gt; 1=Little; 2=Big */
</span></span><span class="line"><span class="cl">#define	EI_VERSION	6       /* ELF header version */
</span></span><span class="line"><span class="cl">#define	EI_OSABI	7       /* OS ABI ==&gt; 0=None(same as SysV); 3=Linux */
</span></span><span class="line"><span class="cl">#define	EI_PAD		8       /* Starting of padding - currently unused */
</span></span></code></pre></div><p><strong>==&gt;</strong> This information tells me that my ELF binary is a <code>64-Bit</code> (EI_CLASS = 02), <code>Little</code> endian (EI_DATA = 01) binary.</p>
<h3 id="2-e_type">2. <strong>e_type</strong></h3>
<p>This member tells what type of ELF file it is.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/*
</span></span><span class="line"><span class="cl">https://elixir.bootlin.com/linux/v6.5.7/source/include/uapi/linux/elf.h#L69
</span></span><span class="line"><span class="cl">*/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#define ET_NONE   0         // No file type
</span></span><span class="line"><span class="cl">#define ET_REL    1
</span></span><span class="line"><span class="cl">#define ET_EXEC   2
</span></span><span class="line"><span class="cl">#define ET_DYN    3
</span></span><span class="line"><span class="cl">#define ET_CORE   4
</span></span><span class="line"><span class="cl">#define ET_LOPROC 0xff00    // Processor-specific
</span></span><span class="line"><span class="cl">#define ET_HIPROC 0xffff    // Processor-specific
</span></span></code></pre></div><p>Since my binary is little endian, <code>e_type = 03 00</code> should be read as <code>e_type = 00 03</code>. That tells me that I&rsquo;ve a <code>ET_DYN</code> type of file.</p>
<h3 id="3-e_machine">3. <strong>e_machine</strong></h3>
<p>This member tells us about the target architecture for the file. In linux kernel uapi, there is <a href="https://elixir.bootlin.com/linux/v6.5.7/source/include/uapi/linux/elf-em.h">a complete header file dedicated for target machines</a>.</p>
<p>For my binary file, machine type is <code>3e</code> (e_machine = <em>3e 00</em>; Should be read as <em>00 3e</em>).</p>
<p><em>(Integer representation of <code>3e</code> is <code>62</code>)</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/*
</span></span><span class="line"><span class="cl">https://elixir.bootlin.com/linux/v6.5.7/source/include/uapi/linux/elf-em.h#L31
</span></span><span class="line"><span class="cl">*/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#define EM_X86_64	62	/* AMD x86-64 */
</span></span></code></pre></div><h3 id="4-e_version">4. <strong>e_version</strong></h3>
<p>This member specifies the version of the ELF file. This is different from the <code>EI_VERSION</code> which tells only about the ELF header version.</p>
<p>For my binary file, version is <code>1</code> (remember, to convert the value to little endian)</p>
<p>These are the versions defined in linux kernel uapi header</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#define EV_NONE		0		/* e_version, EI_VERSION */
</span></span><span class="line"><span class="cl">#define EV_CURRENT	1
</span></span><span class="line"><span class="cl">#define EV_NUM		2
</span></span></code></pre></div><h3 id="5-e_entry">5. <strong>e_entry</strong></h3>
<p>This member is quite interesting. This tells about the virtual/memory address where program execution begins. This is the starting point of the program.</p>
<p>You might think, &ldquo;Aha, this must always point to the <code>main()</code> function!&rdquo; Well, here&rsquo;s a plot twist for you!</p>
<p>For my binary file, the entry point is <code>1050</code> (e_entry = 50 10 00 00 00 00 00 00).</p>
<p>According to our trusty <code>objdump</code>, this value does not point to the <code>main</code> function but points to the <code>_start</code> function. <em>(..which in turn executes the <code>main</code> function. Here is <a href="https://ayedaemon.github.io/post/2022/01/debugging-c-code/#the-whole-picture">an article</a> that explains this.)</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ objdump  -D --disassembler-options=intel hello_world | grep -i &#34;1050&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0000000000001050 &lt;_start&gt;:
</span></span></code></pre></div><h3 id="6-e_phoff">6. <strong>e_phoff</strong></h3>
<p>This is the program header offset. The starting point in the ELF file where program headers can be found.</p>
<h3 id="7-e_shoff">7. <strong>e_shoff</strong></h3>
<p>Just like <code>e_phoff</code>, this member stores the offset of the section headers of the ELF file.</p>
<h3 id="8-e_flags">8. <strong>e_flags</strong></h3>
<p>This member provides processor-specific flags associated with the file.</p>
<h3 id="9-e_ehsize">9. <strong>e_ehsize</strong></h3>
<p>This member tells the size of the the ELF header. For my binary, value of this member is <code>40</code> (64 in decimal). Now you take a guess why I started analyzing first 64 bytes of the file.</p>
<h3 id="10-e_phentsize">10. <strong>e_phentsize</strong></h3>
<p>This is the size of each entry in program header.</p>
<h3 id="11-e_phnum">11. <strong>e_phnum</strong></h3>
<p>This is the count of entries in program header</p>
<h3 id="12-e_shentsize">12. <strong>e_shentsize</strong></h3>
<p>This is the size of each entry in section header.</p>
<h3 id="13-e_shnum">13. <strong>e_shnum</strong></h3>
<p>This is the count of entries in section header</p>
<h3 id="14-e_shstrndx">14. <strong>e_shstrndx</strong></h3>
<p>Now, this little guy is what we call the &ldquo;Section string index&rdquo;. This points to the index in section headers which holds all of the strings.</p>
<p><em>(We&rsquo;ll talk more about section headers and program headers in later articles.)</em></p>
<h2 id="practicals">Practicals</h2>
<h3 id="how-to-edit-a-binary-file">How to edit a binary file?</h3>
<p>If you think it through, you just need a program that can read/write binary data and convert that data to hex for us to view. You can build your own tool to do this or you can use other tools that can already do this.</p>
<p>I would like to propose my favorite - <code>vim</code> + <code>xxd</code></p>
<p>Here are the steps to it.</p>
<ul>
<li>Open the file in vim in binary mode (use <code>-b</code> flag)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vim -b argv_printer
</span></span></code></pre></div><ul>
<li>Pass the data to <code>xxd</code> (you can also use the additional flags that xxd supports)
<ul>
<li>Press <code>:</code> to go into commmand mode</li>
<li>then type <code>%!xxd -c 1</code> to pass the binary data through this command.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:%!xxd -c 1
</span></span></code></pre></div><ul>
<li>Edit the hex values you want (just like you would edit any other text file, press <code>i</code> and go on)</li>
<li>Reverse the hex to binary
<ul>
<li>Go to command mode again by pressing <code>:</code></li>
<li>then type <code>%!xxd -r</code></li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">:%!xxd -r
</span></span></code></pre></div><ul>
<li>Now save and quit the vim editor
<ul>
<li>If you don&rsquo;t know steps for that consider learning vim first</li>
<li>or, use another hex editor</li>
</ul>
</li>
</ul>
<h3 id="change-the-elf-magic-number">Change the ELF magic number</h3>
<ul>
<li>Open the file with vim and edit the <code>EI_MAG</code> part.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Before
</span></span><span class="line"><span class="cl">  00000000: 7f  .
</span></span><span class="line"><span class="cl">  00000001: 45  E
</span></span><span class="line"><span class="cl">  00000002: 4c  L
</span></span><span class="line"><span class="cl">  00000003: 46  F
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># After
</span></span><span class="line"><span class="cl">  00000000: 7f  .
</span></span><span class="line"><span class="cl">  00000001: 48  E
</span></span><span class="line"><span class="cl">  00000002: 45  L
</span></span><span class="line"><span class="cl">  00000003: 58  F
</span></span></code></pre></div><p><em>Note that I&rsquo;ve only changed the hex values and not the ascii values for it.</em></p>
<ul>
<li>revert the hex to binary data (<code>:%!xxd -r</code>)</li>
<li>write and quit vim (I&rsquo;m still not telling you the command)</li>
<li>analyze it</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ ./hello_world
</span></span><span class="line"><span class="cl">zsh: exec format error: ./hello_world
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ readelf --file-header --wide hello_world
</span></span><span class="line"><span class="cl">readelf: Error: Not an ELF file - it has the wrong magic bytes at the start
</span></span></code></pre></div><p>The reason for this behaviour is written in kernel code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.7/source/include/uapi/linux/elf.h#L348
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define	ELFMAG		&#34;\177ELF&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define	SELFMAG		4
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">https://elixir.bootlin.com/linux/v6.5.7/source/fs/binfmt_elf.c#L848
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="n">retval</span> <span class="o">=</span> <span class="o">-</span><span class="n">ENOEXEC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">memcmp</span><span class="p">(</span><span class="n">elf_ex</span><span class="o">-&gt;</span><span class="n">e_ident</span><span class="p">,</span> <span class="n">ELFMAG</span><span class="p">,</span> <span class="n">SELFMAG</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">goto</span> <span class="n">out</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="change-the-executable-class-64-bit---32-bit">Change the executable class (64 bit -&gt; 32 bit)</h3>
<ul>
<li>Open the file with vim and edit the <code>EI_CLASS</code> part.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Before
</span></span><span class="line"><span class="cl">  00000004: 02  .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># After
</span></span><span class="line"><span class="cl">  00000004: 01  .
</span></span></code></pre></div><ul>
<li>revert the hex to binary data (<code>:%!xxd -r</code>)</li>
<li>write and quit vim (I&rsquo;m still not telling you the command)</li>
<li>analyze it</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Runs perfectly fine
</span></span><span class="line"><span class="cl">❯ ./hello_world
</span></span><span class="line"><span class="cl">Hello World1
</span></span><span class="line"><span class="cl">Hello World2
</span></span><span class="line"><span class="cl">Hello World3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># file command tells another tale
</span></span><span class="line"><span class="cl">❯ file hello_world
</span></span><span class="line"><span class="cl">hello_world: ELF 32-bit LSB pie executable, x86-64, version 1 (SYSV), no program header, no section header
</span></span></code></pre></div><p>This is clearly a parsing problem. There are no checks on the kernel for the <code>EI_CLASS</code> (or I should say I could not find any, if you find one, please let me know.)</p>
<h3 id="more-diy-kind-of">&hellip;more (DIY, kind of)</h3>
<p>There are few more interesting things you can play around with</p>
<ul>
<li><code>EI_OSABI</code></li>
<li><code>e_machine</code></li>
<li><code>e_entry</code></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>ELF headers emerge as the silent orchestrators of the executable files&hellip; The backstage bosses of the show. In this article, we cracked open their secrets (with not-so-real-world tricks) and diving into their nitty-gritty using hexdumps. Think of this as the cool architect of the software world, shaping how things work under the hood.</p>
<p>Mastering these headers is like getting a backstage pass to rock the binary world - tweaking, fixing, and making stuff dance to your tune. So next time you run an executable on *unix machines, remember, ELF header are the groove makers behind the scenes!</p>
<hr>
<h2 id="useful-links">Useful links</h2>
<ol>
<li>(ELF Specification 1.1) <a href="https://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf">https://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf</a></li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>
